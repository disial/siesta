##############################################
 Detailed Changes between v4.0 and v4.1-b4
##############################################

------------------------------------------------------------
revno: 1036
tags: v4.1-b4
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2018-11-07 13:04:27 +0100
message:
  Updated release.sh script to add version/title to the *.tex files
  
  Since we have added PDF-metadata we need a bit more information
  in the files.
------------------------------------------------------------
revno: 1035
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2018-11-07 09:49:58 +0100
message:
  Updated installation script for NetCDF-4 support (library updates)
------------------------------------------------------------
revno: 1034
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2018-11-07 09:18:59 +0100
message:
  Updated all test output and added the ones that were missing
  
  Since this run also has the new NRTAB implementation nearly
  all things change (to the X.XY Y digit in energies).
  
  Also amended the RELEASE_NOTES
------------------------------------------------------------
revno: 1033
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2018-11-05 09:13:09 +0100
message:
  Added TS tests for the run_tests.sh script, also fixed a cp statement
------------------------------------------------------------
revno: 1032
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2018-11-02 15:12:58 +0100
message:
  Added 3 tests such that we can compare with DirectPhi calculations
  
  For now we have never had tests using DirectPhi, I have now added 2
  tests (and 1 without DirectPhi) such that we can compare:
  
  The si111-spinpol test has been split into 4 test cases:
  
  - si111 (no polarization, no direct-phi)
  - si111-directphi (no polarization, direct-phi)
  - si111-spinpol (polarization, no direct-phi)
  - si111-spinpol-directphi (polarization, direct-phi)
  
  Running the tests for the 4 systems gives the same output (by symmetry).
------------------------------------------------------------
revno: 1031
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2018-11-02 10:03:25 +0100
message:
  Final fix for OMM with high debug flags
  
  Now the psi array is minimally 1 element big such that we can pass
  arrays as dummy-arguments.
------------------------------------------------------------
revno: 1030
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Thu 2018-11-01 16:18:16 +0100
message:
  Fix OMM reuse of the psi array from 'densematrix' module
  
  The OMM method can use eigenvectors from diagonalization as seeds. In
  that case the first few nominal OMM iterations are actually calls to
  'diagon'. In 'compute_dm', 'diagon' is now passed an extra (optional)
  argument to signal the need to keep the eigenvectors.  The array 'psi'
  will not be deallocated in diagon, but after the first true OMM step.
  
  (Thanks to Nick Papior for finding the bug)
------------------------------------------------------------
revno: 1029
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2018-11-01 13:35:25 +0100
message:
  Fixed some more tests with few core requirements, also discovered a bug in OMM
  
  This partially fixes the OMM bug since the psi array wasn't allocated on entry.
  The OMM Gamma-only calculation is still faulty because the psi array *should*
  contain the previous diagon wavefunction coefficients. This commit simply
  ensures the arrays to be allocated. But with wrong numbers. I.e. the subsequent
  OMM cycle produces NaN because psi is 0.
------------------------------------------------------------
revno: 1028
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2018-10-31 21:04:52 +0100
message:
  Added target for tests which will not pass for more than a couple of procs
  
  This relates to the tests which have fewer orbitals than the number of processors used.
  Now for 8 cores or more we should run:
  
    make tests-proc-limit MPI="mpirun -np 2"
    make MPI="mpirun -np 8"
  
  which will automatically skip the already completed ones.
  
  Fixed mix_linear test
------------------------------------------------------------
revno: 1027
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2018-10-31 15:15:59 +0100
message:
  Another try at cleaning up tests for running transiesta tests on cluster
------------------------------------------------------------
revno: 1026
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2018-10-31 09:56:18 +0100
message:
  Cleaned tests and fixed transiesta tests
  
  Many tests had MaxSCFIterations specified, I have removed nearly all of them
  because I think the tests should reflect keywords that are important for the
  test. And also, we need the tests to behave somewhat correct for default values.
------------------------------------------------------------
revno: 1025
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-10-30 21:11:45 +0100
message:
  Allowed a test to continue, even if not converged in # of steps
------------------------------------------------------------
revno: 1024
fixes bug: https://launchpad.net/bugs/1800652
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-10-30 20:38:47 +0100
message:
  Fixed GR-pulay history step
  
  Now the GR pulay variant works as expected if it is the "next" mixer after
  Broyden/Pulay mixers. The history was trying to copy too many elements
  and also, the stored quantities is not the same.
------------------------------------------------------------
revno: 1023 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2018-10-25 21:59:34 +0200
message:
  Merged r586-587, bugfix for grid-cell sampling and output
    ------------------------------------------------------------
    revno: 483.3.101
    fixes bug: https://launchpad.net/bugs/1799991
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Thu 2018-10-25 21:51:03 +0200
    message:
      Fixed grid-cell sampling and output density, lp:1799991
      
      The output density is not according to the input atomic coordinates.
      This was because the neighbouring lists was only updated for the last
      displaced atoms.
      The fix is however very easy since we simply call the dhscf_init
      routine again with the input atomic coordinates after having performed
      the grid-cell sampling.
    ------------------------------------------------------------
    revno: 483.3.100
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Wed 2018-09-12 21:21:03 +0200
    message:
      Added phony targets to version and version.o, always compile version.o
------------------------------------------------------------
revno: 1022
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2018-10-25 10:28:50 +0200
message:
  Allowed writing TSDE/TSHS files with FixSpin calculations
  
  This allows one to construct electrodes/initial DM files with
  fixed spin calculations. Then one may use this as input for transiesta
  without fixspin.
------------------------------------------------------------
revno: 1021
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2018-10-22 17:19:19 +0200
message:
  Removed Metis pivoting in TranSiesta analyze
  
  It *always* produced bad pivoting, and for disconnected graphs
  it would crash.
  Now one can enable it using a pre-processor statement:
    TS_PVT_METIS
  which is not documented because I don't think it is even applicable.
  So better not confuse users to think it is better by having it optionally.
  
  The timer printed for the analyzation is now also for the analyzation method.
------------------------------------------------------------
revno: 1020
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2018-10-22 16:52:45 +0200
message:
  Updated documentation to prepare for 4.1-b4
  
  Added more references and changed a few citations for consistency.
  The PDF now also internally has the correct title and the author-list
  for the steering committee.
------------------------------------------------------------
revno: 1019
author: Alberto Garcia <albertog@icmab.es>
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2018-10-22 16:34:22 +0200
message:
  Fixed release notes
------------------------------------------------------------
revno: 1018
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Mon 2018-10-22 16:12:27 +0200
message:
  Update contributors list and front-matter in manual
  
  Display the composition of the Steering Committee in the front-matter
  of the manual, setting it apart from the list of contributors.
  
  Update Docs/Contributors.txt
------------------------------------------------------------
revno: 1017
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2018-10-18 22:35:23 +0200
message:
  Allowed +/- for real-space SE
  
  When using the real-space SE one still needs planes to fix the
  Hartree potential. Prior to this commit the sign was fixed to '-'
  which meant that only one side of the cell-box was checked for the
  Hartree plane correction. However, the user should decide because
  one atomic plane may lie on the cell-edge.
  
  Also, a few places we calculated the area of two spanning vectors.
  The equations are now fixed by using the cross-product. The prior
  used equations only worked correctly for orthogonal cells.
------------------------------------------------------------
revno: 1016
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2018-10-18 19:44:29 +0200
message:
  Fixed OpenMP charge calculation, thanks to Matthieu Verstraete
  
  The collapse statement in dm_charge was wrong, however older
  compilers did not catch this. It was first in GNU 8.2 this was
  caught.
------------------------------------------------------------
revno: 1015
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2018-10-18 12:07:26 +0200
message:
  Allowed TBT calculation of bulk-DOS for electrodes even for out-of-core calculations
  
  Prior to this commit one could not calculate bulk-DOS/T when *any* electrode
  was using out-of-core capability.
  Now the bulk-DOS/T is calculated for those electrodes that does not use out-of-core.
------------------------------------------------------------
revno: 1014
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2018-10-17 15:04:40 +0200
message:
  Fixed r1009 for band calculations
  
  Now the densematrix module implemented by using the alloc routine
  in the module to allocate the 3 arrays. This ensures the naming of the
  routine allocation to be equivalent to the deallocation.
------------------------------------------------------------
revno: 1013
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2018-10-17 11:39:50 +0200
message:
  Final fix for real-space SE
  
  Also made some checks in the dm_update routine more compiler
  robust.
------------------------------------------------------------
revno: 1012
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-10-16 13:10:27 +0200
message:
  Updated makefiles and dates in manual
  
  Also added Fabiano as contributor in the manual.
------------------------------------------------------------
revno: 1011
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-10-16 12:59:17 +0200
message:
  Fixed TBTGF name for TBT.Spin
  
  Since the TBTGF always contains *all* spin-components we don't need
  specific up/down file names.
------------------------------------------------------------
revno: 1010
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-10-16 10:54:32 +0200
message:
  Fixed electrode transverse Gamma kgrid-checks
  
  When an electrode is non-periodic transverse to the semi-infinite
  direction there is no point in checking the k-point sampling
  in transiesta
------------------------------------------------------------
revno: 1009
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Mon 2018-10-15 23:10:25 +0200
message:
  Deallocate arrays in densematrix as soon as possible
------------------------------------------------------------
revno: 1008 [merge]
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Mon 2018-10-15 23:08:05 +0200
message:
  Merge documentation for real-space grid
    ------------------------------------------------------------
    revno: 989.1.5
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-docs-ag
    timestamp: Sat 2018-10-13 01:51:05 +0200
    message:
      Add doc file for real-space grid. Some doc fixes
    ------------------------------------------------------------
    revno: 989.1.4 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-docs-ag
    timestamp: Fri 2018-10-12 17:04:35 +0200
    message:
      Merge up to 4.1-1001
------------------------------------------------------------
revno: 1007
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2018-10-15 21:44:45 +0200
message:
  Fixed MD calculations and CDF.Save (non-compatible)
  
  The CDF is now disabled for anything but 1-shot calculations
  and FC calculations.
------------------------------------------------------------
revno: 1006
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2018-10-15 21:43:23 +0200
message:
  Updated the release-notes
------------------------------------------------------------
revno: 1005
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-10-09 21:59:16 +0200
message:
  Added developer note for transiesta and sisl
------------------------------------------------------------
revno: 1004
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-10-09 20:07:41 +0200
message:
  Fixed output of Buffer charge in SCF
------------------------------------------------------------
revno: 1003
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-10-09 14:17:05 +0200
message:
  Fixed diag calls for 4.1 with work-size queries
  
  This was caught using valgrind and using the expert driver.
  Apparently the expert driver uses more than 1 element in the work-size
  query calls.
  The work arrays are now 10 upon query. It should be more than enough
  since 4 seems like the upper bound.
------------------------------------------------------------
revno: 1002
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-10-09 14:01:13 +0200
message:
  Moved buffer charge print-out to be at the end
------------------------------------------------------------
revno: 1001
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2018-10-08 11:08:53 +0200
message:
  Reduced disk-space usage for Gamma-only electrodes
  
  A huge memory reduction can be done when an electrode is transverse k-point Gamma-only.
  I.e. if there are no interactions along the transverse directions there
  is no point in re-calculating the same self-energy over and over.
  
  This is often encountered in N>2 terminal calculations and in e.g. graphene-GNR
  constrictions.
  
  This feature is not fully tested and should be tested before 4.1-b4 is released.
------------------------------------------------------------
revno: 1000
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2018-10-03 08:07:00 +0200
message:
  Improved output when GF files fail their checks
------------------------------------------------------------
revno: 999
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-10-02 14:27:31 +0200
message:
  Fixed too small work array for huge electrodes compared to the device
  
  This happens in cases with bias and for electrodes with matrix elements
  exceeding half the full matrix.
  Now there is an explicit calculation of the required work-array when
  expanding the self-energies.
------------------------------------------------------------
revno: 998
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-10-02 13:47:31 +0200
message:
  Cleaned save_density_matrix, there were problems for certain TSDE writes
  
  Now the TSDE writes functions as initially anticipated.
  If the user requests TS.DE.Save, it will be obeyed regardless of Write.DM.
  Currently the only deficiency is when SCF.MixAfterConvergence is true Siesta
  will do 2 writes of TSDE.
------------------------------------------------------------
revno: 997
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-10-02 12:50:11 +0200
message:
  Transferred save_density_matrix to F90, no code changes
------------------------------------------------------------
revno: 996
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-10-02 09:25:40 +0200
message:
  Added more information when GF files are not consistent
  
  Now the energy points are written
------------------------------------------------------------
revno: 995
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2018-09-27 14:25:13 +0200
message:
  Finalized real-space GF testing
  
  Now real-space GF works with transiesta and tbtrans
------------------------------------------------------------
revno: 994
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-09-25 14:23:45 +0200
message:
  Minor bug-fixes related to real-space SE
------------------------------------------------------------
revno: 993
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-09-25 11:33:01 +0200
message:
  Enabled real-space self-energies
  
  Now TranSiesta/TBtrans can read in TSGF/TBTGF files containing the real-space
  self-energies corresponding to 2 directions collapsed into one.
  This is accomblished by specifying two directions in the semi-infinite direction:
  
    semi-inf AB
    semi-inf AC
  
  where the sign -/+ have no effect.
------------------------------------------------------------
revno: 992
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2018-09-24 09:27:11 +0200
message:
  Ensured TSDE is only written at convergence for non-TS calculations
------------------------------------------------------------
revno: 991 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2018-09-19 08:59:17 +0200
message:
  Merged Alberto's additional documentation
  
  Now the utilites are described at a higher level.
    ------------------------------------------------------------
    revno: 989.1.3 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-docs-ag
    timestamp: Tue 2018-09-18 17:39:18 +0200
    message:
      Merge 4.1-990
    ------------------------------------------------------------
    revno: 989.1.2
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-docs-ag
    timestamp: Tue 2018-09-18 16:22:58 +0200
    message:
      Add more pages for general overview
    ------------------------------------------------------------
    revno: 989.1.1
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-docs-ag
    timestamp: Fri 2018-09-14 14:29:11 +0200
    message:
      Carry over remaining comments from supercell merge
------------------------------------------------------------
revno: 990
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2018-09-14 14:32:34 +0200
message:
  Allowed multiple electrodes to automatically set the non-equilibrium contour
  
  Since the neq-contour has changed one can easily find the automatic non-equilibrium
  contour. This is now allowed.
  Only equilibrium contours require a user-input for multiple electrodes (could be
  made automatic).
------------------------------------------------------------
revno: 989
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2018-09-13 09:48:58 +0200
message:
  Forgot to add variable use in module
------------------------------------------------------------
revno: 988
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2018-09-12 21:32:51 +0200
message:
  Fixed when to writeout TSDE files
------------------------------------------------------------
revno: 987
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2018-09-12 15:31:30 +0200
message:
  Updated makefiles in Utilities
------------------------------------------------------------
revno: 986 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2018-09-12 15:30:24 +0200
message:
  Implemented closing of the majority of commonly used blocks
  
  Closing of blocks in the log when using fdf_b* calls was problematic
  if the code did not read the last line of the block (i.e. this was
  the only way to ensure the %endblock <label> in the fdf-*.log.
  
  There are some problems with this and transiesta because the transiesta
  codes are using fdf_bbackspace (which re-writes to the log file).
  However, for Siesta the above should work.
    ------------------------------------------------------------
    revno: 983.1.1
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-fdf-blocks
    timestamp: Sun 2018-09-09 21:46:08 +0200
    message:
      Implemented closing of the majority of commonly used blocks
      
      Closing of blocks in the log when using fdf_b* calls was problematic
      if the code did not read the last line of the block (i.e. this was
      the only way to ensure the %endblock <label> in the fdf-*.log.
      
      There are some problems with this and transiesta because the transiesta
      codes are using fdf_bbackspace (which re-writes to the log file).
      However, for Siesta the above should work.
------------------------------------------------------------
revno: 985 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2018-09-12 15:27:51 +0200
message:
  Fixing MD/supercell changes to the sparsity pattern, add initial developer documentation template
  
  This fixes the remaining issue of changing the sparsity pattern while using DM extrapolation.
  I.e. now the DM_history sparse matrices are aligned with the current MD-steps sparse pattern.
  Additionally this change also allows reading *any* DM file which is then converted to the intrinsic
  sparse pattern used by siesta. This brings forth a nice platform for creating better initial guesses
  based on simpler models (e.g. use sisl to create a better guess).
  
  Secondly, Alberto created an initial template for doing developer documentation in Siesta.
  Now FORD (doxygen for testing purposes) may be used to generate documentation of the full
  Siesta code!
  Indeed this is extremely valuable to point new-comers to internal details in Siesta.
  
  This merge also adds developers documentation to clarify usages and variables in the code
  base. Essentially the main functionality of the class-based types are documented with
  emphasis on the Sparse pattern type. This is justified by the wide-spread use of these
  data-types across the code-base.
  
  This merge is a big collaboration effort between Nick R. Papior and Alberto Garcia.
    ------------------------------------------------------------
    revno: 969.1.20
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-md-supercell
    timestamp: Wed 2018-09-12 11:59:52 +0200
    message:
      Updated Makefiles
    ------------------------------------------------------------
    revno: 969.1.19
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-md-supercell
    timestamp: Wed 2018-09-12 11:59:01 +0200
    message:
      Re-added the copy-supercell routines which may be useful in some utilities
      
      For now they are removed from the actual code via pre-processor statements.
    ------------------------------------------------------------
    revno: 969.1.18
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-md-supercell
    timestamp: Wed 2018-09-12 11:56:23 +0200
    message:
      Applied patch for fixing folding into 000 supercells
      
      This change has surfaced from discussion with Alberto (his fix).
      This change stores the 000 element in the supercell DM, and if
      this element does not exist it will store a "random" supercell DM
      element. This has some problems for very small unit-cells, however,
      we expect this problem to be insignificant compared to the problems it
      solves.
    ------------------------------------------------------------
    revno: 969.1.17 [merge]
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-md-supercell
    timestamp: Wed 2018-09-12 11:51:20 +0200
    message:
      Merged Alberto's fixes for DM folding
        ------------------------------------------------------------
        revno: 969.4.4
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.1-supercell
        timestamp: Tue 2018-09-11 22:09:05 +0200
        message:
          Replace the 'folding' algorithm by 'copying' for nsc==1,1,1
          
          Rather than adding up equivalent elements, only a copy is
          performed, as fits the DM.
        ------------------------------------------------------------
        revno: 969.4.3
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.1-supercell
        timestamp: Tue 2018-09-11 10:38:04 +0200
        message:
          Update some comments in 'm_new_dm'. Move module import
        ------------------------------------------------------------
        revno: 969.4.2
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.1-supercell
        timestamp: Tue 2018-09-11 09:56:58 +0200
        message:
          Remove unused 'exact_sc_size' routine from 'm_supercell'
        ------------------------------------------------------------
        revno: 969.4.1
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.1-supercell
        timestamp: Tue 2018-09-11 09:54:29 +0200
        message:
          Remove unused 'copy_supercell' routines from 'm_handle_sparse'
    ------------------------------------------------------------
    revno: 969.1.16 [merge]
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-md-supercell
    timestamp: Wed 2018-09-05 15:35:23 +0200
    message:
      Merged Alberto's documentation updates (clarifications)
        ------------------------------------------------------------
        revno: 969.3.5
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.1-ag-md-supercell
        timestamp: Tue 2018-09-04 14:30:39 +0200
        message:
          More docs
        ------------------------------------------------------------
        revno: 969.3.4
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.1-ag-md-supercell
        timestamp: Tue 2018-09-04 11:07:34 +0200
        message:
          Comment restruct_Data and children
        ------------------------------------------------------------
        revno: 969.3.3
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.1-ag-md-supercell
        timestamp: Mon 2018-09-03 23:01:34 +0200
        message:
          More documentation
        ------------------------------------------------------------
        revno: 969.3.2 [merge]
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.1-ag-md-supercell
        timestamp: Mon 2018-09-03 17:01:39 +0200
        message:
          Merged Nick's patch for unfolding when nsc_read=1
        ------------------------------------------------------------
        revno: 969.3.1
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.1-ag-md-supercell
        timestamp: Mon 2018-09-03 17:00:28 +0200
        message:
          Update some documentation
    ------------------------------------------------------------
    revno: 969.1.15
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-md-supercell
    timestamp: Wed 2018-09-05 15:28:28 +0200
    message:
      Implemented auxiliary cell to Gamma-only sparse pattern folding mechanism
      
      When starting from a DM originating from a supercell calculation, and
      performing a Gamma-only calculation, then connections may be doubled when
      io,jo == io,io where jo is the supercell orbital.
      This should equate to summing the DM contributions for all equal orbitals.
      
      This is now implemented and tested for the si64 system
      1. no auxiliary cell
      2. auxiliary, init with DM from 1.
      3. no auxiliary, init with DM from 2.
    ------------------------------------------------------------
    revno: 969.1.14
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-md-supercell
    timestamp: Mon 2018-09-03 15:27:04 +0200
    message:
      Implemented a Gamma-only sparse pattern extrapolator
      
      When starting from a DM originating from a Gamma-only calculation the only elements that
      exists are elements that "looks" like they exist in the primary unit cell. However,
      they in fact correspond to supercell connections. Now the code will try and unfold
      the Gamma-only calculation DM elements to the supercell format by copying the elements
      multiple times (this comes from the fact that the DM is a Gamma-only with auxiliary cell
      has the same DM elements for all orbital connections).
      
      There are cases where this does not hold, e.g. when users create their own initial DM, in those
      cases one can use the flag: DM.Init.Unfold false to disable the unfolding.
    ------------------------------------------------------------
    revno: 969.1.13
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-md-supercell
    timestamp: Mon 2018-09-03 10:21:10 +0200
    message:
      Updated description in the code for the correction of the supercell
    ------------------------------------------------------------
    revno: 969.1.12
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-md-supercell
    timestamp: Thu 2018-08-30 11:30:19 +0200
    message:
      Added doxygen creation (using Ford files)
      
      The documentation created by doxygen is now very limited.
      However, it may be used to check that code-documentation is
      ford-doxygen compatible!
      Indeed the sparse_matrices.f90
      
      There are some major difficulties in implementation for both:
      
      - ford accepts markdown-like links with specific entries for the
        pages site, i.e.: [see here](|page|/.../page.html).
        These are not used by Doxygen
      - Doxygen uses \* commands for creating specific entries etc.
        These are not used by ford
      
      Bottomline, continue using FORD, but iff documentation is added
      in the code files, check that it runs using Doxygen.
    ------------------------------------------------------------
    revno: 969.1.11
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-md-supercell
    timestamp: Thu 2018-08-30 11:14:52 +0200
    message:
      Finalized a few more details in the ford documentation styles.
    ------------------------------------------------------------
    revno: 969.1.10
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-md-supercell
    timestamp: Thu 2018-08-30 10:02:37 +0200
    message:
      Added more explanations to the documentation of the sparse matrices
    ------------------------------------------------------------
    revno: 969.1.9 [merge]
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-md-supercell
    timestamp: Thu 2018-08-30 09:45:13 +0200
    message:
      Merged Albertos documentation, should be easily maintainable
        ------------------------------------------------------------
        revno: 969.2.2
        committer: Nick Papior <nickpapior@gmail.com>
        branch nick: 4.1-supercell-docs
        timestamp: Thu 2018-08-30 09:44:10 +0200
        message:
          Added onto Alberto's suggestion of using ford for documentation
          
          Moved all content to Docs/developer.
          This is to reduce clutter in the top directory (ford-siesta.md)
          and in the Docs folder.
          The directory may easily be moved.
        ------------------------------------------------------------
        revno: 969.2.1 [merge]
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.1-md-supercell
        timestamp: Tue 2018-08-28 16:22:37 +0200
        message:
          Merge FORD docs and pages
            ------------------------------------------------------------
            revno: 958.1.1
            committer: Alberto Garcia <albertog@icmab.es>
            branch nick: 4.1-docs
            timestamp: Tue 2018-08-28 16:11:31 +0200
            message:
              Basic support for FORD
    ------------------------------------------------------------
    revno: 969.1.8
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-md-supercell
    timestamp: Mon 2018-08-27 09:34:05 +0200
    message:
      Added more descriptions about the converting of sparse patterns
      
      Also added a Sp1D routine for copy/correct_supercell routines.
    ------------------------------------------------------------
    revno: 969.1.7
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-md-supercell
    timestamp: Sun 2018-08-26 22:07:17 +0200
    message:
      Added description of the sparse matrix format in sparse_matrices.F90
    ------------------------------------------------------------
    revno: 969.1.6
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-md-supercell
    timestamp: Sun 2018-08-26 21:30:49 +0200
    message:
      Moved sparse_matrices.F to sparse_matrices.F90
    ------------------------------------------------------------
    revno: 969.1.5
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-md-supercell
    timestamp: Sun 2018-08-26 21:04:18 +0200
    message:
      Cleaned reading DM files
    ------------------------------------------------------------
    revno: 969.1.4
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-md-supercell
    timestamp: Fri 2018-08-24 15:23:21 +0200
    message:
      Finished the implementation of the supercell changes
      
      Now the DM_history and reading of a DM enables reading from different
      nsc patterns.
    ------------------------------------------------------------
    revno: 969.1.3
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-md-supercell
    timestamp: Fri 2018-08-24 15:02:23 +0200
    message:
      Bugfix in the copy_supercell routine
      
      Also added a new subroutine to correct a supercell_sp_d2 in-place.
      This 2nd routine will change the column values to the new supercell places
      and if the new supercell does not exist the value will be deleted.
      A further reduction of the sparse pattern must happen in another
      routine.
    ------------------------------------------------------------
    revno: 969.1.2
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-md-supercell
    timestamp: Fri 2018-08-24 15:01:28 +0200
    message:
      Added nsc to DM output
      
      Now the first record in DM files contain:
      
      no_u, nspin, nsc(1), nsc(2), nsc(3)
      
      which tells off the supercell information. This is necessary
      to transfer any matrix from one supercell pattern to another
      supercell pattern.
      
      I have checked that older codes will still read the files.
      This is not surprising since fortran's read statements tries
      to read the variables specified. If the requested input is too
      short, then the rest is simply discarded. I.e. the files are forward
      and backward compatible!
    ------------------------------------------------------------
    revno: 969.1.1
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-md-supercell
    timestamp: Fri 2018-08-24 15:00:35 +0200
    message:
      First commit for the sp-copy
      
      A first attempt on implementing a SC1-sp -> SC2-sp
      routine has been created.
      
      The routine is agnostic on orbital ordering so it should
      also handle cases were orbitals swap places (e.g. due to MD
      simulations).
------------------------------------------------------------
revno: 984
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-09-11 20:46:44 +0200
message:
  Removed unused routine in TBtrans
------------------------------------------------------------
revno: 983
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Sat 2018-09-08 06:18:59 +0200
message:
  fdf-updates, allow fixing block-log output, added block-line-count and is-block
  
  The fdf-infrastructure is default to create log-output files. However, these
  log-files are not directly usable as input for subsequent siesta runs.
  The reason was that blocks *only* wrote out %endblock to the log if
  fdf_bline was called until it failed, i.e. to the end of the block.
  And currently many places in siesta was reading based on another integer
  input. Secondly, the fdf_defined opened a block which isn't necessary.
  
  The solution is divided into a few things, parenthesis is the interface:
  
  fdf_isblock: (label)
  Added this routine to check whether a label is defined as a block.
  Currently there may be inconsistencies if the label is used both as
  block and label, however one can then programatically decide.
  This routine is now used in fdf_defined because it removes the call
  to fdf_block (which opens the block).
  
  Writes
  
    #:block? <label> T/F
  
  to log.
  
  fdf_bclose: (block_fdf)
  Added routine to loop the remaining lines in the block. This is never necessary
  unless one wants the log-file to be complete in terms of re-use.
  I.e. if one reads all lines in the block via:
     do while ( fdf_bline(bfdf, pline) )
       ...
     end do
  there is no need for fdf_bclose. However, with
  
     n = fdf_get('LabelSize', 0)
     if ( n > 0 .and. fdf_block('Label', bfdf) ) then
       do i = 1, n
          if ( fdf_bline(bfdf, pline) ) then
  	  ...
  	end if
       end do
     end if
     call fdf_bclose(bfdf)
  
  it is required to use fdf_bclose to close the block in the log.
  
  fdf_block_linecount: (label, morph?)
  Added routine to count the number of lines in a block.
  If morph is not specified, any line counts as a valid line.
  If morph is present a match will be done for each line, and if
  accepted it counts as a line.
  For instance in AtomicCoordinatesAndAtomicSpecies one would do:
  
    na = fdf_block_linecount('AtomicCoordinatesAndAtomicSpecies', 'vvvi')
  
  Note that this routine will suppress writing to the log file. The only thing
  that is written to the log-file is:
  
    #:block-line-count? <label> (morph?) N
  
  
  Secondly, all log-output that does not result in a valid input line is
  prefixed with '#:'
  This was the case for fdf_bbackspace which simply wrote out "(Backspace to..."
  Now it writes: "#:(Backspace to..."
  Also fixed in fdf_defined.
------------------------------------------------------------
revno: 982
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2018-09-06 21:25:04 +0200
message:
  Allowed Src/Libs/create.sh to specify the directory using LAPACK_DIR
------------------------------------------------------------
revno: 981
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2018-09-06 12:00:24 +0200
message:
  Added sparse matrices to the lua interface
------------------------------------------------------------
revno: 980
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2018-09-05 05:32:13 +0200
message:
  Added missing define-statements for missing variables
------------------------------------------------------------
revno: 979
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2018-09-05 05:19:15 +0200
message:
  Added missing if-statement for CDF-writes
------------------------------------------------------------
revno: 978
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-09-04 15:37:24 +0200
message:
  Added missing flag in the intel.make file
  
  The intel compilers are way too aggressive on optimizations.
  By adding -fp-model source/precise to the FFLAGS and FFLAGS_DEBUG
  we can obtain correct execution for the following intel compilers:
  
      2013.0.028 
      2013.1.039 
      2013.1.046 
      2015.0.090 
      2015.1.133 
      2015.3.187 
      2016.1.0.423501 
      2016.2.0 
      2017.0.035 
      2017.1.043 
      2017.4.196 
      2017.7.065 
      2018.0.033 
      2018.1.038 
      2018.2.046 
      2018.3.051
------------------------------------------------------------
revno: 977
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-09-04 13:56:15 +0200
message:
  Automatically add MRRR for serial compilations with libsiestaLAPACK.a
------------------------------------------------------------
revno: 976
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-09-04 13:07:32 +0200
message:
  Updated shipped BLAS+LAPACK to c5471e8be2754345ec650c8d3b08c6eb680ebd0c
  
  Several bug-fixes in LAPACK have been found regarding 2-stage solvers etc.
------------------------------------------------------------
revno: 975
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-09-04 09:17:16 +0200
message:
  Bugfix in ncdf-siesta module, .nc was created before dhscf_init
  
  Now the mesh gets written correctly, i.e. after the grid size has been setup.
  This is now done in dhscf_init which is the only place where ntm is changed.
  
  Also amended two missing deallocates (which is primarily needed for older intel compilers)
------------------------------------------------------------
revno: 974
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Sat 2018-09-01 22:12:17 +0200
message:
  Removed TBT DOS normalization as well as increased precision in k-points
------------------------------------------------------------
revno: 973
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2018-08-31 10:16:05 +0200
message:
  Bugfix when using elec-box in the Hartree solution and Bloch-expansion
  
  There were problems when using the Bloch expansion and a box-Hartree/Voltage
  solution. Effectively the electrode box was only the minimal box which meant
  that it failed to capture the repeated atoms and thus would crash.
  
  Now the expansion of the box is fixed and the suggestions for displacing the
  device is better.
  
  Thanks to Gaetano Calogero for finding the bug.
  
  Also added a flag to explicitly specify which electrode should be used as the
  electrode-plane.
------------------------------------------------------------
revno: 972
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2018-08-30 20:41:18 +0200
message:
  Ensured output of NCDF=0|1 are the same
------------------------------------------------------------
revno: 971
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2018-08-30 20:16:37 +0200
message:
  Bugfix for the offset in the A calculation.
  
  This fixes certain boundary cases with debug compilations.
------------------------------------------------------------
revno: 970
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2018-08-30 11:50:47 +0200
message:
  Fixed normalization output in the ASCII files for TBtrans
  
  The normalization constants where missing when not compiled with NetCDF.
------------------------------------------------------------
revno: 969
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2018-08-22 09:18:33 +0200
message:
  Performance increase for searching the sparse arrays
  
  For now only the tbtrans code is benefitting from this, but
  it may be good to use this searching method elsewere.
  
  This performance increase helps:
  
    - COOP/COHP
    - bond-currents
------------------------------------------------------------
revno: 968
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-08-21 20:24:45 +0200
message:
  Cleaned loops in m_tbt_tri_scat for internal loops
------------------------------------------------------------
revno: 967 [merge]
fixes bug: https://launchpad.net/bugs/1787939
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2018-08-20 20:25:28 +0200
message:
  Merged r585, bugfix for PDOS fmpdos utility
    ------------------------------------------------------------
    revno: 483.3.99
    fixes bug: https://launchpad.net/bugs/1787939
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Mon 2018-08-20 20:22:39 +0200
    message:
      Fixed lp:1787939, PDOS parsing by A.Postnikov utility was broken
      
      After r575 the fmpdos utility was broken because the energy
      format was changed.
      
      This commit should fix this.
------------------------------------------------------------
revno: 966
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2018-08-17 17:05:29 -0400
message:
  Moved writing of ORB_INDX, also made it optional
  
  Now ORB_INDX is optional. For now it is still the default
  but we may consider removing it because it tends to produce
  MB of data for only minimal use.
------------------------------------------------------------
revno: 965
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2018-08-17 16:49:32 -0400
message:
  Cleaned dir_GfGGf to work for more splittings
------------------------------------------------------------
revno: 964
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Sun 2018-08-12 07:36:38 +0200
message:
  Small speed up for propagation spectral function
------------------------------------------------------------
revno: 963
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Sat 2018-08-11 22:49:03 +0200
message:
  Fixed bug introduced in 956 for the propagation routine
  
  Long live two implementations!
------------------------------------------------------------
revno: 962
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Sat 2018-08-11 22:43:08 +0200
message:
  Fixed documentation for PHtrans
  
  Several places the units in the output files were
  written as eV (however, they were in eV**2).
  
  Also added note about TBT.BTD.Spectral in the
  documentation.
------------------------------------------------------------
revno: 961
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2018-08-10 22:45:53 +0200
message:
  Bugfix for PHtrans transmission eigenvalues
------------------------------------------------------------
revno: 960
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2018-08-10 22:35:31 +0200
message:
  Bugfix introduced in 955, the N_Elec2 had the wrong bound
------------------------------------------------------------
revno: 959
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2018-08-10 22:21:57 +0200
message:
  Fixed self-energy unit when doing PHtrans
  
  TODO go through all phonon parts and check units.
------------------------------------------------------------
revno: 958 [merge]
fixes bug: https://launchpad.net/bugs/1786218
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2018-08-09 12:58:26 +0200
message:
  Merged r584, bugfix for printing out too much
    ------------------------------------------------------------
    revno: 483.3.98
    fixes bug: https://launchpad.net/bugs/1786218
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Thu 2018-08-09 12:55:13 +0200
    message:
      Fixed lp:1786218, multiple write-outs of coordinates in i-PI simulations
      
      Now only the ionode is writing out the information.
------------------------------------------------------------
revno: 957
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2018-08-09 12:57:33 +0200
message:
  Introduced logical variables to limit the save_DATA look-up
------------------------------------------------------------
revno: 956
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2018-08-08 14:16:15 +0200
message:
  Small performance increase for very large systems
  
  Now very big systems are even faster (negligeble for small systems).
------------------------------------------------------------
revno: 955
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-08-07 21:37:56 +0200
message:
  Cleaned routines in TS modules
  
  There were some routines that were implemented with only 1 use.
  The corresponding routine has been squashed into the using function.
------------------------------------------------------------
revno: 954
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-08-07 15:00:02 +0200
message:
  Bugfix for initialization of variable
  
  A variable for calculating the required worksize was not initialized properly which
  could in certain cases result in seg-faults.
  This has now been fixed as well as some other small things.
------------------------------------------------------------
revno: 953
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2018-08-02 22:16:22 +0200
message:
  Added projection option print-out, also forced DOS.A to be set
  
  When asking for orbital currents or something related to the spectral function
  the DOS.A is now automatically set to true (its overhead is only calling DOS_A).
  The above also applies for DOS.Gf and also for projections.
  
  The projections now also enable writing out option information.
------------------------------------------------------------
revno: 952
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-07-31 15:27:58 +0200
message:
  Fixed gen-basis as per note by J. Soler, enabled multiple species and LDA+U
  
  The gen-basis utility has been fixed to run (r679 changed the workings of initatom
  which should have been reflected in gen-basis).
  
  Now these things are fixed:
  
  gen-basis may:
  1) read in from file like siesta does now (i.e. no need to pipe)
  2) read in LDA+U specifications (so if future implementations write out the LDA+U basis
     information it is automatically propagated to gen-basis)
  3) allow reading more than one specie (i.e. it should enable reading and plotting
     multiple species)
  4) also write out the ion.xml basis files (mainly because external programs may use it)
  
  I have extended the example with a Ghost oxygen and all plotting files are succesfully
  generated.
------------------------------------------------------------
revno: 951 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2018-07-30 12:50:17 +0200
message:
  Enabled DM/COOP/COHP calculations using projections
  
  Also fixed several memory leaks in the projection routines.
  
  Amended documentation.
    ------------------------------------------------------------
    revno: 948.1.4
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-tbt-coop-proj
    timestamp: Mon 2018-07-30 12:49:24 +0200
    message:
      Bug-fix for the group saving the COOP/COHP/DM in projections
      
      Also added a few more memory counts.
    ------------------------------------------------------------
    revno: 948.1.3 [merge]
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-tbt-coop-proj
    timestamp: Mon 2018-07-30 12:27:08 +0200
    message:
      Merged 4.1 for fdf_brange bug-fix
    ------------------------------------------------------------
    revno: 948.1.2
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-tbt-coop-proj
    timestamp: Sat 2018-07-28 00:50:40 +0200
    message:
      Implemented DM-A, COOP-A, COHP-A for the projection states
      
      This commit also fixes lots of dictionary uses in the projection
      code. It also adds the calculation of the file-size for visual aid.
      
      It still needs to be checked, but I think it is more or less there.
    ------------------------------------------------------------
    revno: 948.1.1
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-tbt-coop-proj
    timestamp: Sat 2018-07-28 00:45:50 +0200
    message:
      Re-indented projection code in TBtrans (no code changes)
------------------------------------------------------------
revno: 950
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2018-07-30 12:26:25 +0200
message:
  Fixed fdf_brange bug
  
  In some cases the fdf_brange could crash if one specified steps and starting points
  in insufficient ways.
  This has been fixed now.
------------------------------------------------------------
revno: 949
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Sun 2018-07-29 20:03:17 +0200
message:
  Trying to circumvent an ancient intel compiler bug
  
  Sadly, I am in no position to check whether it works because I don't have
  that old a compiler.
------------------------------------------------------------
revno: 948 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2018-07-23 15:11:04 +0200
message:
  Fixed indentation in tbt_tri_scat
    ------------------------------------------------------------
    revno: 947.1.1
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-bcoop
    timestamp: Mon 2018-07-23 13:19:39 +0200
    message:
      Fixed indentation in tbt_tri_scat
------------------------------------------------------------
revno: 947 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2018-07-19 21:39:42 +0200
message:
  Merged r583, merged contributor
    ------------------------------------------------------------
    revno: 483.3.97
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Thu 2018-07-19 21:31:44 +0200
    message:
      Added Fabiano Corsetti as contributor
------------------------------------------------------------
revno: 946
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2018-07-13 20:31:43 +0200
message:
  Cleaned m_filter.f90 routine
  
  The filtering used an ancient diagonalization routine of rdiag which
  forced the use of the overlap matrix, however the implementation
  always used a diagonal basis in which case there was never a need for S.
  
  This plus removal of redundant matrices have been implemented.
  The dtrsm call has been removed since S was always diagonal.
  
  This commit introduces no code changes other than clean-ups.
------------------------------------------------------------
revno: 945
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2018-07-13 20:14:42 +0200
message:
  Bumped nmesh to 1024 in m_filter.f90
  
  Certain FilterCutoff values did not result in usable
  basis functions. This change should resolve most of the problems.
  
  This result will change all basis-functions using the FilterCutoff option
  and destroys any backward compatibility for such calculations. Since
  the filtering is only applied when FilterCutoff is specified the majority
  of calculations should be unaffected.
------------------------------------------------------------
revno: 944
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2018-07-13 20:12:29 +0200
message:
  Cleaned up grdsam.F90 for easier code understanding
  
  Also fixed the documentation link to the respective article
  and not the arXiv article.
------------------------------------------------------------
revno: 943
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Mon 2018-07-09 22:11:14 +0200
message:
  Use code from m_io in io.f
  
  Avoid two separate implementations of the same functionality.
------------------------------------------------------------
revno: 942
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2018-07-09 21:00:26 +0200
message:
  Added compression for the FC output
  
  Also added atomic indices for the displaced atoms.
  Mainly to be used later on.
------------------------------------------------------------
revno: 941
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2018-07-09 20:29:17 +0200
message:
  Fixed format in write, m_handle_sparse
------------------------------------------------------------
revno: 940 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2018-07-09 15:25:22 +0200
message:
  Merged r579-582, merged tests, ofc unit and madelung
    ------------------------------------------------------------
    revno: 483.3.96
    tags: v4.0.2
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Wed 2018-07-04 21:26:29 +0200
    message:
      Fixed madelung term for variable cell calculations
      
      This fix only applies to Gamma-point calculations
      for SC/FCC/BCC systems.
    ------------------------------------------------------------
    revno: 483.3.95
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Thu 2018-06-28 11:41:03 +0200
    message:
      Fixed error in unit specification in ofc (only a comment)
    ------------------------------------------------------------
    revno: 483.3.94
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Fri 2018-06-15 22:21:25 +0200
    message:
      Updated all Transiesta+TBtrans tests for 4.0
      
      Since this 4.0 update implements new tabulated values
      a lot of the tests changed values.
      
      This commit only deals with TranSiesta+TBtrans tests.
    ------------------------------------------------------------
    revno: 483.3.93
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Wed 2018-06-13 21:25:31 +0200
    message:
      Reran all tests for 4.0
      
      Since this 4.0 update implements new tabulated values
      a lot of the tests changed values. I have gone through
      all OUT.diffs and asserted that the values are agreeing
      while they are not equal.
      
      Secondly, many of the tests with HarrisFunctional have been
      changed to use regular diagon to make them more predictable
      and stable tests.
      
      This commit only deals with Siesta tests.
------------------------------------------------------------
revno: 939 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2018-07-09 10:01:54 +0200
message:
  Merged ncdf-md fixes, and MD steps
    ------------------------------------------------------------
    revno: 937.1.3
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-ncdf-md
    timestamp: Mon 2018-07-09 09:59:37 +0200
    message:
      Added pjnl_j to the ncdf basis
    ------------------------------------------------------------
    revno: 937.1.2
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-ncdf-md
    timestamp: Mon 2018-07-09 09:41:57 +0200
    message:
      Fixed FinalTimeStep option reads and indentation
      
      Thanks Alberto
    ------------------------------------------------------------
    revno: 937.1.1
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-ncdf-md
    timestamp: Wed 2018-07-04 11:20:12 +0200
    message:
      Fixed NCDF write-out for MD and FC calculations
      
      Previously the NCDF file-write-out would crash when performing
      MD/FC calculations because the sparse arrays does not really make sense
      to store.
      
      Now the file content is based on the type of run, single/MD/FC.
      A relaxation is equivalent to an MD (currently).
      
      One non-CDF related change is the change of MD.NumCGSteps to
      MD.Steps keyword. The NumCGSteps is deprecated since many more
      options have entered and CG was not necessarily the correct instance.
      
      Secondly, the MD.Steps keyword is now also the default for
      MD.FinalTimeStep which means that a single keyword determines the number
      of steps runned.
      
      The old flags are still used as the default values.
------------------------------------------------------------
revno: 938
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2018-07-06 22:00:09 +0200
message:
  Updated debugging messages in the mesh_node routine
------------------------------------------------------------
revno: 937
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-07-03 15:43:29 +0200
message:
  Changed the weighting for the charges to be based on the normalized weights
------------------------------------------------------------
revno: 936
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2018-06-28 15:53:17 +0200
message:
  Fixed a few remaining issues with electrode options and the xa_EPS for elec-DM-copy
  
  Now all options specified for tbtrans *must* be located at the end.
  
  All electrode replicate flags have been removed (use Bloch instead).
  
  Fixed a coordinate check variable to ensure we don't copy too many DM elements
  from the electrode.
------------------------------------------------------------
revno: 935
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-06-26 16:05:53 +0200
message:
  Clean-up of DM.Init.Bulk (still undocumented feature)
  
  Now one can fine-tune the details using Tile/Repeat
  and also the atomic coordinate check may now be decided
  by the user.
------------------------------------------------------------
revno: 934 [merge]
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Tue 2018-06-26 11:36:16 +0200
message:
  Enable auxcell in diag*g and pdos*g. Clarify 'gamma' meaning. NaiveAuxCell
  
  * Enable real-arithmetic operation with an auxiliary cell
  
  The diag*g and pdos*g routines are now able to work transparently even
  if an auxiliary supercell is used (either with explicit use of a
  passed indxuo array or by means of an equivalent MODP helper function
  in 'intrinsic_missing' (a mod with a [1,p] target domain, instead of
  [0,p-1])).
  
  * Clarify the logic flow of the 'gamma'-related variables
  
  The 'm_gamma' module has been removed. 'Gamma' itself is reserved to
  signal an actual gamma-point-only operation in relevant routines. It
  is passed as an argument, with appropriate values imported from the
  k-point sampling modules.
    
  When needed, the use of an auxiliary supercell is detected on the
  basis of the equality or not of 'no_s' and 'no_u'.
  
  The HSX files now output information in 'auxiliary supercell' mode
  (former 'gamma' .false.) even if the supercell is trivially the unit
  cell. They always contain the 'indxuo' array.
    
  Code in Util/COOP has been changed to avoid a spurious check on
  equivalence of the two 'gamma's (one indicating whether wavefunction
  info is complex or real, and the other the presence of a supercell).
  
  It is not possible (or meaningful...) to run a PEXSI calculation with
  a forced auxcell.
    
  Some obsolete checks on indxuo have been removed.
  
  * Re-instate 'naive-auxiliary-cell' option
  
  The auxiliary supercell needed can be determined using the atomic
  positions, the orbital extent and the lattice parameters. For a fixed
  geometry configuration the tightest auxiliary supercell is uniquely
  defined. However, when performing MD simulations (or relaxations) the
  displacement of certain atoms may result in changes to the required
  auxiliary supercell, thus inhibiting re-use of DM information across
  geometry steps.  When this is option is true the auxiliary supercell
  will be computed with a simpler algorithm using only the orbital
  extent and the lattice vectors. The resulting supercell might be
  larger than strictly needed, but it will remain mostly constant during
  the run (even when the MD.VariableCell option is used, if the lattice
  changes are moderate).
    
  By default this will be false when performing single-point
  calculations (MD.TypeOfRun:CG with MD.NumCGsteps:1 or
  below). Otherwise this will default to true.
  
  (Thanks to Nick Papior for several ideas)
    ------------------------------------------------------------
    revno: 926.1.7 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-superc-gamma
    timestamp: Tue 2018-06-26 10:27:41 +0200
    message:
      Re-instate 'naive-aux-cell' option
      
      The auxiliary supercell needed can be determined using the atomic
      positions, the orbital extent and the lattice parameters. For a fixed
      geometry configuration the tightest auxiliary supercell is uniquely
      defined. However, when performing MD simulations (or relaxations) the
      displacement of certain atoms may result in changes to the required
      auxiliary supercell, thus inhibiting re-use of DM information across
      geometry steps.  When this is option is true the auxiliary supercell
      will be computed with a simpler algorithm using only the orbital
      extent and the lattice vectors. The resulting supercell might be
      larger than strictly needed, but it will remain mostly constant during
      the run (even when the MD.VariableCell option is used, if the lattice
      changes are moderate).
      
      By default this will be false when performing single-point
      calculations (MD.TypeOfRun:CG with MD.NumCGsteps:1 or
      below). Otherwise this will default to true.
      
      (Thanks to Nick Papior)
        ------------------------------------------------------------
        revno: 933.1.1
        committer: Nick Papior <nickpapior@gmail.com>
        branch nick: 4.1-naive-aux-cell
        timestamp: Mon 2018-06-25 14:34:36 +0200
        message:
          Reimplemented the NaiveAuxiliaryCell option
          
          And further enhanced it by forcing the aux-cell size to
          be the largest one for anything but single-shot calculations.
          
          This does not fix *all* cases of error handling since when performing
          variable cell calculations the auxiliary cell may again change.
          
          One solution could be if naive aux-cell is used then the aux-cell is
          forced to be the same for cell_can_change calculations?
    ------------------------------------------------------------
    revno: 926.1.6 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-superc-gamma
    timestamp: Tue 2018-06-26 09:41:31 +0200
    message:
      Re-instatiate gamma arguments. Update modp. Update TS interfaces
      
      (Thanks to Nick Papior)
      
      The flow of 'gamma' (meaning Gamma-point sampling only) is now more
      clear.
      
      The new MODP1 now replaces the former MODP.
      
      TranSiesta routines avoid the use of 'not_using_auxcell'.
        ------------------------------------------------------------
        revno: 926.2.1
        committer: Nick Papior <nickpapior@gmail.com>
        branch nick: 4.1-superc-gamma
        timestamp: Mon 2018-06-25 13:33:42 +0200
        message:
          Re-instantiated Gamma were appropriate
          
          The main reason is that the Gamma variable "lives" together
          with the k-points and in that sense they are co-existing for a reason.
          
          Made MODP1 the default MODP routine, it is slightly faster than the older
          routine!
    ------------------------------------------------------------
    revno: 926.1.5 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-superc-gamma
    timestamp: Wed 2018-06-20 12:43:13 +0200
    message:
      Sync to 4.1 rev 933
    ------------------------------------------------------------
    revno: 926.1.4
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-superc-gamma
    timestamp: Wed 2018-06-20 12:40:25 +0200
    message:
      Guard PEXSI solver from auxiliary supercells
    ------------------------------------------------------------
    revno: 926.1.3
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-superc-gamma
    timestamp: Wed 2018-06-20 12:34:33 +0200
    message:
      Removed m_gamma module. Used helper function MODP1 in diag*g routines
      
      When needed, the 'not_using_auxcell' variables are local to the relevant routines,
      and computed on the basis of the equality or not of no_s and no_u.
      
      The role of 'indxuo' in the diag*g routines is taken by a new helper function MODP1
      implemented in 'intrinsic_missing' (a mod with a [1,p] target domain, instead of [0,p-1])
    ------------------------------------------------------------
    revno: 926.1.2
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-superc-gamma
    timestamp: Wed 2018-06-20 00:12:50 +0200
    message:
      HSX files always contain the 'indxuo' array
      
      The HSX files now output information in 'auxiliary supercell' mode
      (former 'gamma' .false.)  even if the supercell is trivially the unit
      cell.
      
      Code in Util/COOP has been changed to avoid a spurious check on equivalence
      of the two 'gamma's (one indicating whether wavefunction info is complex or
      real, and the other the presence of a supercell).
    ------------------------------------------------------------
    revno: 926.1.1
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-superc-gamma
    timestamp: Wed 2018-06-13 00:59:08 +0200
    message:
      Enable auxcell operation in diag*g and pdos*g routines. Gamma flow
      
      (Work in progress)
      
      Module m_gamma is now imported with renaming of 'gamma' to
      'not_using_auxcell'.  'Gamma' itself (as a local variable) is reserved
      for actual gamma-point-only operation in relevant routines.
      
      The diag*g and pdos*g routines are now able to work transparently even
      if an auxiliary supercell is used (either with explicit use of a
      passed indxuo array or by means of an equivalent 'mod' operation).
      
      Possible TranSiesta subtleties have not yet been checked.
      
      PEXSI will not work properly with a forced auxcell yet, and there are
      no checks (nor for non-gamma operation!).
      
      Some obsolete checks on indxuo have been removed.
------------------------------------------------------------
revno: 933
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-06-19 13:00:00 +0200
message:
  Corrected EDM setting when using electrode bulk DM
  
  Also added a flag TS.Hartree.Offset which specifies a
  global offset that will be added to the Hartree potential.
  
  Also enabled TS.Elecs.DM.Init force-bulk to also do it
  in V /= 0 bias calculations.
------------------------------------------------------------
revno: 932
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2018-06-18 13:11:40 +0200
message:
  Fixed electrode names and TBT.*nc output
  
  Now electrodes may not be named Device/Buffer or
  having an "+" in the name.
  
  Secondly, the atomic indices of the electrode regions are now stored
  in the nc file-outputs.
  
  This enables sisl to attach group-names.
------------------------------------------------------------
revno: 931
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2018-06-15 14:05:36 +0200
message:
  Limited integer field size in ofc
------------------------------------------------------------
revno: 930
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2018-06-15 13:53:45 +0200
message:
  Increased precision for FA/FC files (also added some meta-data)
  
  The FC files now contain the number of atoms and the displacement used.
  
  Both the FC and FA files now use an increased precision.
------------------------------------------------------------
revno: 929
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Tue 2018-06-12 15:18:32 +0200
message:
  Increase precision of tables in .ion files
------------------------------------------------------------
revno: 928
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-06-12 11:46:35 +0200
message:
  Added print-out of buffer charge (if present)
  
  When doing charge corrections in the buffer region it
  is a nice tool to check the charge fluctuations in the buffer
  region.
------------------------------------------------------------
revno: 927
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-06-12 10:25:55 +0200
message:
  Fixed TS.Elecs.DM.Init to diagon for bias calculations
  
  Since the DM should only be copied in the V == 0 case
  we now disable this when requesting it for bias calculations.
------------------------------------------------------------
revno: 926
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Fri 2018-06-08 18:37:51 +0200
message:
  Fix argument errors in new overfsm routine
  
  A few errors were introduced in	the conversion of overfsm to .f90 format
------------------------------------------------------------
revno: 925 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2018-06-08 16:34:39 +0200
message:
  Merged r577-578, merged wave-io and iosockets fix
    ------------------------------------------------------------
    revno: 483.3.92
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Fri 2018-06-08 16:32:13 +0200
    message:
      Fixed a mistake in the iosockets routine when using i-pi
      
      The sockets require a fixed string length.
    ------------------------------------------------------------
    revno: 483.3.91
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Fri 2018-05-25 08:43:46 +0200
    message:
      Fixed writing out too many wavefunctions
      
      In writewave users could specify wavefunction indices beyond
      the number of eigenstates. This has now been fixed.
      Any input from the user will be truncated to the maximum number
      of eigenstates.
------------------------------------------------------------
revno: 924 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2018-06-08 11:26:15 +0200
message:
  Merged overfsm-S-remove branch
  
  This removes the calculation of S in overfsm. And also
  updates the code to f90 compliant code.
    ------------------------------------------------------------
    revno: 923.1.2
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-overfsm-S-remove
    timestamp: Fri 2018-06-08 11:23:57 +0200
    message:
      Fixed Albertos comments
    ------------------------------------------------------------
    revno: 923.1.1
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-overfsm-S-remove
    timestamp: Fri 2018-06-08 11:11:11 +0200
    message:
      Removed S calculation in overfsm
      
      Also changed the overfsm code to f90.
      Several arrays have been removed since they were
      not needed.
      
      I have checked against the 4.1 code in si111-spinpol without
      differences.
------------------------------------------------------------
revno: 923
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2018-06-07 22:08:23 +0200
message:
  Corrected logic flow of NumberOfEigenstates for negative values
------------------------------------------------------------
revno: 922
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2018-06-06 15:39:33 +0200
message:
  Fixed pivoting errors arising when the k-point sampling does not influence it
  
  Now transiesta prints out warnings but does not die for orientations that
  are allowed by the k-point sampling.
------------------------------------------------------------
revno: 921 [merge]
author: Yann Pouillon <yann.pouillon@unican.es>
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Wed 2018-05-30 11:06:35 +0200
message:
  YAML infrastructure for output testing
  
  (By Yann Pouillon)
  
  The implementation consists of:
  
  * A simple hook in siesta.F to call the siesta_write_yaml routine
  in module Src/m_io_yaml.F90.
  
  * A YAML reference directory: Tests/YAML_Refs/
    (currently populated by just three token examples)
  
  * A post-processing script: Tests/Scripts/yaml_compare.py
  
  * A configuration file  Tests/siesta-testsuite.yml
  
  See Docs/yaml_tests/README for more information.
  
  Notes
  
  - Only energies are processed in this initial implementation.
  - The post-processing script depends on ruamel.yaml (pip install [--local] ruamel.yaml)
  - SIESTA does not require LibYAML to emit YAML files
    ------------------------------------------------------------
    revno: 920.1.3
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-yaml
    timestamp: Wed 2018-05-30 10:58:52 +0200
    message:
      Remove Transiesta pre-processed items
    ------------------------------------------------------------
    revno: 920.1.2
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-yaml
    timestamp: Tue 2018-05-29 15:59:23 +0200
    message:
      Remove _build/html files in Docs/yaml_tests
    ------------------------------------------------------------
    revno: 920.1.1
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-yaml
    timestamp: Tue 2018-05-29 12:24:58 +0200
    message:
      YAML infrastructure for output testing
      
      (By Yann Pouillon)
      
      The implementation consists of:
      
      * A simple hook in siesta.F to call the siesta_write_yaml routine
      in module Src/m_io_yaml.F90.
      
      * A YAML reference directory: Tests/YAML_Refs/
        (currently populated by just three token examples)
      
      * A post-processing script: Tests/Scripts/yaml_compare.py
      
      * A configuration file  Tests/siesta-testsuite.yml
      
      See Docs/yaml_tests/README for more information.
      
      Notes
      
      - Only energies are processed in this initial implementation.
      - The post-processing script depends on ruamel.yaml (pip install [--local] ruamel.yaml)
      - SIESTA does not require LibYAML to emit YAML files
------------------------------------------------------------
revno: 920
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2018-05-25 13:13:25 +0200
message:
  Fixed transiesta-tbtrans tests
  
  Some tests did not force the TSHS creation for electrodes.
------------------------------------------------------------
revno: 919
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Sun 2018-05-20 00:20:46 +0200
message:
  Put an io_close call in the right block
  
  An out-of-block io_close in basis_io might inadvertently close unit 0.
------------------------------------------------------------
revno: 918
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Tue 2018-05-15 12:43:53 +0200
message:
  Consolidate treatment of KB and LDAU projectors in hsparse/atom_graph
  
  Avoid extra work when both KB and LDAU projectors are present, and
  clarify the code.
------------------------------------------------------------
revno: 917
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Tue 2018-05-15 11:48:18 +0200
message:
  Remove obsolete options related to auxiliary supercell
  
  The options 'FixAuxiliaryCell' and 'NaiveAuxiliaryCell' have
  been removed, as they are inconsistent with the more stringent tests
  on the adequacy of the auxiliary supercell.
------------------------------------------------------------
revno: 916 [merge]
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Tue 2018-05-15 10:57:29 +0200
message:
  Merged 4.0-576: diagnostics and clarifications on folding
    ------------------------------------------------------------
    revno: 483.3.90 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.0
    timestamp: Mon 2018-05-14 16:32:15 +0200
    message:
      Diagnostics and behavior clarifications related to H and S folding
      
      *  Minimal fix for DM initialization with severe folding
        
        When an orbital interacts with its own periodic replicas and a
        Gamma-point calculation is requested, the naive DM initialization with
        atomic information is faulty: the diagonal S entries are no longer 1.0
        (but are enhanced by the contributions from the replicas), so the
        normalization of the DM is lost (the code will print a message to the
        effect). The initial charge density will be distorted with respect to
        its intended form (the result of a blanket normalization). Note that
        the program might still go on to converge to the right ground state,
        since the code to deal with multiple orbital interactions in the
        Gamma-point case is mathematically correct.
        
        
        There are several levels of fixes for this:
        
        1. Use k-point sampling, as it can be argued that requesting a
        Gamma-point calculation for a very small cell is physically
        meaningless.
        
        2. Force the use of an auxiliary supercell ('force-aux-cell
        T'). Internally, the code will correctly place all the different
        interactions in an expanded auxiliary supercell. The drawback is that
        complex arithmetic and diagonalization must then be used (there is no
        yet support in the code to avoid this).
        
        3. Correct the initialization of the DM so that its norm is conserved
        and the initial charge density is more reasonable.
        
        In this patch we implement case 3. above by (always) dividing the
        recently-initialized diagonal DM entries by the corresponding S entry.
        Note that this is a zeroth-order correction, and the charge density
        produced by the initial DM will exhibit a deficit at the orbital
        position and 'ringing' enhancements at the superpositions of the
        orbital and its periodic images. The initial scf steps will thus show
        differences with a calculation done with 'force-aux-cell T', but
        eventually they will converge to the same ground state.
      
        Updated the manual with an explanation of diagonal-folding and its
        consequences.
      
      * Streamline hsparse. Kill the program if auxiliary supercell is inadequate
        
        The 'multiple-image' warnings in hsparse were not representative
        enough under MPI operation (only the root node got to report
        them). And it can be argued that they are superfluous except in a
        'debug' mode of operation.  The key severe diagnostic is the existence
        of 'folding' in a non-gamma calculation, which should lead to aborting
        the program and to further investigation of the internals of the code.
        In the gamma case, folding is reported and a further note is
        printed if the user is attempting to carry out a COOP/COHP analysis (which
        would be faulty in the presence of folding). 
        
        The non-documented 'debug-folding' feature is implemented very
        coarsely for now.
      
        There is also a check for diagonal folding. Harris-functional calculations
        are stopped if found.
      
        A number of tests used the combination of very small cells (leading
        to 'diagonal folding') and Harris functional. The latter option has been
        removed.
        
        Use 'message' interface for folding warnings.
      
        
        ------------------------------------------------------------
        revno: 483.23.5
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.0-images
        timestamp: Thu 2018-05-10 15:40:53 +0200
        message:
          Remove Harris option from tests. Update manual re:folding
          
          A number of tests used the lethal combination of very small cells
          (leading to 'diagonal folding') and Harris functional. The latter
          option has been removed.
          
          Update the manual with an explanation of diagonal-folding and its
          consequences.
        ------------------------------------------------------------
        revno: 483.23.4
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.0-images
        timestamp: Thu 2018-05-10 14:33:07 +0200
        message:
          Use 'message' interface for folding warnings
        ------------------------------------------------------------
        revno: 483.23.3
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.0-images
        timestamp: Mon 2018-05-07 07:45:09 +0200
        message:
          Check for diagonal folding. Stop Harris runs if found
        ------------------------------------------------------------
        revno: 483.23.2
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.0-images
        timestamp: Thu 2018-04-26 11:46:06 +0200
        message:
          Streamline hsparse. Kill the program if auxiliary supercell is inadequate
          
          The 'multiple-image' warnings in hsparse were not representative
          enough under MPI operation (only the root node got to report
          them). And it can be argued that they are superfluous except in a
          'debug' mode of operation.  The key severe diagnostic is the existence
          of 'folding' in a non-gamma calculation, which should lead to aborting
          the program and to further investigation of the internals of the code.
          In the gamma case, folding is reported and a further note is
          printed if the user is attempting to carry out a COOP/COHP analysis (which
          would be faulty in the presence of folding). 
          
          The non-documented 'debug-folding' feature is implemented very
          coarsely for now.
        ------------------------------------------------------------
        revno: 483.23.1
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.0-images
        timestamp: Thu 2018-04-26 11:22:27 +0200
        message:
          Minimal fix for DM initialization with severe folding
          
          When an orbital interacts with its own periodic replicas and a
          Gamma-point calculation is requested, the naive DM initialization with
          atomic information is faulty: the diagonal S entries are no longer 1.0
          (but are enhanced by the contributions from the replicas), so the
          normalization of the DM is lost (the code will print a message to the
          effect). The initial charge density will be distorted with respect to
          its intended form (the result of a blanket normalization). Note that
          the program might still go on to converge to the right ground state,
          since the code to deal with multiple orbital interactions in the
          Gamma-point case is mathematically correct.
          
          
          There are several levels of fixes for this:
          
          1. Use k-point sampling, as it can be argued that requesting a
          Gamma-point calculation for a very small cell is physically
          meaningless.
          
          2. Force the use of an auxiliary supercell ('force-aux-cell
          T'). Internally, the code will correctly place all the different
          interactions in an expanded auxiliary supercell. The drawback is that
          complex arithmetic and diagonalization must then be used (there is no
          yet support in the code to avoid this).
          
          3. Correct the initialization of the DM so that its norm is conserved
          and the initial charge density is more reasonable.
          
          In this patch we implement case 3. above by (always) dividing the
          recently-initialized diagonal DM entries by the corresponding S entry.
          Note that this is a zeroth-order correction, and the charge density
          produced by the initial DM will exhibit a deficit at the orbital
          position and 'ringing' enhancements at the superpositions of the
          orbital and its periodic images. The initial scf steps will thus show
          differences with a calculation done with 'force-aux-cell T', but
          eventually they will converge to the same ground state.
------------------------------------------------------------
revno: 915
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2018-05-14 12:02:49 +0200
message:
  Fixed worksize for the self-energy expansion for very small device regions
  
  There was a bug when having a too small device region. In those cases
  the calculated work-size was too small. It should be fixed now.
------------------------------------------------------------
revno: 914
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2018-05-14 08:46:52 +0200
message:
  Updated manual for the k-point sampling of electrodes
------------------------------------------------------------
revno: 913
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2018-05-09 14:05:31 +0200
message:
  Fixed phase factor in COHP calculation using Green function and dH
  
  The phases were wrong for the COHP curve for the Green function.
  This was due to r904 were the phase had been reversed.
  
  Also added comments on remaining phases to denote their intention.
------------------------------------------------------------
revno: 912 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-05-08 13:36:55 +0200
message:
  Merged r575, merged io-precision
    ------------------------------------------------------------
    revno: 483.3.89 [merge]
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Mon 2018-05-07 14:07:29 +0200
    message:
      Merged lp:~nickpapior/siesta/4.0-io-precision
      
      This extends the precision for the EIG, KP and PDOS output.
        ------------------------------------------------------------
        revno: 483.22.1
        committer: Nick Papior <nickpapior@gmail.com>
        branch nick: 4.0-io
        timestamp: Mon 2018-05-07 09:36:34 +0200
        message:
          Enabled large precision outputs in EIG, KP and PDOS files
          
          This should accommodate larger k-point sampling and make EIG
          files have a qualitatively better precision.
------------------------------------------------------------
revno: 911
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-05-08 11:37:22 +0200
message:
  Added units to transmission data and orbital transmission
------------------------------------------------------------
revno: 910
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-05-08 09:11:34 +0200
message:
  Fixed unit output of the TBT data files
------------------------------------------------------------
revno: 909
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2018-05-07 08:45:38 +0200
message:
  Cleaned information output of sparsity patterns
------------------------------------------------------------
revno: 908
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Sun 2018-05-06 21:31:54 +0200
message:
  Added units and normalization of DOS in ASCII output for tbtrans
------------------------------------------------------------
revno: 907
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Sun 2018-05-06 14:32:53 +0200
message:
  The density matrix output per energy in tbtrans is in 1/Ry
  
  The units of the non-integrated DM is of-course in 1/Ry.
  The unit is now fixed.
------------------------------------------------------------
revno: 906
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Sun 2018-05-06 14:20:15 +0200
message:
  Fixed a problem for tbtrans when it is writing out data-files
  
  The outputted data-files from tbtrans was sometimes prematurely
  truncated due to a missing barrier (for large number of kpt and/or E).
  
  Now a barrier has been inserted to ensure all IO is done before it
  completes.
------------------------------------------------------------
revno: 905
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Sun 2018-05-06 13:43:25 +0200
message:
  Enhanced output when the basal-plane of the electrode is not situated correctly
  
  This error is only applicable for skewed transport directions (i.e. non-orthogonal
  semi-infinite vectors).
------------------------------------------------------------
revno: 904 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2018-05-04 21:10:41 +0200
message:
  Merged 4.1-ts branch with bug-fixes for pivoting and DM calculation in tbtrans
    ------------------------------------------------------------
    revno: 903.1.10
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-ts
    timestamp: Fri 2018-05-04 21:00:07 +0200
    message:
      Tried to speed up the Gf - Gf^dagger extraction from the BTD.
      
      This seems to be slightly faster for moderate systems.
      
      Also added a die statement if one tries to specify device region atoms
      or buffer atoms higher than the actual number of atoms.
    ------------------------------------------------------------
    revno: 903.1.9
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-ts
    timestamp: Fri 2018-05-04 13:11:46 +0200
    message:
      Added device region eta value to the nc output files
    ------------------------------------------------------------
    revno: 903.1.8
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-ts
    timestamp: Fri 2018-05-04 12:51:06 +0200
    message:
      Enabled reading a user-defined energy contour for ts and tbt
      
      This enables users to define energy points etc for custom
      weights etc.
      
      This is currently untested for transiesta (very hard to use)
      but has been tested for tbtrans. One can now also specify
      different imaginary parts per energy point. Thus
      one can run the same energy point several times with different
      imaginary parts.
      This opens up many new features.
    ------------------------------------------------------------
    revno: 903.1.7
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-ts
    timestamp: Thu 2018-05-03 23:46:20 +0200
    message:
      Instead of allocating/deallocating phases on every entry, we now allocate once
      
      When using the DM/COOP/COHP/bond-current calculations we have to use the k-phases.
      
      Instead of allocating a small array inside all these routines we allocate once, and
      reuse the same array everytime. This should improve a little bit.
    ------------------------------------------------------------
    revno: 903.1.6
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-ts
    timestamp: Thu 2018-05-03 16:51:50 +0200
    message:
      Fixed Gf_DM calculation, also speeded up all Gf_DOS calculations
      
      The GF_DM was not using the proper off-diagonal Green function.
      
      All calculations of Gf_ij - Gf^dagger_ji has been speeded up
      by moving stuff into the if-statements.
    ------------------------------------------------------------
    revno: 903.1.5
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-ts
    timestamp: Thu 2018-05-03 13:13:42 +0200
    message:
      Removed not-used routines in tbt_tri_scat
    ------------------------------------------------------------
    revno: 903.1.4
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-ts
    timestamp: Thu 2018-05-03 12:58:41 +0200
    message:
      Updated SpPivot to contain the latest pivoting schemes
    ------------------------------------------------------------
    revno: 903.1.3
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-ts
    timestamp: Wed 2018-05-02 22:52:39 +0200
    message:
      Enabled density matrix calculations in tbtrans
      
      Also updated manual to reflect the new quantities that may be calculated.
      
      COOP, COHP and DM.
      
      With this addition one can easily calculate the energy resolved LDOS
      using either the Green function DM or the spectral function DM.
      Together with sisl this enables a very nice addition to the NEGF calculations.
    ------------------------------------------------------------
    revno: 903.1.2
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-ts
    timestamp: Wed 2018-05-02 21:07:56 +0200
    message:
      Bug fixed when dH terms are farther reaching than the original sparse pattern
      
      When the delta Hamiltonian is added it has to be added to the device
      sparse pattern (to ensure all the connections are used).
    ------------------------------------------------------------
    revno: 903.1.1
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-ts
    timestamp: Wed 2018-05-02 20:19:24 +0200
    message:
      Fixed disconnected graph creation (in CG)
      
      This commit fixes and amends some pivoting methods.
      
      1) Fixes CG graph when the graph is disconnected
      
      2) Added 2 more METIS pivoting methods. Also added them to the
         analysis in transiesta (they are really bad, but I have them
         because they may be nice to check against)
      
      3) Performance and memory optimizaton of bandwidth/profile calculation
------------------------------------------------------------
revno: 903
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Fri 2018-04-27 11:35:52 +0200
message:
  Update import of qs,efs in pexsi_local_dos code
------------------------------------------------------------
revno: 902 [merge]
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Thu 2018-04-26 15:11:28 +0200
message:
  Merged 4.0 r574: catch charge inconsistencies in basis states
    ------------------------------------------------------------
    revno: 483.3.88
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.0
    timestamp: Thu 2018-04-26 15:04:08 +0200
    message:
      Catch charge mismatchs in occupied states
      
      If the basis sets includes an orbital for a low-lying shell which was
      not included in the pseudopotential generation, it could happen that
      it is considered occupied, thus leading to a charge inconsistency.
      
      A check has bee introduced in the code to detect charge
      inconsistencies. 
------------------------------------------------------------
revno: 901 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2018-04-25 13:33:32 +0200
message:
  Merged r571-573, merged new tests and adding all directories to tests
  
  Also fixes for gnubands.f90
    ------------------------------------------------------------
    revno: 483.3.87
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Wed 2018-04-25 13:14:24 +0200
    message:
      Forgot to update Tests/Makefile with h2o NC calculation
    ------------------------------------------------------------
    revno: 483.3.86
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Wed 2018-04-25 10:04:38 +0200
    message:
      Fixed bands output for NC calculations
      
      For NC calculations the spin-components are mixed and thus
      there are no separate eigenvalus. This fixes the output.
      
      gnubands had a bug when explicitly specifying a non-existing
      spin-index.
      
      Added a bands test for NC.
    ------------------------------------------------------------
    revno: 483.3.85
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Wed 2018-04-25 09:34:20 +0200
    message:
      Fixed tests
      
      Now ag, batio and force_2 graphite_c6, graphite_vdw_df and pd_ice
      has been fixed. They run without problems and does converge.
      
      Fixed the Makefile to add missing tests.
      
      Fixed gnubands code. The emin/emax reads from the .bands file.
      The problem is that the emin/emax in the .bands file has a much
      higher precision than the eigenvalues in the file. Thus one
      could find values not in the correct range due to rounding
      errors. This has been fixed by setting emin/emax to -1e30, 1e30.
------------------------------------------------------------
revno: 900 [merge]
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Wed 2018-04-25 00:12:50 +0200
message:
  Merged 4.0 r568-570: missing CML dictRefs, Harris 'convergence'
  
  (Note that Src/wxml/flib_wcml has not been changed in this series)
    ------------------------------------------------------------
    revno: 483.3.84
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.0
    timestamp: Tue 2018-04-24 23:50:40 +0200
    message:
      Add missing 'dictRef' attributes to some CML properties
      
      The missing attributes caused problems with the AiiDA parser.
      As a matter of policy, all Siesta CML properties are required
      to have a 'dictRef' attribute.
      This is now enforced by the compiler after making the relevant
      argument non-optional in our custom version of FoX.
    ------------------------------------------------------------
    revno: 483.3.83
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.0
    timestamp: Tue 2018-04-24 23:14:17 +0200
    message:
      Mark Harris-functional calculations as 'converged'
      
      A Harris-functional calculation should be considered 'converged'
      after a single iteration. Doing this explicitly avoids triggering
      the standard warnings.
    ------------------------------------------------------------
    revno: 483.3.82
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.0
    timestamp: Tue 2018-04-24 23:02:34 +0200
    message:
      Update gnubands in Util/Bands
      
      Rename new.gnubands.f90 to gnubands.f90 and update.
      Rename the gnubands.f to old.gnubands.f
------------------------------------------------------------
revno: 899
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Tue 2018-04-24 11:14:21 +0200
message:
  Remove obsolete print_initial_spin
------------------------------------------------------------
revno: 898 [merge]
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Tue 2018-04-24 11:03:41 +0200
message:
  Merge r567; spin-in-scf docs; expand NOT_CONV fields
    ------------------------------------------------------------
    revno: 483.3.81
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.0
    timestamp: Tue 2018-04-24 10:40:31 +0200
    message:
      Enlarge number fields in *_NOT_CONV messages. Document spin-in-scf
------------------------------------------------------------
revno: 897 [merge]
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Sun 2018-04-22 15:31:11 +0200
message:
  Fix bug and clarify code in dfscf for SOC case
  
  In dfscf there was overcounting of the off-diagonal elements in the SOC case
  (first doubling of 3:4 and then copying of 3:4 into 7:8 components).
  
  Besides, the code was confusing, since the grid potential has only four
  bona-fide components, but was artificially extended to match the 8-component
  DM in the SOC case. A clarification (and simplification) can be achieved if
  the DM is explicitly "spin-box hermitified" in the same way as it is done
  in the computation of the charge density.
    ------------------------------------------------------------
    revno: 896.1.1
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-dfscf
    timestamp: Sun 2018-04-22 02:13:43 +0200
    message:
      Fix bug and clarify code in dfscf for SOC case
      
      In dfscf there was overcounting of the off-diagonal elements in the SOC case
      (first doubling of 3:4 and then copying of 3:4 into 7:8 components).
      
      Besides, the code was confusing, since the grid potential has only four
      bona-fide components, but was artificially extended to match the 8-component
      DM in the SOC case. A clarification (and simplification) can be achieved if
      the DM is explicitly "spin-box hermitified" in the same way as it is done
      in the computation of the charge density.
------------------------------------------------------------
revno: 896
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Thu 2018-04-19 10:46:09 +0200
message:
  Control of orbital magnetic moment output in 'state_analysis'
  
  Extend the spirit of a previous patch to 'state_analysis', to
  control the output of orbital moment information at the end
  of the scf cycle.
------------------------------------------------------------
revno: 895
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Wed 2018-04-18 12:18:19 +0200
message:
  Use all H components in pdos3g/3k
  
  The '2' and '6' (imaginary) components of H were not used to build
  the dense Hamiltonian prior to diagonalization in pdos3g/pdos3k.
------------------------------------------------------------
revno: 894 [merge]
author: Nick Papior <nickpapior@gmail.com>
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Wed 2018-04-18 11:57:19 +0200
message:
  Clarified sign of S phase factors in pdos routines
  
  Now comments explain why the pdos*k routines used a different sign in
  the S(k) generation when performing the matrix multiplications.
  
  This commit introduces nothing but clarified code and a slight
  performance increase due to removal of a small array and lots of
  copying.
    ------------------------------------------------------------
    revno: 892.1.3
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-phases
    timestamp: Wed 2018-04-18 10:40:41 +0200
    message:
      Amended pdoskp for the details outlined in the previous two commits
      
      Now the phases are well explained in all pdos routines.
    ------------------------------------------------------------
    revno: 892.1.2
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-phases
    timestamp: Tue 2018-04-17 22:29:13 +0200
    message:
      Removed unnecessary calculations in PDOS
    ------------------------------------------------------------
    revno: 892.1.1
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-phases
    timestamp: Tue 2018-04-17 22:18:03 +0200
    message:
      Clarified phase usages in PDOS routines
      
      I have gone through the phases used in the pdos*k routines.
      There were a few unclear things that only made sense once
      a deeper understanding was taken.
      
      For instance all H(k) are setup with:
      
        H(i,j) = H(i,j) + e^{-i k.R} * H(ind)
      
      but when performing the matrix-multiplication for the
      PDOS calculation <psi_j | S(k) | psi_j> one finds that
      S(-k) is setup. This is due to the data-layout in
      parallel that requires S to be distributed over rows, and
      thus a simpler way to do the matrix multiplication is by
      doing element-wise multiplications using S(-k).
      
      In this commit I 1) added comments in pdosk/pdos2k/pdos3k to
      clarify this intent.
      
      In pdosk I also changed a few signs to introduce the S(-k)
      in the correct place. Before the minus sign was just introduced
      at a point that was not so trivially found.
      
      All-in-all. This commit does not change *any* results! I have
      runned si_pdos_kgrid with non-polarized, polarized and non-colinear.
      (not SO) And all results where the same.
      
      I have also reduced some complexity by using pointers instead of
      data-copying. This was actually very simple and cleaned up the
      readability quite a bit.
------------------------------------------------------------
revno: 893
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Tue 2018-04-17 15:06:00 +0200
message:
  Further control over the output of orbital magnetic moments
  
  For spin-orbit calculations, the orbital magnetic moments are only
  printed if the flag WriteOrbMom is set to .true.. Routine 'moments'
  has been slimmed down to remove the spin part, already done in
  'mulliken', and the moments themselves and not the angular momenta are
  printed.
  
  If MullikenInScf is .true., the information is printed at each scf step.
------------------------------------------------------------
revno: 892 [merge]
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Tue 2018-04-17 12:19:49 +0200
message:
  Merge r566 (mulliken population fix in noncoll case)
    ------------------------------------------------------------
    revno: 483.3.80
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.0
    timestamp: Tue 2018-04-17 12:16:15 +0200
    message:
      Fix the computation of mulliken populations for non-collinear spin
      
      The populations were split in two contributions but one of them was not
      properly added in all cases.
------------------------------------------------------------
revno: 891 [merge]
author: Nick Papior <nickpapior@gmail.com>
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Sun 2018-04-15 01:17:10 +0200
message:
  Merge r565 from 4.0 (i-PI 'EXIT' handling)
    ------------------------------------------------------------
    revno: 483.3.79 [merge]
    author: Nick Papior <nickpapior@gmail.com>
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.0
    timestamp: Sun 2018-04-15 00:37:19 +0200
    message:
      Fix the Siesta response to an i-PI 'EXIT' message
      
      Siesta will now properly exit (by calling 'bye') when
      receiving an 'EXIT' message from i-PI.
        ------------------------------------------------------------
        revno: 483.21.1
        committer: Nick Papior <nickpapior@gmail.com>
        branch nick: 4.0-ipi
        timestamp: Fri 2018-04-13 12:45:09 +0200
        message:
          Fixed i-PI exit status
          
          Now siesta will call bye when i-PI sends an EXIT status
------------------------------------------------------------
revno: 890 [merge]
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Sun 2018-04-15 01:14:53 +0200
message:
  Merge r563-564 from 4.0 (patchlogs and some docs)
    ------------------------------------------------------------
    revno: 483.3.78 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.0
    timestamp: Sat 2018-04-14 15:26:19 +0200
    message:
      Remove time-reversal-symmetrization for non-collinear spin calculations
      
      While in principle TR symmetry (TRS) should be preserved in
      non-collinear-spin calculations, care should be taken that some subtle
      detail of the implementation does not break it.  The appearance of
      spin-orbit-capable versions (>4.1) has tilted the balance towards
      removing the TRS symmetrization (which is not possible with spin-orbit
      coupling), forgoing the savings in the number of k-points in exchange
      for uniformity of the analysis tools.
      
      ( + Use of the same convention for phase factors and the same
      conjugation pattern in the building of the DM for the non-collinear
      case as in the spin-orbit versions.)
        ------------------------------------------------------------
        revno: 483.20.8
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.0-trs
        timestamp: Fri 2018-04-13 15:44:15 +0200
        message:
          Explain more TRS changes in manual and mention in compatibility.tex
        ------------------------------------------------------------
        revno: 483.20.7
        committer: Nick Papior <nickpapior@gmail.com>
        branch nick: 4.0-trs
        timestamp: Thu 2018-04-12 13:53:55 +0200
        message:
          Patched diag2[gk] to conform to sign-conventions in 4.1
          
          This also lead to the discovery of a sign error in the phases.
          So now everything in 4.0 is the same as 4.1 (for non-collinear).
          
          I have checked fe_clust_noncollinear and FeO.
          Both yield, exactly the same output before and after this commit.
        ------------------------------------------------------------
        revno: 483.20.6
        committer: Nick Papior <nickpapior@gmail.com>
        branch nick: 4.0-trs
        timestamp: Thu 2018-04-12 11:44:50 +0200
        message:
          Fixed documentation for TRS
        ------------------------------------------------------------
        revno: 483.20.5 [merge]
        committer: Nick Papior <nickpapior@gmail.com>
        branch nick: 4.0-trs
        timestamp: Thu 2018-04-12 08:50:28 +0200
        message:
          Merged 4.0 into trs
        ------------------------------------------------------------
        revno: 483.20.4
        committer: Nick Papior <nickpapior@gmail.com>
        branch nick: 4.0-trs
        timestamp: Wed 2018-04-11 14:26:52 +0200
        message:
          Stream-lined NC mulliken output with 4.1
        ------------------------------------------------------------
        revno: 483.20.3 [merge]
        committer: Nick Papior <nickpapior@gmail.com>
        branch nick: 4.0-trs
        timestamp: Wed 2018-04-11 13:00:02 +0200
        message:
          Merged 4.0
        ------------------------------------------------------------
        revno: 483.20.2
        committer: Nick Papior <nickpapior@gmail.com>
        branch nick: 4.0-trs
        timestamp: Wed 2018-01-31 13:57:33 +0100
        message:
          Further cleaned interface to clear out an inconsistency in the code
        ------------------------------------------------------------
        revno: 483.20.1
        committer: Nick Papior <nickpapior@gmail.com>
        branch nick: 4.0-trs
        timestamp: Wed 2018-01-31 13:27:45 +0100
        message:
          Removed forced TRS for non-colinear spin
          
          Since 4.1 implements no time-reversal symmetry we deemed it
          necessary to remove TRS. This is also based on comments on the AbINIT code.
          
          The generation of the DM does not use the TRS requirement of the wavefunctions.
          I.e. there are no complex-conjugation averages (diag2k).
          
          Also the k-point generation now defaults to *not* use TRS. for non-colinear spin.
          
          Also there were some low-hanging fruits for memory optimizations regarding the
          diag2k routine. I have cut the memory requirement almost in halve.
    ------------------------------------------------------------
    revno: 483.3.77
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.0
    timestamp: Thu 2018-04-12 01:32:54 +0200
    message:
      Fix mulliken populations for non-collinear spin in parallel
      
      For non-collinear spins, the mulliken routine was not parallelized
      correctly.
------------------------------------------------------------
revno: 889 [merge]
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Wed 2018-04-11 14:04:08 +0200
message:
  Merged r562: spin monitoring + util for sign flip in pre-4.0.2 nc DMs
  
  Note cosmetic change: when requested, the mulliken populations during
  the scf cycle are printed *after* the summary line that gives the energies
  and diffs in the step.
    ------------------------------------------------------------
    revno: 483.3.76 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.0
    timestamp: Wed 2018-04-11 11:52:01 +0200
    message:
      Spin monitoring in scf cycle. Clarification of sign convention for DM
        
        *  Spin monitoring during scf cycle
        
        If the fdf variable 'Spin.In.Scf' is set to 'true', the size and
        components of the (total) spin polarization will be printed at every
        scf step.  This is analogous to the 'Mulliken.In.Scf' feature.
        
        The default for the Spin.In.SCF fdf flag is 'true' for calculations
        involving spin.
      
        A single line of spin information is printed, prefixed by '  spin-moment:'.
      
        Note that now, for each scf step, the spin and/or mulliken analyses are
        printed *after* the line showing the energies.
      
        The initial spin polarization for every geometry iteration is also
        printed in 'state_init', replacing the similar calls in 'new_dm'.
      
        * Use explicitly the same DM_12 sign-convention as in SOC versions
        
        In the non-collinear case, the code is actually using internally the
        same sign convention for the "up-down" components of H and the DM as
        the spin-orbit-capable (SOC) versions (>= 4.1): The building of the
        dense Hamiltonian has the same form and the off-diagonal components
        of Vxc are identical. Routines diag2g and diag2k are actually using
        the same convention, but with DM* as an intermediate step.
        
        By changing the interface to the outside world, namely the
        correspondence between spin angles and the DM in new_dm, and the
        calculation of the spin (actually moment) components in spnvec, the
        code can now interoperate (i.e., reuse DMs) with the SOC versions.
      
        In order to reuse DM information produced by previous versions of
        the program in the non-collinear case, the sign of D(4) of the old
        DM has to be changed. This can be achieved with the
        dm_noncol_sign_flip4 program in Util/DensityMatrix.
        
        
        ------------------------------------------------------------
        revno: 483.19.7
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.0-spin
        timestamp: Wed 2018-04-11 11:31:01 +0200
        message:
          Add program to flip the sign of DM(4) for non-coll calculations
        ------------------------------------------------------------
        revno: 483.19.6 [merge]
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.0-spin
        timestamp: Wed 2018-04-11 11:23:27 +0200
        message:
          Sync to 4.0 r561
        ------------------------------------------------------------
        revno: 483.19.5
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.0-spin
        timestamp: Mon 2018-04-09 12:25:11 +0200
        message:
          Make spin monitoring the default for spin-polarized calculations
          
          The default for the Spin.In.SCF fdf flag is now (nspin>1), thus
          enabling monitoring for spin-polarized calculations by default.
          
          ( + cosmetic changes in spin moment printing, and the spnvec routine)
        ------------------------------------------------------------
        revno: 483.19.4
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.0-spin
        timestamp: Fri 2018-04-06 14:32:04 +0200
        message:
          Use explicitly the same D12 sign-convention as in SOC versions
          
          In the non-collinear case, the code is actually using internally the
          same sign convention for the "up-down" components of H and the DM as
          the spin-orbit (SOC) versions: The building of the dense Hamiltonian
          has the same form and the off-diagonal components of Vxc are
          identical. Routines diag2g and diag2k are actually computing the right
          DM, but with DM* as an intermediate step.
          
          By changing the interface to the outside world, namely the
          correspondence between spin angles and the DM in new_dm, and the
          calculation of the spin (actually moment) components in spnvec, the
          code can now interoperate (i.e., reuse DMs) with the SOC versions.
        ------------------------------------------------------------
        revno: 483.19.3
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.0-spin
        timestamp: Fri 2018-04-06 12:53:30 +0200
        message:
          Refinements to spin and mulliken monitoring during scf cycle
          
          For each scf step, the spin and mulliken analyses are printed *after* the
          line showing the energies.
          
          A single line of spin information is printed, prefixed by '  spin:'.
        ------------------------------------------------------------
        revno: 483.19.2
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.0-spin
        timestamp: Fri 2018-04-06 12:11:40 +0200
        message:
          Spin monitoring during scf cycle
          
          If the fdf variable 'Spin.In.Scf' is set to 'true', the size and
          components of the (total) spin polarization will be printed at every scf step.
          This is analogous to the 'Mulliken.In.Scf' feature.
          
          The initial spin polarization for every geometry iteration is also
          printed in 'state_init', replacing the similar calls in 'new_dm'.
        ------------------------------------------------------------
        revno: 483.19.1
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.0-spin
        timestamp: Mon 2018-03-05 16:39:12 +0100
        message:
          Fix print_spin. Calls in compute_dm (wrapped) and new_dm
------------------------------------------------------------
revno: 888 [merge]
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Mon 2018-04-09 23:33:05 +0200
message:
  Merged r558-561: JSON timing; NRTAB compatibility switch; no's in CML
    ------------------------------------------------------------
    revno: 483.3.75 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.0
    timestamp: Mon 2018-04-09 16:08:42 +0200
    message:
      Make generation of timer report more robust. More information in CML
      
        * Generate timer report in non-convergence and out-of-time conditions
        
        For proper accounting, the timer information should be generated even
        if the program stops due to non-convergence (scf, geometry) or
        out-of-time conditions.
        
        This is achieved by inserting appropriate calls to 'timer' before the
        call to 'die'.  To avoid a race condition in which a non-root node
        might get to the 'die' call before the IO node has had time to
        properly write the CML, timing, and even output information, a call to
        'barrier' has been inserted before the 'die' call.
        
        It might be argued that this kind of bookeeping should be left to the
        'die' call itself. But it is only possible if all nodes call 'die'.
      
        * Add no_u and nnz info to CML file to ease the extracting of
          benchmarking information.
        ------------------------------------------------------------
        revno: 483.16.6
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.0-json-time
        timestamp: Tue 2018-02-27 10:21:39 +0100
        message:
          Generate timer report in non-convergence and out-of-time conditions
          
          For proper accounting, the timer information should be generated even
          if the program stops due to non-convergence (scf, geometry) or
          out-of-time conditions.
          
          This is achived by inserting appropriate calls to 'timer' before the
          call to 'die'.  To avoid a race condition in which a non-root node
          might get to the 'die' call before the IO node has had time to
          properly write the CML, timing, and even output information, a call to
          'barrier' has been inserted before the 'die' call.
          
          It might be argued that this kind of bookeeping should be left to the
          'die' call itself. But we should make sure that all nodes call 'die'.
        ------------------------------------------------------------
        revno: 483.16.5
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.0-json-time
        timestamp: Mon 2018-02-26 16:23:37 +0100
        message:
          Add no_u and nnz info to CML file
    ------------------------------------------------------------
    revno: 483.3.74 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.0
    timestamp: Mon 2018-04-09 15:52:05 +0200
    message:
      Enable compatibility switch for NRTAB value
      
      Internally the two-center integrals involved in some matrix element
      calculations are tabulated with a preset number of elements (NRTAB). In
      versions 4.0.1 and prior this was 128. Since 4.0.2 the number of table
      elements has been increased to 1024, which translates to more accurate
      matrix element calculations.
      
      If preservation of the (lower accuracy) numerical results of 4.0.1 or
      prior versions is required for reproducibility purposes, the user can
      include
      
            Compat.Matel.NRTAB  T
      
      in the fdf file.
        ------------------------------------------------------------
        revno: 483.18.3
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.0-nrtab
        timestamp: Mon 2018-04-09 15:45:49 +0200
        message:
          Modify wording in compatibility.tex and siesta.tex
        ------------------------------------------------------------
        revno: 483.18.2
        committer: Nick Papior <nickpapior@gmail.com>
        branch nick: 4.0-nrtab
        timestamp: Thu 2018-04-05 09:11:04 +0200
        message:
          Implemented NRTAB compatibility as an option
          
          This enables users to change NRTAB with fdf files
          rather than recompiling siesta.
        ------------------------------------------------------------
        revno: 483.18.1
        committer: Nick Papior <nickpapior@gmail.com>
        branch nick: 4.0-nrtab
        timestamp: Tue 2018-04-03 15:42:16 +0200
        message:
          Enabled old NRTAB behaviour via pre-processing flags.
          
          By specifying SIESTA__LEGACY_NRTAB one recaptures the old
          NRTAB behaviour which may be used to compare against older
          siesta versions.
          
          The compatibility.tex document has been updated to reflect this.
    ------------------------------------------------------------
    revno: 483.3.73
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Thu 2018-02-22 11:50:23 +0100
    message:
      Removed unnecessary call in overlap.f to volume
    ------------------------------------------------------------
    revno: 483.3.72 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.0
    timestamp: Tue 2018-02-20 22:01:24 +0100
    message:
      Write JSON file for tree-timer information
      
      A more flexible output for timing information.
      The 'time.json' file is produced if the option
      
        use-tree-timer  T
      
      is in effect.
        ------------------------------------------------------------
        revno: 483.16.4 [merge]
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.0-json-time
        timestamp: Mon 2018-02-19 14:30:33 +0100
        message:
          Use only the presence of json unit as signal to dump JSON
          
          (Thanks to Nick Papior)
          
          We keep the get_unit_number internal routine for now, to avoid
          an extra dependency on m_io.
            ------------------------------------------------------------
            revno: 483.17.1
            committer: Nick Papior <nickpapior@gmail.com>
            branch nick: 4.0-json-time
            timestamp: Mon 2018-02-19 09:18:02 +0100
            message:
              Small update on the JSON timing
              
              Cleaned interface, and re-used m_io code for unit retrieval
        ------------------------------------------------------------
        revno: 483.16.3
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.0-json-time
        timestamp: Thu 2018-02-15 16:45:23 +0100
        message:
          Mention the JSON timing report in the documentation
        ------------------------------------------------------------
        revno: 483.16.2
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.0-json-time
        timestamp: Tue 2018-02-13 23:56:08 +0100
        message:
          Add section for siesta_analysis
        ------------------------------------------------------------
        revno: 483.16.1
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.0-json-time
        timestamp: Mon 2018-02-12 16:41:16 +0100
        message:
          Write JSON file for tree-timer information
          
          A more flexible output for timing information.
          The 'time.json' file is produced if the option
          
            use-tree-timer  T
          
          is in effect.
------------------------------------------------------------
revno: 887
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2018-04-09 14:39:44 +0200
message:
  Bug-fix on double allocation of variable in sparsity_handling
  
  Also added file-size estimation to TBT.nc/TBT.SE.nc files.
------------------------------------------------------------
revno: 886
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Sun 2018-04-08 16:01:33 +0200
message:
  Fixed print-out in TBtrans for only the IO-node
------------------------------------------------------------
revno: 885 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Sat 2018-04-07 21:19:29 +0200
message:
  Added tiling to the electrodes, and speeded up pivoting (heavily)
  
  Performance improvements on pivoting schemes and initialization
  in tbtrans.
  
  The tiling mechanism has been implemented. It is much faster
  than repetition due to simpler loops.
    ------------------------------------------------------------
    revno: 882.1.5
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-se-tile
    timestamp: Sat 2018-04-07 21:13:42 +0200
    message:
      Small performance improvement on the pivoting methods
    ------------------------------------------------------------
    revno: 882.1.4
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-se-tile
    timestamp: Sat 2018-04-07 20:57:43 +0200
    message:
      Major speedup in small device regions in very large systems
      
      Also improved performance in many initialization routines.
    ------------------------------------------------------------
    revno: 882.1.3
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-se-tile
    timestamp: Fri 2018-04-06 22:09:49 +0200
    message:
      Fixed OpenMP compilation and checked tbtrans
      
      Checked:
       - x5_y5_z1
       - x1_y5_z5
       - x5_y1_z5
      
      in both Bloch and TBTGF files. (see commit before
      this for script that creates input for the above).
      
      Also reduced DYNAMIC default chunk to 16.
    ------------------------------------------------------------
    revno: 882.1.2
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-se-tile
    timestamp: Fri 2018-04-06 21:25:57 +0200
    message:
      Enabled electrodes to be repeated with tiling or repeating
      
      As it turns out the tiling expansion is MUCH faster than
      repeating.
      
      I have runned this small snippet which sets up a square lattice with
      different Bloch repetitions, both tiling and repeating and a mix thereof.
      
      I have also checked Bulk vs non-bulk and with outputting files (as seen
      below).
      For these small systems below the tiling is more than twice as fast!
      The manual is also updated to reflect this.
      
      
      #!/usr/bin/env python3
      """
      Small snippet to create different Bloch expansions and their variants.
      
      The first thing is to create a cubic lattice which is the basis of the repetitions.
      """
      
      import os, sys
      import numpy as np
      import sisl as s
      
      def mkdir(d):
          try:
              os.mkdir(d)
          except:
              pass
          finally:
              print('# Changing to dir: {}'.format(d))
              os.chdir(d)
      
      R = [0.1, 1.1]
      hop = [-3, 0.75]
      
      # We need it a rather big size to be able to have a difference between tiling and repeating
      elec = s.geom.sc(1., s.Atom(1, R=1.01)) * 2
      H_elec = s.Hamiltonian(elec)
      H_elec.construct([R, hop])
      H_elec.write('ELEC.nc')
      
      fdf = """
      SystemLabel {0}{1}
      TBT.HS {0}{1}.nc
      
      TBT.Symmetry.TimeReversal false
      TBT.k [3 3 3]
      
      %block TBT.Elec.Left
        HS ../ELEC.nc
        semi-inf -A{2}
        Bloch {3} {4} {5}
        elec-pos start 1
        bulk false
      %endblock
      
      %block TBT.Elec.Right
        HS ../ELEC.nc
        semi-inf +A{2}
        Bloch {3} {4} {5}
        elec-pos end -1
        bulk true
      %endblock
      
      TBT.DOS.GF
      TBT.DOS.A
      TBT.DOS.A.All
      
      %block TBT.Contour.line
         from -2. eV to 2. eV
          points 50
            method mid-rule
      %endblock TBT.Contour.line
      
      {6}
      """
      
      fdf_full = """
      SystemLabel {0}{1}
      TBT.HS {0}{1}.nc
      
      TBT.Symmetry.TimeReversal false
      TBT.k [3 3 3]
      
      %block TBT.Elec.Left
        HS ELEC_{0}.nc
        semi-inf -A{2}
        elec-pos start 1
        bulk true
      %endblock
      
      %block TBT.Elec.Right
        HS ELEC_{1}.nc
        semi-inf +A{2}
        elec-pos end -1
        bulk false
      %endblock
      
      TBT.DOS.GF
      TBT.DOS.A
      TBT.DOS.A.All
      
      %block TBT.Contour.line
         from -2. eV to 2. eV
          points 50
            method mid-rule
      %endblock TBT.Contour.line
      
      {3}
      """
      
      sh = open('run.sh', 'w')
      
      sh.write("""#!/bin/bash
      export tbtrans="mpirun -np 2 /home/nicpa/siesta/4.1-se-tile/Util/TS/TBtrans/tbtrans"
      export orig="mpirun -np 2 /home/nicpa/siesta/4.1/Util/TS/TBtrans/tbtrans"
      
      """)
      
      all_rt = ['rr', 'tt', 'rt', 'tr']
      
      ranges = [1, 5]
      #ranges = [1, 10]
      
      for nx in ranges:
          for ny in ranges:
              for nz in ranges:
                  if nx == 1:
                      d = 0
                  elif ny == 1:
                      d = 1
                  elif nz == 1:
                      d = 2
                  else:
                      continue
                  if nx + ny + nz == 3:
                      continue
      
                  D = 'x{}_y{}_z{}'.format(nx, ny, nz)
                  mkdir(D)
                  sh.write('\npushd {}\n'.format(D))
                  if nx + ny + nz == 3:
                      t = 5
                  else:
                      t = 3
      
                  # Now we can create the system
                  e_r = H_elec.repeat(nz, 2).repeat(ny, 1).repeat(nx, 0)
                  e_t = H_elec.tile(nx, 0).tile(ny, 1).tile(nz, 2)
      
                  # *FULL* electrodes
                  e_r.write('ELEC_r.nc')
                  e_t.write('ELEC_t.nc')
      
                  # Devices
                  e_r.tile(t, d).write('rr.nc')
                  e_t.tile(t, d).write('tt.nc')
      
                  rt = e_r.geom.append(elec * (nx, ny, nz), d).append(e_t.geom, d)
                  tr = e_t.geom.append(elec * (nx, ny, nz), d).append(e_r.geom, d)
                  rt = s.Hamiltonian(rt)
                  rt.construct([R, hop])
                  rt.write('rt.nc')
      
                  tr = s.Hamiltonian(tr)
                  tr.construct([R, hop])
                  tr.write('tr.nc')
      
                  sh.write('$orig -D orig_Bloch_{0} Bloch_{0}.fdf > orig_Bloch_{0}.out\n'.format('rr'))
                  sh.write('$orig -D orig_Full_{0} Full_{0}.fdf > orig_Full_{0}.out\n'.format('rr'))
                  for r in all_rt:
                      open('Bloch_{}.fdf'.format(r), 'w').write(fdf.format(r[0], r[1], d+1, nx, ny, nz, ''))
                      open('Full_{}.fdf'.format(r), 'w').write(fdf_full.format(r[0], r[1], d+1, ''))
                      sh.write('$tbtrans -D Bloch_{0} Bloch_{0}.fdf > Bloch_{0}.out\n'.format(r))
                      sh.write('$tbtrans -D Full_{0} Full_{0}.fdf > Full_{0}.out\n'.format(r))
                      
                      open('out_Bloch_{}.fdf'.format(r), 'w').write(fdf.format(r[0], r[1], d+1, nx, ny, nz, 'TBT.Elecs.Out-of-Core true'))
                      open('out_Full_{}.fdf'.format(r), 'w').write(fdf_full.format(r[0], r[1], d+1, 'TBT.Elecs.Out-of-Core true'))
                      sh.write('$tbtrans -D out_Bloch_{0} out_Bloch_{0}.fdf > out_Bloch_{0}.out\nrm *.TBTGF*\n'.format(r))
                      sh.write('$tbtrans -D out_Full_{0} out_Full_{0}.fdf > out_Full_{0}.out\nrm *.TBTGF*\n'.format(r))
                  sh.write('popd\n')
      
                  os.chdir('..')
    ------------------------------------------------------------
    revno: 882.1.1
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-se-tile
    timestamp: Fri 2018-04-06 19:22:45 +0200
    message:
      Fixed pvtsp to enable Metis pivoting scheme
------------------------------------------------------------
revno: 884
fixes bug: https://launchpad.net/bugs/1751723
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2018-04-05 08:30:49 +0200
message:
  Fixed lp:1751723, LDAU variables not initialized on ion* reads
  
  The LDAU projector variables that denote how many there are
  were not initialized. Now they are explicitly set.
  
  Also ensured that the pseudo-potential type is properly initialized.
------------------------------------------------------------
revno: 883
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2018-04-04 15:22:33 +0200
message:
  Fixed bug on non-NCDF tbtrans compilation
  
  And enabled BTD optimization on ending blocks.
  This should actually make *all* BTD guesses the same.
  So perhaps we should revise some of the algorithms again.?
------------------------------------------------------------
revno: 882
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-04-03 21:40:25 +0200
message:
  Fixed non-equilibrium contour in the au_100_0.25 test
  
  I was missing +- 5 kT in the blocks.
------------------------------------------------------------
revno: 881
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Sun 2018-04-01 00:36:01 +0200
message:
  Use the correct spin dimensions in mulliken routine (4.1)
  
  The 'mulliken' routine used formerly an argument 'nspin'
  that was handled internally as ranging only from 1 to 4. Thus
  SOC calculations would not trigger any output. This has been fixed.
  
  Also, requests for mulliken output during all steps of the scf cycle
  (triggered by 'mulliken-in-scf T') now produce mulliken output in the
  SOC case (which also calls the 'moments' routine to print an approximation
  to orbital moments).
------------------------------------------------------------
revno: 880 [merge]
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Sat 2018-03-31 23:57:17 +0200
message:
  Fix some non-collinear spin issues
  
  * The computation of Ebs and EHarris was faulty for non-coll
    spin. This did not affect the total energy.
  
  * Gamma-point calculations gave an incorrect y-component of the spin
    due to a sign convention problem in the building of the DM from the
    eigenvectors.  The 'diag2g' and 'diag2k' routines now follow more
    closely the structure of the 'diag3g' and 'diag3k' routines.
  
    ( + some minor fixes related to spin dimensions in I/O routines)
    ( + addition of 'print_spin' output when mulliken-in-scf is requested)
    ( + mulliken-in-scf done in 'mixer' only if mixing the DM)
    
    ------------------------------------------------------------
    revno: 829.1.7
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-spin-fix
    timestamp: Sat 2018-03-31 01:16:29 +0200
    message:
      Revert: Leave the XC setting of H(*,7:8) in vmat for now
      
      Even though formally 'vmat' should not have to deal with SO issues, it
      is now considered safer to keep the setting of the XC components of
      H(*,7:8) in it, rather than doing it explicitly in the H building
      routines. 'vmat' is just adding to H, so no overwriting is done. In
      contrast, errors would ensue if somebody changed the ordering of the
      assignments in 'setup_hamiltonian'.
      
      This patch reverts a previous one in the 4.1-spin-fix branch.
    ------------------------------------------------------------
    revno: 829.1.6 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-spin-fix
    timestamp: Mon 2018-03-05 15:50:11 +0100
    message:
      Merge Nick's clarifications of diag2g and diag2k
      
      Nick has changed the DM-building sections of diag2g and diag2k
      so that they resemble the same operations in diag3g and diag3k.
      This is more clear and maintainable.
        ------------------------------------------------------------
        revno: 829.2.1
        committer: Nick Papior <nickpapior@gmail.com>
        branch nick: 4.1-fix-spin
        timestamp: Fri 2018-01-05 09:38:43 +0100
        message:
          Cleaned up non-colinear comments and routines
          
          I have now reworked the diagonalization routines for the
          non-colinear methods.
          It was apparent to me that the correct formulation was diag2k because
          
            DM(a,b) = <psi_a|psi_b>, a and b orbital and spin indices
          
          which means that the conjugate has to be taken on the LHS eigenstate.
          This was opposite in diag2g, however since the imaginary part is only used
          in one of the assignments it was not seen.
          
          In effect, the previous codes had no bugs, but they were not consistent
          with the formulation.
          I have also clarified this in all comments in both routines.
          
          I have checked tests fe_clust_noncollinear and fe_noncol_kp.
    ------------------------------------------------------------
    revno: 829.1.5
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-spin-fix
    timestamp: Mon 2018-03-05 15:48:46 +0100
    message:
      Put print_spin in state_init. Wrap it in muldeb in compute_dm
      
      Remove the call to print_spin from setup_hamiltonian and put it
      in compute_dm (wrapped in the mulliken in scf block).
      
      Add a call to print_spin in state_init for the initial spin.
    ------------------------------------------------------------
    revno: 829.1.4
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-spin-fix
    timestamp: Thu 2018-01-25 13:29:24 +0100
    message:
      Fix bug in setting up H(7) and H(8) in SO
    ------------------------------------------------------------
    revno: 829.1.3
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-spin-fix
    timestamp: Fri 2017-12-22 11:39:35 +0100
    message:
      Insert comment in mulliken (might fix)
    ------------------------------------------------------------
    revno: 829.1.2
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-spin-fix
    timestamp: Thu 2017-12-21 16:51:22 +0100
    message:
      Fix nspin in some I/O routines
    ------------------------------------------------------------
    revno: 829.1.1
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-spin-fix
    timestamp: Thu 2017-12-21 16:49:49 +0100
    message:
      Fix DM generation, Ebs, Eharr in noncol
------------------------------------------------------------
revno: 879
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2018-03-29 12:11:43 +0200
message:
  Fixed init_consecutive with range when the range has zero entries
  
  Also heavily speeded up the level_structure algorithm by removing in_rgn
  calls.
  
  Cleaned up the valid_tri and added keyword for initial BTD block guess,
  also added this to the documentation.
  
  Fixed a bug in updating the cumultative sum parts. This happened for the
  first block only but cascaded through.
  
  Removed an unnecessary call in full_even_out
------------------------------------------------------------
revno: 878
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2018-03-28 10:44:47 +0200
message:
  Forgot to add integer memory consumption for the sparse arrays
------------------------------------------------------------
revno: 877
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2018-03-28 09:50:09 +0200
message:
  Improved memory print-out, no code change
------------------------------------------------------------
revno: 876
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-03-27 20:10:28 +0200
message:
  Moved even-out to after valid_tri
  
  This is necessary if the initial BTD is wrong. In that case it makes no sense to
  even-out the blocks.
  
  Also reduced the search space by trying to optimize the loop parameters.
  Now the initial guess 95% of the min bandwidth within the first connections.
  The stepping is 1% of the min bandwidth.
  The max is 105% of the max bandwidth within the first connections.
------------------------------------------------------------
revno: 875
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-03-27 15:34:40 +0200
message:
  Speeded up pivoting and block finding algorithms, also corrected a memory print-out
  
  I think we are approaching a final stage in the speedup for extreme TB calculations.
  The performance is rather good now. Still takes time in the trimat setup because
  it "tries" lots of different BTD block-sizes. This should probably be changed such
  that it stops guessing as soon as the final block size doesn't match.
  
  Speeded up a region Bcast when Nodes == 1.
  
  valid_tri and full_even_out should still be optimized...
------------------------------------------------------------
revno: 874
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2018-03-26 21:52:10 +0200
message:
  Speeded up connectivity graph pivoting method
  
  Instead of having two lists of elements to check, we now have a boolean
  array. In fact, many in_rgn could proably be changed to simple logical arrays
  with minor overhead and large performance gains.
------------------------------------------------------------
revno: 873
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2018-03-26 21:06:35 +0200
message:
  Speeded up rgn2trimat routines by allocating some temporary arrays
  
  This means that even for extreme amounts of BTD blocks it is very fast.
  Now the slow part is again the pivoting scheme.
------------------------------------------------------------
revno: 872
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2018-03-26 14:12:45 +0200
message:
  Bugfix for multiple variable usages in the NetCDF output
------------------------------------------------------------
revno: 871
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2018-03-26 10:42:36 +0200
message:
  Amend last commit with a note in the doc
------------------------------------------------------------
revno: 870
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2018-03-26 10:16:58 +0200
message:
  OpenMP info only for later versions
------------------------------------------------------------
revno: 869
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2018-03-26 10:06:50 +0200
message:
  Bugfix for very large systems
  
  tbtrans/transiesta quits if the total number of elements is
  above the integer limit.
  
  Clarified a few things in the pivoting with fan/front options.
  
  Add OMP print-out of the binding (prefer binding threads)
  
  Cleaned a few memory leaks in init_cdf routines.
  
  Speeded up cdf2ascii when many orbitals are present.
  
  Added pivot and BTD tables to the electrode down-folding regions.
------------------------------------------------------------
revno: 868
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2018-03-23 22:25:57 +0100
message:
  Bugfix for fan/front options in pivoting schemes
  
  Fixed bug with respect to the specialized pivoting schemes.
  There were incorrect de-allocations.
  
  Also updated analyzation to print-out in GB.
------------------------------------------------------------
revno: 867
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2018-03-23 15:04:28 +0100
message:
  Bugfix for very large orbitals in tbtrans and in rgn_push routine
  
  Clarified some OMP statements.
  Made sure that tbtrans can correctly create a BTD for no>2.6e6.
  
  Also made sure that the faster_parts does not overflow.
  
  We may still run into problems if the total number of elements
  is > 2,147,483,647 ~ 32 Gb per BTD matrix.
  Currently this is our limit!
------------------------------------------------------------
revno: 866
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2018-03-23 11:53:52 +0100
message:
  Lua-interactive, line-ending ; runs, bug-fix for deallocation
  
  Now interactive runs are executed if a line ends with ;.
  
  Fixed a double de-allocation.
  
  Fixed several table send/receives in one table.
------------------------------------------------------------
revno: 865
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2018-03-23 11:38:00 +0100
message:
  Bugfix in rgn_orb2atom
  
  The initial set atom was not put into the update list.
------------------------------------------------------------
revno: 864
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2018-03-23 11:14:28 +0100
message:
  Large speed up in certain pivoting algorithms
  
  Now the sorting of a pivoting array is much faster.
  This reduces the overhead of initialization of tbtrans to
  a minimum.
  I have also removed the constraint that some rgn_sp*
  routines enables distributed computing. Not necessary (and
  never checked).
  
  Added a rgn_grow routine which only re-initializes a region
  if there is not room for the new size.
  
  Allowed rgn_uniq to be in-place (i.e. no re-allocation, simply
  reducing r%n to the unique values).
------------------------------------------------------------
revno: 863
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2018-03-23 09:38:08 +0100
message:
  Fixed binary search for a simpler code
  
  The binary search is now as fast as my own search implementation.
  However, my search is still a little faster, so we keep it.
------------------------------------------------------------
revno: 862
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2018-03-23 09:27:56 +0100
message:
  Yet, yet another huge speed up for very large systems in transiesta and TBtrans
  
  The index function for BTD matrices was extremely slow for large systems.
  Now, instead of looping blocks we search for the orbital index.
  This should be much faster.
------------------------------------------------------------
revno: 861
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2018-03-22 20:07:58 +0100
message:
  Yet another huge speed up for very large systems in TBtrans
  
  TBtrans was using a huge amount of time on trying to create the
  connectivity graph due to some of the rgn_sp_* routines.
  I have now reworked them so they use slightly more memory, but
  are much much faster!
  This means that initialization of very big systems are almost
  negligeble.
------------------------------------------------------------
revno: 860
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2018-03-22 11:43:42 +0100
message:
  Huge speed up for very large systems in TBtrans
  
  TBtrans was using a huge amount of time on trying to even-out
  the BTD blocks. Now I have reworked this routine and it is *much* faster.
  
  This means that the "speed" method has changed to not start from the
  largest values and doing it like that. Searching for the largest element
  is extremely slow and is killing performance.
  Now there are two routines:
  
    diff_mem / diff_perf
  
  which compares two BTD matrices and returns a difference number
  in terms of their memory/performance, respectively. These
  are now used instead and should also work without doing
  overflows.
  
  All tbtrans: names has been changed to tbt: TODO consider changing
  to specific names depending on their parts.
  
  Enabled associating a region with a list.
------------------------------------------------------------
revno: 859
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2018-03-21 11:52:58 +0100
message:
  Fixed length check for -HS in tbtrans
  
  It is a minor thing and probably works anyway for most
  compilers.
------------------------------------------------------------
revno: 858
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2018-03-21 10:01:22 +0100
message:
  Fixed charge mixing with transiesta
  
  When performing charge mixing with transiesta the history
  is now correctly reset.
  
  Secondly, the Lua hooks for the mixing weights are now also correct
  for charge mixing.
------------------------------------------------------------
revno: 857
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-03-20 11:17:56 +0100
message:
  Forgot to deallocate dictionary
------------------------------------------------------------
revno: 856
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-03-20 11:11:37 +0100
message:
  Enabled multi-line prompt and ; for /run replacement
------------------------------------------------------------
revno: 855
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-03-20 11:01:00 +0100
message:
  Enabled full table retrieval using siesta.receive({'SCF'})
  
  Much easier although it probably fetches too much. This is the users
  responsibility!
------------------------------------------------------------
revno: 854
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-03-20 10:41:59 +0100
message:
  Lua interactive mode added /show and /clear codes
  
  Show the currently collected lines of code via /show
  Clear the currently collected lines of code via /clear
------------------------------------------------------------
revno: 853
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2018-03-19 22:05:21 +0100
message:
  Enabled interactive Lua runs (thanks to Alberto Garcia)
  
  The Lua framework has been extended to allow user-defined code
  to be runned at each state. I.e. the user can request information
  and print information etc. They can however interact with the Lua code
  as they wish.
  
  There are various ways of communicating with the interactive session:
  
  /debug
    turn on/off debugging
  /run
    run the currently collected lines of code, then continue
    collecting codes
  /cont
    run the currently collected lines of code and continue the
    siesta run
  /stop
    run the currently collected lines of code and stop all
    future interactive sessions.
  
  Note *any* Lua code is valid in this scheme.
  
  For instance:
  
  LUA> siesta.receive({'geom.xa'})
  LUA> xa = siesta.geom.xa
  LUA> print(xa[1][1], xa[1][2], xa[1][3])
  LUA> /run
  LUA> print(xa[2][1], xa[2][2], xa[2][3])
  LUA> /cont
  
  will communicate with Siesta, receive the coordinates,
  print-out the first atoms coordinate (in Bohr), then run the code
  and lastly, print-out the second atoms coordinate.
  
  Alberto Garcia did the initial work and Nick added more features.
------------------------------------------------------------
revno: 852
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-02-27 22:03:50 +0100
message:
  Fixed transiesta buffer reads from lists
  
  When reading buffer atoms from a list, the buffer atom
  types were not propagated to the arrays. I.e.
  it would crash if using TS.Atoms.Buffer [ ... ].
  This should be fixed now.
  
  This commit also fixes some minor issues related to fdf and
  integer precision specifications.
------------------------------------------------------------
revno: 851
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-02-27 20:58:02 +0100
message:
  Fixed transiesta tests to conform to the new binary
  
  As transiesta is part of siesta, the transiesta tests
  are easier because no double compilation is necessary.
------------------------------------------------------------
revno: 850
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-02-27 15:11:14 +0100
message:
  Updated documentation with extra mentions of sisl
------------------------------------------------------------
revno: 849
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-02-27 15:03:49 +0100
message:
  Maintenance of total-spin calculations
  
  Now the variables conserning the Total-spin configuration are stored
  along side the regular data (i.e. Qtot in atomlist now also has
  Qtots). This makes it easier to figure out the internal logic.
  
  Renamed ts variable (total spin) to total_spin for clarity and
  to not confuse with transiesta related stuff. Possibly other
  variables with 2 letters should be renamed (tp, tt, etc.)
  
  A bugfix regarding spin-spiral has been fixed. A reference to an
  unallocated element was wrong.
------------------------------------------------------------
revno: 848
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2018-02-22 14:28:36 +0100
message:
  Bugfix for user-defined Poisson
  
  Now it reads correct, and the error message is *much* clearer!
------------------------------------------------------------
revno: 847
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-02-20 14:46:13 +0100
message:
  Updated year of sisl reference
------------------------------------------------------------
revno: 846 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2018-02-19 10:09:31 +0100
message:
  Merged r556-557, merged fmpdos and NRTAB fix
    ------------------------------------------------------------
    revno: 483.3.71
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Mon 2018-02-19 09:15:36 +0100
    message:
      Increased NRTAB to 1024.
      
      Initial investigations shows that NRTAB in matel is important
      for forces and possibly other quantities.
      
      I have added a notice in the compatibility.tex text which describes
      what to do to revert the behaviour.
    ------------------------------------------------------------
    revno: 483.3.70
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Mon 2018-02-12 20:45:14 +0100
    message:
      Fixed Postnikovs fmpdos utility, fixes lp:1748937
------------------------------------------------------------
revno: 845
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2018-02-16 21:35:58 +0100
message:
  Removed setup_kscell, it was not used
------------------------------------------------------------
revno: 844
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-02-06 18:39:42 +0100
message:
  Fixed conv.lua in flos_h2o_meshcutoff test
  
  The starting Meshcutoff was not the intended.
  And the table was not producing easy to interpret data.
------------------------------------------------------------
revno: 843
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2018-02-01 13:29:11 +0100
message:
  Fixed dep_all.sh script to always update dependencies
  
  When merging from previous branches dep_all.sh would not work
  because of format errors in Makefiles. This is now fixed.
------------------------------------------------------------
revno: 842 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2018-02-01 12:04:12 +0100
message:
  Merged r554-555, merged PDOS Ef addition
    ------------------------------------------------------------
    revno: 483.3.69
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Thu 2018-02-01 11:42:36 +0100
    message:
      Added fermi-level to PDOS output
      
      By adding the fermi-level to the PDOS output we do not need
      to read the fermi-level from elsewhere.
      This makes analysis much easier.
      
      Also fixed a PDOS output bug for no_u > 9999.
    ------------------------------------------------------------
    revno: 483.3.68
    fixes bug: https://launchpad.net/bugs/1746096
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Tue 2018-01-30 20:20:13 +0100
    message:
      Removed all references to __FILE__ to enable conda-builds, fixes lp:1746096
------------------------------------------------------------
revno: 841
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2018-01-31 14:45:29 +0100
message:
  Fixed erroneous entry in the manual for Geometry constraints
------------------------------------------------------------
revno: 840
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-01-30 20:36:08 +0100
message:
  Added notice in Util/TS/TB folder to point to sisl
------------------------------------------------------------
revno: 839
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-01-30 10:12:48 +0100
message:
  Updated release script
  
  It may be advantegeous to also ship sha* checksums.
  Now the release script creates one additional file with
  all released files checksums, md5, sha256 and sha512.
  In that way it becomes easier to check with conda builds etc.
------------------------------------------------------------
revno: 838
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2018-01-26 14:17:30 +0100
message:
  Clarified slab-dipole corrections for transiesta calculations
  
  Now the slab-dipole correction seems to be more consistent with the
  semi-infinite leads.
  
  1) Any electric field along the semi-infinite directions is not
     allowed.
  2) Any dipole correction will be added perpendicular to the semi-infinite
     directions.
     However, for 1 electrode we *only* allow a correction along the single
     semi-infinite direction. This is perhaps not the best method. But it
     resembles that the system indeed is a slab along that direction.
  
  In any case, the dipole correction still needs to be turned on manually.
  
  Also, a long standing dhscf_init bug has finally been fixed.
  When running transiesta MD calculations it is important to update coordinates
  and indices for the grid. Hence the initializations has to be done
  after each MD step.
------------------------------------------------------------
revno: 837
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2018-01-25 21:01:19 +0100
message:
  Fixed Lua-flook interaction when supercell changes through MD
  
  When the supercell changes, so does the internal variables such
  as xa, etc. In that case we *have* to re-establish the pointers
  to the dictionary connecting Lua. This should now be fixed in
  state_init after the superc call.
  
  When doing this I also found out that several of the arrays where
  written as the full arrays (na/o_s) which was never the intent.
  Now only na/o_u elements are stored.
------------------------------------------------------------
revno: 836
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2018-01-16 13:51:55 +0100
message:
  Added TS.Elec.<>.Hartree.Extend to the manual
  
  Also changed the behaviour by making it a length from the electrode.
  
  Clarified a few things in the manual and updated links.
------------------------------------------------------------
revno: 835 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2018-01-04 19:48:03 +0100
message:
  Merged r553, merged PDOS ParallelOverK fix
    ------------------------------------------------------------
    revno: 483.3.67
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Thu 2018-01-04 18:22:58 +0100
    message:
      Possible bugfix for paralleloverk with k-grid in SCF, and Gamma in PDOS
      
      This is strictly not required in 4.0, but in the later versions this
      is necessary.
      This commit fixes the inconsistency of updating the "global" parallel-overk.
------------------------------------------------------------
revno: 834 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2018-01-04 15:41:41 +0100
message:
  Merged r552, merged PDOS test for gamma
    ------------------------------------------------------------
    revno: 483.3.66
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Thu 2018-01-04 15:38:24 +0100
    message:
      Added a test for PDOS using the Gamma-only for kpoint calculations
------------------------------------------------------------
revno: 833 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Sat 2017-12-30 19:48:51 +0100
message:
  Merged 4.1-ts-int.
  
  Now transiesta is intrinsic to the siesta exectuable.
  
  This has meant relatively few changes.
  
  The main difference is the fact that transiesta solution
  method is accessible in the siesta executable.
  
  When running electrode calculations one can now do either:
  
    siesta --electrode
  or
    TS.HS.Save True
    TS.DE.Save True
  
  which are equivalent.
  
  In the full life of 4.1 the transiesta executable
  is still accessible, the only difference between siesta
  and transiesta is that transiesta is equivalent to
    siesta --electrode
  
  Other than that there are few changes to the code.
  A general update of the documentation has been carried out
  through this merge.
    ------------------------------------------------------------
    revno: 811.1.2
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-integrate-ts
    timestamp: Sat 2017-12-23 12:33:37 +0100
    message:
      Cleaned up the last details for the TS merge
      
      Now the documentation is on par with the merging of
      transiesta into siesta.
      Since this superseedes the need for two executables a lot
      of documentation describing the "make transiesta" stuff has
      been removed.
      
      Also, fixed a few minor details in the options of transiesta.
    ------------------------------------------------------------
    revno: 811.1.1
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-integrate-ts
    timestamp: Thu 2017-11-23 15:17:27 +0100
    message:
      Made transiesta intrinsic to siesta.
      
      This commit fixes the issue of having to different
      executables.
      1. It removes all (see further down) pre-processor flags
         related to transiesta and thus enables regular transiesta
         runs by using siesta executable.
         There are no practical differences between the two.
         With this change the solutionmethod decides what to do.
      
      2. The "old" transiesta executable is still compilable.
         The only difference is the default of setting
         TS.HS.Save and TS.DE.Save
         such that electrodes are defaulted.
      
      The siesta executable now has a flag -electrode or -elec
      which sets TS.HS.Save and TS.DE.Save to true. This means
      that:
        transiesta == siesta --elec
      
      And that is it.
------------------------------------------------------------
revno: 832 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Sat 2017-12-30 19:06:18 +0100
message:
  Merged r550-551, merged PDOS updates
    ------------------------------------------------------------
    revno: 483.3.65
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Thu 2017-12-28 14:14:57 +0100
    message:
      Fixed spin-polarized pdos.xml writing
      
      Wrong code in r550.
    ------------------------------------------------------------
    revno: 483.3.64
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Thu 2017-12-28 14:00:52 +0100
    message:
      Extended PDOS files with more metadata
      
      The PDOS xml output now also adds:
      - Z: atomic number
      - P: true/false for polarization orbital
      
      Also reduced temporary arrays and merged to loops.
      
      Renamed pdos.xml file to siesta.PDOS.xml to make it
      system-label dependent.
      
      I have checked the utilities and there is no problems with
      those.
------------------------------------------------------------
revno: 831
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2017-12-22 11:33:21 +0100
message:
  Changed defaults of common options
  
  The defaults for:
  
  MeshCutoff has been increased from 100 to 300 Ry
  MaxSCFIterations has been increased from 50 to 1000
  SCFMustConverge is now true, i.e. Siesta will default to die
  upon the first MD-step where self-consistency is not reached.
------------------------------------------------------------
revno: 830 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2017-12-22 11:26:20 +0100
message:
  Merged r548-549, ion.nc read/writes (final)
    ------------------------------------------------------------
    revno: 483.3.63
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Thu 2017-12-21 15:12:39 +0100
    message:
      Increased length of int->str in wxml
      
      This fixes a potential problem when a very large
      integer tries to get represented by the str_integer
      routine in wxml. This simply increases the format to
      allow a wider field.
    ------------------------------------------------------------
    revno: 483.3.62
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Thu 2017-12-21 14:49:14 +0100
    message:
      Final edits for read/write of floating orbitals
      
      Also fixed an inconsistency in the interpolation routine name.
------------------------------------------------------------
revno: 829 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2017-12-18 09:42:20 +0100
message:
  Merged r547, ion.nc read/writes
    ------------------------------------------------------------
    revno: 483.3.61
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Mon 2017-12-18 09:40:33 +0100
    message:
      Fixed writing/reading ion.nc files for ghost-atoms
      
      Now siesta writes out ion.nc files for ghost-atoms, in these cases
      will the number of projections be 0.
      Secondly, a bug has been fixed when trying to read an ion.nc file
      that was not present.
      
      This fixes lp:1738425
------------------------------------------------------------
revno: 828
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2017-12-15 15:13:16 +0100
message:
  Added ghost to siesta.nc files
  
  Now the Ghost atom orbital information is also saved in the
  siesta.nc file. Upcoming fix should also include the ghost.ion.nc
  files by simply neglecting the KB-projectors.
  
  Bugfix for the latest commit.
------------------------------------------------------------
revno: 827
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2017-12-15 14:02:59 +0100
message:
  Bugfix for Lua runs without a Lua-file
  
  When one requests a Lua MD type-of-run it would continue
  to run the same MD-setup if no Lua file was present.
  This is now fixed by killing siesta if no lua file is present.
------------------------------------------------------------
revno: 826 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2017-12-15 11:34:49 +0100
message:
  Merged r546, Bessel ion-writes
    ------------------------------------------------------------
    revno: 483.3.60
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Fri 2017-12-15 11:24:23 +0100
    message:
      Bug in writing a Bessel function ion/ion.xml file
      
      Since the Bessel basis does not contain any pseudo-potential siesta
      would write binary stuff in the ion/ion.xml files which was preventing
      it from being read elsewhere.
      I have added a pseudo-potential initializer which defaults lots of
      values to the pseudo-potential (could be necessary for Bessel and other
      exotic pseudos.
      
      Also ensured lots of type arrays to be nullified upon creation, which
      should help in the aid when debugging.
------------------------------------------------------------
revno: 825
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2017-12-12 10:13:49 +0100
message:
  Bugfix in openmp statement hared => shared
------------------------------------------------------------
revno: 824
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2017-12-12 09:11:00 +0100
message:
  Cleaned up mumps usage in transiesta
  
  Made more tests with the latest 5.1.2 version. However, I am
  quite surprised at its slow performance for small systems.
------------------------------------------------------------
revno: 823
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2017-12-12 08:50:52 +0100
message:
  Bugfix for intel compilation with flook and NCDF_4
  
  Apparently intel does not allow the use statement of the dictionary.
  Sigh.
------------------------------------------------------------
revno: 822
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2017-12-11 10:24:54 +0100
message:
  Bugfix for non-filled energy points using the MUMPS solver.
  
  This was due to fake energy points having zero energy meaning
  that no imaginary part was present.
------------------------------------------------------------
revno: 821
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2017-12-08 10:18:52 +0100
message:
  Updated RELEASE_NOTES and documentation
------------------------------------------------------------
revno: 820
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2017-12-07 22:13:32 +0100
message:
  Made index_Gf easier in Gf-DOS calculations
  
  Now the index_Gf is contracted to a single
  subroutine which retrieves:
  
     Gf - Gf^\dagger
  
  This is much more efficient and should provide some speedup
  for big systems.
------------------------------------------------------------
revno: 819
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2017-12-07 21:59:23 +0100
message:
  Fixed a long-standing issue related to Gf-DOS
  
  Since the old tbtrans the DOS from the Green function has
  been calculated using:
  
     -Im[Tr[Gf.S]] / Pi
  
  while it actually should be calculated as:
  
     -Im[Tr[ (Gf-Gf^\dagger).S]] / (2Pi)
  
  to correctly handle k-point calculations.
  Essentially this will typically not result in differences
  because the k-averaging would sort these errors out (if
  time-reversal symmetry was not applied). In other cases
  it could have an effect, albeit small.
  
  One can check that the summed ADOS_k == DOS_k which should
  always hold. Secondly, this should also be enforced for the
  COOP and COHP analysis. I have checked this with sisl and
  they hold.
  
  I haven't tested the dH COHP curves, but suspect them to
  work, currently I am issuing a warning which should be tested
  against, i.e. sum(COHP_A) = COHP_Gf would make a great addition
  here as well.
  
  Since COOP and COHP are the same calculation I have cleaned
  up the code by limiting to GF_COP and A_COP routines which
  works either by passing S or H as the sparse matrix multiplication.
------------------------------------------------------------
revno: 818
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2017-12-06 14:43:43 +0100
message:
  Updated documentation to reflect the fixes in COOP and COHP curves
------------------------------------------------------------
revno: 817
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2017-12-06 14:12:52 +0100
message:
  Bug fixed for COOP and COHP curves in tbtrans
  
  Since they reflect the DOS they should be calculated as Gf_ij S_ji as would
  a normal DOS calculation. I.e. the papers describing COOP and COHP curves are only
  considering the Gamma-point. I have checked that this is indeed correct by
  using sisl and everything in full matrices.
  
  Also ensured that J, COOP and COHP are initialized to 0 which could be important with
  dH calculations.
  
  It should be noted that sum(COOP) == total-DOS.
------------------------------------------------------------
revno: 816 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2017-12-05 16:16:36 +0100
message:
  Merged r545
    ------------------------------------------------------------
    revno: 483.3.59
    fixes bug: https://launchpad.net/bugs/1736455
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Tue 2017-12-05 16:13:23 +0100
    message:
      Bug re-read basis functions with no potentials to interpolate (fix lp:1736455)
      
      When re-reading a basis from a ghost or Bessel orbital then many of the
      quantities are 0 (Vna, VCore, etc.).
      Since 4.0 the interpolation routine prevented these from the spline interpolation
      because there is a check for monotonic arrays (all 0).
      
      This commit fixes this by simply checking for erroneous input, and if so it will
      set dy2/dx2 to 0.
      This is rather arbitrary but at least initializes the dy2/dx2 to some values.
      
      Secondly, a possible memory leak in interpolation is corrected by issuing
      a fixed clean_spline call.
------------------------------------------------------------
revno: 815
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2017-12-05 14:16:45 +0100
message:
  Added COOP and COHP for tbtrans
  
  Now tbtrans can calculate COOP and COHP curves. This is stored in much the same spirit as the
  orbital-current due to the same sparsity pattern. Indeed this analysis does not make
  sense for orthogonal basis. However, there is no check for this.
  
  Basically the COOP curves are calculated as:
  
     COOP_ij = - Im[Gf_ij * S_ij] / Pi
     COOP_ij = Re[A_ij * S_ij] / 2Pi
  
  and the COHP curves are calculated as
  
     COHP_ij = - Im[Gf_ij * H_ij] / Pi
     COHP_ij = Re[A_ij * H_ij] / 2Pi
  
  Currently the COOP/COHP curves are untested but are (hopefully) correct.
  They are also implemented for dH calculations.
  
  Manual has been updated to reflect these changes.
  
  To make COOP work smoothly I have generalized the cdf_save function of the
  orbital current to make it work for all 3 cases (orb-current, COOP, COHP).
------------------------------------------------------------
revno: 814
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2017-12-04 10:12:38 +0100
message:
  Cleaned up test names, now the system-label are correct in regards of tests
  
  Many of the new tests where not consistent in naming scheme, SOC_* and flos_*.
  This has now been fixed.
  
  Minor changes to the documentation, allowing for <|> notations.
  
    \bra{...} => <...|
    \ket{...} => |...>
    \bk{1}{2} <1|2>
    \kb{1}{2} |1><2|
------------------------------------------------------------
revno: 813
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2017-11-29 10:29:42 +0100
message:
  Speeded up self-energy storing by removing reshape calls
  
  Instead of reshaping before calling put_var, we might as well
  trick a pointer to the correct shape and then use that directly.
  
  This should speed up storing large self-energies considerably because
  no stack-arrays are being created.
------------------------------------------------------------
revno: 812
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2017-11-28 18:37:32 +0100
message:
  Added blocks for BTD into the output files
  
  Having the block-sizes enables efficient handling if
  wanting to do BTD in sisl. This now because really easy as the
  block-sizes are known (with regards to the device pivot table).
------------------------------------------------------------
revno: 811
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2017-11-22 15:00:38 +0100
message:
  Removed unneeded variable in m_ts_electrode, clarified loops in m_tbt_tri_scat
  
  The current DOS calculation is now correct since there was a mistake.
  This has now been checked against a small sisl code.
  
  Thanks to Bernhard Kretz for making me aware of this.
------------------------------------------------------------
revno: 810
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2017-11-21 14:53:04 +0100
message:
  Speeded up DOS calculations in TBtrans
  
  The calculation of the DOS was performed by looping BTD entries which
  is far from optimal when performing large scale calculations.
  For now we have reverted to the sparse matrix looping and extraction of
  the index from a function call.
  
  This is implemented both in GF_DOS and A_DOS and so far it seems to be twice
  as fast. The other benefit is a better OMP parallelization.
  
  Also fixed a compilation problem without NCDF.
  
  Added a new routine in TriMat to extract index in sub-matrix plus submatrix.
------------------------------------------------------------
revno: 809
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2017-11-20 11:59:35 +0100
message:
  Clean-up in manual, MaxSCFIterations are now increased to 200.
  
  Fixed many inconsistencies in the manual, now there should be no
  duplicate entries.
  Also removed \over calls.
  
  Enabled arguments for fdf-flags:
    \fdf{Label:arg}
  which will create a link to an fdfoptions \option[arg] if
  fdfindex*{Label:arg}.
------------------------------------------------------------
revno: 808
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Sun 2017-11-19 21:18:39 +0100
message:
  Reverted an old change in the electrostatics for N-electrode box solutions
  
  In 391.1.642 I changed the algorithm from the in_box to square grids which
  meant that the box functionality was *only* working for Cartesian lattice
  vectors. This has been reverted.
  Secondly the loop has been reduced to only check where the electrode has points.
  
  One of the problems with the old implementation was the extremely bad
  performance due to numerous calls of dgesv routine. Instead the m_geom_box
  now calculates the inverse of the box-vectors and then multiplies to get
  the solution. This makes it perform MUCH faster.
  
  The electrode was using this box method and thus is now much faster.
  
  Removed some die calls in init_Elec_sim and moved to ts_warnings
  to make it compatible with N-electrode calculations. Say N-electrode
  calculations with Gamma-only don't really care about non-conforming
  pivoting of electrode lattice vectors.
  
  Thanks to Thomas Frederiksen for bringing this to my attention.
------------------------------------------------------------
revno: 807
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2017-11-17 21:53:23 +0100
message:
  Updated Fermi-update, more aggressive when Fermi correction is always pos/neg
  
  When the fermi update method always starts with missing/additional charge we
  are now more aggressive in the search for the best E_F. It speeds up in
  the simpler cases, but perhaps is too violent in the difficulter ones.
  
  Also allowed dEf to be performed from Lua by passing down the current charge
  to lua. Then one can always change Ef to fit dQ. Hence one can optimize the algorithm
  by system.
  
  Fixed timers when compiling with timers for transiesta fermi-correction.
  
  Added a module dm_charge which simply calculates the total charge via [DM*S]. Its low
  overhead makes it suitable to be calculated per SCF.
------------------------------------------------------------
revno: 806
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2017-11-15 15:33:37 +0100
message:
  Fixed origin displacement (should be half the interlayer spacing)
  
  This has no influence on computations.
------------------------------------------------------------
revno: 805
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2017-11-13 08:41:00 +0100
message:
  Fixed pivoting GGPS and many small nuances of the pivotings
  
  Now the pivoting works with the generalized connectivity-graph (CG).
  This has offloaded some things to the m_pivot_methods.F90 code and
  should provide a better basis.
  
  Added only_sub to the pivot_methods to allow sub-graph pivoting, this
  is mainly intended for tbtrans downfolding regions where electrodes regions
  are disconnected graphs.
  
  Added error calls when the pivoting scheme does not contain all elements.
  
  A couple of fixes in m_region, initialization in consecutive and sort.
  
  Fixed exposing electrode orbitals in tbtrans (o_inD required all orbitals).
  
  Added print-out of suggested pivoting scheme. This is however a suggestion as
  it is only based on the lowest memory usage.
  Secondly, the output of TS.Analyze has been greatly reduced.
  
  TODO adapt the new level-structure type in GGPS.
------------------------------------------------------------
revno: 804
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2017-11-09 20:28:59 +0100
message:
  Fixed a_dev in TBT.SE files (sorted) and also fixed issue with MPI-IO
  
  Now the TBT.Proj and TBT.SE files have their own open routine which is
  simply a copy. But it allows a finer tuning.
  
  Fixed warnings when sigma-only and fixed a bug regarding elec-dos and sigma-only.
  
  Speeded up SE writes because we now keep the file-handle open.
  
  Added generalized option for connectivity graphs. We should consider
  doing this also for all other options. I.e. the fan-options probably
  require a more specific pivoting routine.
  
  Fixed wrong default in the manual of the cross-term updates, they are
  cross-terms, but none was specified as the default.
------------------------------------------------------------
revno: 803
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2017-11-08 14:57:52 +0100
message:
  Removed redundant print-out of the transiesta begin
  
  Now an MD simulation with transiesta does not print-out
  WELCOME TO transiesta on every step
------------------------------------------------------------
revno: 802
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2017-11-08 10:46:44 +0100
message:
  Bugfix for tbtrans analyzation
  
  Now the analyzation works for tbtrans.
  
  Sp_union was also immensely speed up which really makes analysis
  much faster.
  
  Currently the different connectivity graphs are not fully implemented
  but this should be done.
------------------------------------------------------------
revno: 801
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2017-11-01 13:25:17 +0100
message:
  Bugfix for memory-allocation names
  
  In diagonalizeHk a nullification of Haux, Saux was creating
  a memory leak.
  This should now be fixed.
  
  Also fixed lots of names in de_alloc to prevent reports of
  non-valid use.
  
  When transiesta starts it will immediately deallocate the dense matrices
  to limit memory usage. Since all methods should ensure a correct
  allocation then it shouldn't matter.
------------------------------------------------------------
revno: 800
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2017-10-31 16:23:27 +0100
message:
  Finally added tbtrans analyze code, many small fixes
  
  Finally TBT.Analyze analyzes nearly all pivoting methods and enables
  easier determination of the pivoting method.
  
  By default enable the creation of Graphviz tables (no need to add flags).
  Also added documentation in manuals.
  
  Small speedup in the analyzation step on the electrode connectivity graphs
  by using rgn_push instead of append
  
  Removed a few unused variables (nothing should be affected).
  
  Changed DOS calculations in tbtrans to add prefactor in the loop (OMP) instead
  of branching a new OpenMP region again (currently untested but the change
  was so small)
------------------------------------------------------------
revno: 799 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2017-10-30 16:59:05 +0100
message:
  Merged r544
    ------------------------------------------------------------
    revno: 483.3.58 [merge]
    fixes bug: https://launchpad.net/bugs/1728281
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Mon 2017-10-30 16:57:51 +0100
    message:
      Merged fix lp:1728281
        ------------------------------------------------------------
        revno: 483.15.1
        fixes bug: https://launchpad.net/bugs/1728281
        committer: Nick Papior <nickpapior@gmail.com>
        branch nick: 4.0-fdf
        timestamp: Sun 2017-10-29 13:23:07 +0100
        message:
          Fixed lp:1728281
          
          Now a fdf-file with an input line with too long information
          will kill the program.
          This *only* happens for valid input, i.e. not on comments,
          and not where comments are placed after information.
          
          Also added : as a delimiter in the list functionality.
------------------------------------------------------------
revno: 798
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2017-10-30 15:47:27 +0100
message:
  Ensured k-points are in output of tbtrans
  
  Now Gamma point calculations also add the k-point information to the
  NetCDF files. This should help sisl comprehend things more easily.
  
  Added check for TBT.Atoms.Device block/list to not print-out stuff
  in the warnings block.
  
  Allowed -atom in block to be equivalent as not-atom.
------------------------------------------------------------
revno: 797
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2017-10-30 10:55:26 +0100
message:
  Fixed reading a list of length 1, also improves error messages
  
  Fixed reading a list of length 1, fixed reading more than 1 list
  on a single line.
------------------------------------------------------------
revno: 796
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Thu 2017-10-26 12:42:57 +0200
message:
  Allow passive species in SOC calculations
  
  In previous versions of the code all species had to contribute to the
  spin-orbit part of the Hamiltonian. This has been relaxed, and there
  is code to check that at least one species contributes.
  
  In the output file there is a new section on SOC setup. The old line
  with the confusing message "spin-orbit components not used" has been
  removed.
------------------------------------------------------------
revno: 795
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2017-10-24 15:14:57 +0200
message:
  Fixed missing dependencies in the Makefiles for ts2ts
  
  Also amended documentation of TBT.Atoms.Device.Connect.
  
  Fixed compilation of optical utility (VPATH should not
  be present).
------------------------------------------------------------
revno: 794
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2017-10-23 11:18:56 +0200
message:
  Fixed missing import in 793
------------------------------------------------------------
revno: 793
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Sun 2017-10-22 14:53:59 +0200
message:
  Updated documentation and check for energy when re-using contours
------------------------------------------------------------
revno: 792
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2017-10-20 11:41:10 +0200
message:
  Corrected warning print-out when using non-bulk electrodes
------------------------------------------------------------
revno: 791
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2017-10-19 21:27:43 +0200
message:
  Speeded up transiesta and tbtrans calculations
  
  Instead of using rgn_pivot we now pass the corresponding
  pivoting array to make it much faster when using "weird"
  pivoting schemes. This will speed up large calculations.
------------------------------------------------------------
revno: 790
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2017-10-19 20:33:34 +0200
message:
  Speeded up delta-calculations by using the pivoting table
  
  Instead of searching the pivoting table for the correct index
  we instead use the one-shoot pivot table to get the placement.
  This speeds up calculations (immensely)
  
  Currently, however, this is not enabled in the downfolding scheme
  because it would require N_elec X no_u arrays which for tight-binding
  calculations is around 4 MB per million elements per electrode.
  In those situations one might also use a very large device region
  because one needs bond-currents.
------------------------------------------------------------
revno: 789
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2017-10-18 18:26:48 +0200
message:
  Added compiler version to TBtrans
------------------------------------------------------------
revno: 788 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2017-10-18 18:25:05 +0200
message:
  Merged r543
    ------------------------------------------------------------
    revno: 483.3.57
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Wed 2017-10-18 18:14:45 +0200
    message:
      Added compiler version information
      
      Now the Makefile will automatically add the relevant compiler
      information such that one can more easily determine
      the compiler version used.
------------------------------------------------------------
revno: 787
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Sat 2017-10-14 21:37:46 +0200
message:
  Fixed erroneous analyzation integer for TS.Analyze
------------------------------------------------------------
revno: 786
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Sat 2017-10-14 20:19:37 +0200
message:
  Updated documentation for TS
------------------------------------------------------------
revno: 785
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2017-10-13 14:34:14 +0200
message:
  Fixed a_dev to be sorted when writing to the nc files
  
  This makes it easier for post-processing, and is very important.
  The pivot array is there for pivoting purposes. a_dev should not
  be responsible for this.
------------------------------------------------------------
revno: 784
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2017-10-13 10:38:50 +0200
message:
  Fixed print-out of timestamp and enabled --out for tbtrans
  
  Also added more information in case users "forget" to add arguments.
------------------------------------------------------------
revno: 783
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2017-10-13 10:21:35 +0200
message:
  Ensured that siesta information gets printed before fdf-stuff
  
  This has historically always been the case and it also makes it
  easier to debug.
  
  I have made a slight re-arrangement of code to implement this.
  The one downside is that the Nodes print-out will be there
  twice in case of PEXSI calls. This I think is an acceptable
  case.
------------------------------------------------------------
revno: 782
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2017-10-12 12:40:53 +0200
message:
  Made rgn_remove equivalent to complement by reversing arguments
  
  Also fixed issues where sorted could be passed through to the
  resulting tRgn. This should speed up across the use of these functions.
------------------------------------------------------------
revno: 781
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2017-10-11 09:44:41 +0200
message:
  Simplified the Cuthill-McKee algorithm
  
  Also added a sorting of the "start" elements in CM. This
  should ensure a more correct CM algorithm.
------------------------------------------------------------
revno: 780
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2017-10-11 09:13:51 +0200
message:
  Small speed up in pivoting methods
------------------------------------------------------------
revno: 779 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2017-10-10 21:47:15 +0200
message:
  Merged r542
    ------------------------------------------------------------
    revno: 483.3.56
    fixes bug: https://launchpad.net/bugs/1721479
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Thu 2017-10-05 12:01:03 +0200
    message:
      Fixed monkhorst-pack displacement, lp:1721479
      
      This fixes an uncommon bug where the displacement was
      more than 1.
      Now all displacements are translated into the principal
      BZ.
      
      I have tested this by running h_chain with 0.5/7 and 1.5/7 with
      exactly the same results.
------------------------------------------------------------
revno: 778 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2017-10-10 21:27:53 +0200
message:
  Merged r541
    ------------------------------------------------------------
    revno: 483.3.55 [merge]
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Wed 2017-10-04 13:25:11 +0200
    message:
      Lots of IO fixes, cleaned unnecessary close calls, and fixed alloc-report problems
      
      Many fixes regarding the IO nature in siesta. Completely removed all references
      to the paste function (still present in Util folder, hence it currently remains)
      which also removes the need for lots of "save" statements. The default
      behaviour should be to re-create the file on every call. The overhead is negligeble.
      
      Fixed print-out in alloc-report when peaknode is not 0.
      
      Fixed lots of alloc-mismatch findings.
        ------------------------------------------------------------
        revno: 483.14.4
        committer: Nick Papior <nickpapior@gmail.com>
        branch nick: 4.0-io
        timestamp: Wed 2017-10-04 13:16:56 +0200
        message:
          Added ts target for building transiesta
        ------------------------------------------------------------
        revno: 483.14.3
        committer: Nick Papior <nickpapior@gmail.com>
        branch nick: 4.0-io
        timestamp: Wed 2017-10-04 12:57:36 +0200
        message:
          Simple work-around for alloc_report
          
          Now the alloc_report re-assigns the unit when writing from non-IO nodes.
          This was necessary due to b-casting of unit (which did not make any sense).
          
          Fixed two alloc name mismatches in outcoor, bands find_kgrid and transition_rate.
        ------------------------------------------------------------
        revno: 483.14.2
        committer: Nick Papior <nickpapior@gmail.com>
        branch nick: 4.0-io
        timestamp: Wed 2017-10-04 11:48:27 +0200
        message:
          Removed all references to paste in Src/*
          
          All paste usages has been removed and replaced by trim.
          
          Fixed a possible bug in iodm where buffer arrays were used
          in a non-initialized manner. Now it can be used without the
          save attribute.
          
          Lots of frstme removed due to the small overhead of creating the
          filename on every iteration. It was just cluttering the data.
          
          A few places eV and Ang were hard-coded. They have now been
          replaced by module units for consistency.
          
          Removed unnecessary close calls which already had io_close.
          This should prevent a few mis-uses.
        ------------------------------------------------------------
        revno: 483.14.1
        committer: Nick Papior <nickpapior@gmail.com>
        branch nick: 4.0-io
        timestamp: Wed 2017-09-27 13:54:09 +0200
        message:
          Fixed closing of files at the end of siesta run
          
          Several files were not closed appropriately, and probably
          there are other undiscovered files as well.
          
          We will have to check this eventually.
          
          This can most easily be checked by doing a simple:
          
             call io_status
          
          just above MPI_Finalize.
          
          This commit also adds a shutdown flag to alloc_report
          to shutdown reporting.
          
          Also increased nesting fdf-stuff to 7.
------------------------------------------------------------
revno: 777 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2017-10-10 21:12:06 +0200
message:
  Merged r540
    ------------------------------------------------------------
    revno: 483.3.54
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Wed 2017-09-27 11:48:02 +0200
    message:
      Fixed close of lun when using Siesta as master
      
      There was a missing io_close when using Siesta as master.
------------------------------------------------------------
revno: 776 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2017-10-10 21:08:31 +0200
message:
  Merged r539
    ------------------------------------------------------------
    revno: 483.3.53
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Tue 2017-09-19 15:01:59 +0200
    message:
      Added dipole correction tests, and fixed convergence issue in the same tests
------------------------------------------------------------
revno: 775
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2017-10-10 21:03:12 +0200
message:
  Fixed pivoting in tbtrans
  
  For a very long time TBtrans has experienced sub-optimal pivoting
  compared to transiesta.
  This has now been fixed because the (dense) down-folded self-energies were
  not expanded in the sparse pattern that is searched when pivoting.
  This commit uses the correct sparse pattern.
  
  Secondly, this commit introduces a change to the PCG algorithm which
  in certain cases proves to be really efficient. It is slightly more
  costly than the GPS algorithm but may provide better pivoting.
  It has at least for some really big TB systems shown far superior handling.
------------------------------------------------------------
revno: 774
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2017-10-10 13:31:23 +0200
message:
  Minor change in the way the DE_NEGF is calculated
  
  Now we take the average of the charge per chemical
  potential because we do not know the actual partition of the
  chemical potential.
  Effectively this makes it easy to post-process.
  
  Also added DE_NEGF to the siesta dictionary.
------------------------------------------------------------
revno: 773
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2017-10-05 17:12:09 +0200
message:
  Added electrode quantities to TBT.nc output
  
  Added Bloch and eta per electrode.
------------------------------------------------------------
revno: 772
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2017-10-05 15:34:22 +0200
message:
  Fixed displacement for tbtrans, lp:1721479
  
  This tbtrans version does not exist in 4.0, hence the commit here.
------------------------------------------------------------
revno: 771
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2017-09-29 09:32:16 +0200
message:
  Changed default poisson ramp placement. It *should* be in central region
  
  This "bug" was introduced in r542 and was due to conversations with other
  personel in the field.
  Since I have now tested it to obtain the correct voltage drop I can assert
  that central should be the default (it also converges better).
------------------------------------------------------------
revno: 770
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2017-09-28 20:23:53 +0200
message:
  Fixed bug related to assigning the left-most electrode with the smallest bias
  
  A problem was occuring when defining the left-electrode with the lowest
  voltage.
  This was due to the voltage ramp was erronously setup.
------------------------------------------------------------
revno: 769
fixes bug: https://launchpad.net/bugs/1718162
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2017-09-27 15:56:46 +0200
message:
  Fixes lp:1718162 for PDOS for NC and SO for k-points
  
  The problem seem to have been fixed, confirmed by R.Robles.
  
  The error was that the wrong overlap matrix was used in the
  projection calculation.
  
  Also removed stack-allocation by moving Spr to a locally
  allocatable array. This should resolve intel problems with
  stack-allocation.
------------------------------------------------------------
revno: 768
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2017-09-25 14:53:09 +0200
message:
  Fixed delta reading when number of processors is too great
------------------------------------------------------------
revno: 767
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2017-09-21 19:27:50 +0200
message:
  Attempting to fix parallel pdos for non-colinear and spin-orbit
  
  An apparent error was the band index which was passed through
  LocalToGlobalOrb without notice. This is wrong because NC and SO
  have twice the amount of bands compared to the number of orbitals.
------------------------------------------------------------
revno: 766
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2017-09-19 15:08:34 +0200
message:
  Added charges when we need Lua scripts for changing species
  
  Now one can "change" the Datm array via Lua.
  One can also adapt the total charge, both electrons and proton charges.
  
  We haven't tested this with Lua, yet. But hopefully these ingredients are
  what is necessary.
------------------------------------------------------------
revno: 765
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2017-09-07 18:23:04 +0200
message:
  Added a write-out of all fdf-flags defined in the manual
  
  It is now easy to have a complete list of fdf-flags defined
  in the manual if so desired. The files \jobname.fdf gets created
  with each fdfentry element defined there.
------------------------------------------------------------
revno: 764 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2017-09-07 13:53:22 +0200
message:
  Merged 4.0 r537-538
    ------------------------------------------------------------
    revno: 483.3.52 [merge]
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Thu 2017-09-07 13:51:48 +0200
    message:
      Added new units for fdf compliance
      
      Now Ha and mHa are accepted units (for Hartree and milli-Hartree, respectively).
      These were missing.
      
      Also the merge aids in the maintenance of the units and allows one to easily change the
      units, if so desired. I.e. we will test whether adding more digits will change anything.
        ------------------------------------------------------------
        revno: 483.13.3
        committer: Nick Papior <nickpapior@gmail.com>
        branch nick: 4.0-units
        timestamp: Thu 2017-09-07 13:25:56 +0200
        message:
          Prepared fdf_units.py to handle floating point values in Python
          
          Now we are prepared to try out with different values.
        ------------------------------------------------------------
        revno: 483.13.2
        committer: Nick Papior <nickpapior@gmail.com>
        branch nick: 4.0-hartree
        timestamp: Wed 2017-08-02 09:02:59 +0200
        message:
          Added even more units, added a template python code to easily add units
          
          Adding units was a strain and not conforming to a fixed method.
          Now the units may be re-generated in a Python script. This may also
          be used to verify the unit conversions, but this is not so, yet.
        ------------------------------------------------------------
        revno: 483.13.1
        committer: Nick Papior <nickpapior@gmail.com>
        branch nick: 4.0-hartree
        timestamp: Tue 2017-08-01 13:11:45 +0200
        message:
          Added Ha as a unit specifier in fdf
          
          The former Hartree only variation was rather
          limited and Ha is also typically used.
          
          Added: 
            Ha == Hartree
            mHa = mHartree
            ha/bohr/e == har/bohr/e
          
          There should be no ambiguity in adding these variables.
    ------------------------------------------------------------
    revno: 483.3.51
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Thu 2017-09-07 11:23:41 +0200
    message:
      Updated Util/README to reflect that vps* files has been removed
------------------------------------------------------------
revno: 763
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2017-09-07 13:37:35 +0200
message:
  Fixed compilation without NCDF_4 support
------------------------------------------------------------
revno: 762
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2017-09-07 12:55:01 +0200
message:
  Updated dH method to be a dH and dSE
  
  This is necessary to differentiate between delta elements contributing to
  the bond-currents (magnetic field) and which does not (complex absorbing potentials).
  
  This has meant a restructuring of the delta stuff and is now easier to follow,
  the dH/dSE codes are now extremely minimal due to a common interface.
  
  I have tested them against level 1-4 for both cases.
  Enabled print-outs of delta stuff for level > 7.
  
  Updated mat_invert MPI_IN_PLACE_RECURSIVE algorithm to reduce copies, it is still
  slower, but is good to have.
------------------------------------------------------------
revno: 761
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2017-09-05 11:02:36 +0200
message:
  Improved print-out for errors when performing MD calculations
  
  No code changes.
------------------------------------------------------------
revno: 760
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2017-09-04 21:01:36 +0200
message:
  Added COMP_LIBS to version.F90 output
  
  This is simply for information to always track the used libraries.
------------------------------------------------------------
revno: 759
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2017-09-04 14:34:13 +0200
message:
  When checking for transfer matrix we now only die if GF file isn't used
  
  I.e. if a user supplies an external GF file, and requests it be used, then
  transiesta/tbtrans now allows this but informs the user of said choice.
------------------------------------------------------------
revno: 758 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2017-09-04 14:13:54 +0200
message:
  Merged 4.0 r535-536
    ------------------------------------------------------------
    revno: 483.3.50
    fixes bug: https://launchpad.net/bugs/1704370
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Mon 2017-09-04 13:10:16 +0200
    message:
      Fixed possible heap allocatable arrays for intel compiler
      
      A sum call has been removed to prevent a seg-fault for heap allocated
      temporaries.
      
      Fixes lp:1704370
    ------------------------------------------------------------
    revno: 483.3.49
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Mon 2017-09-04 12:12:21 +0200
    message:
      Removed vpsa2bin.f and vpsb2asc.f, they are part of ATOM
      
      Removed PS converters. They are part of ATOM distribution.
------------------------------------------------------------
revno: 757
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2017-09-04 14:13:08 +0200
message:
  Removed an unnecessary line in SE calculation, for clarity
------------------------------------------------------------
revno: 756
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2017-08-29 11:47:24 +0200
message:
  Fixed a sign convention error in bond-currents
  
  I still have to check that dH does it correctly but
  I cannot see how it shouldn't.
  
  Note that since sisl 0.8.6 this is also fixed.
  The mistake was that in sisl 0.8.5 and prior the signs
  were wrong, so effectively all previous 4.1 releases and sisl
  0.8.5 showed the correct bond-currents. But now we have to correct
  the mistake.
------------------------------------------------------------
revno: 755
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2017-08-29 10:14:51 +0200
message:
  Added simple case of pivoting 1 no regions
  
  Now rgn2trimat works for 1-orbital systems.
------------------------------------------------------------
revno: 754
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2017-08-28 12:15:59 +0200
message:
  Removed unused variables in tbtrans
------------------------------------------------------------
revno: 753
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2017-08-28 12:09:50 +0200
message:
  Enabled tbtrans calculations with 1 orbital systems
  
  Now we may run calculations on *any* size systems. Before
  it could only run on systems with *at least* 2 orbitals per
  block. This has been leveraged now.
------------------------------------------------------------
revno: 752
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2017-08-25 22:19:23 +0200
message:
  Added new-line when using dH and changed tbtrans: to tbt:
  
  There is no code change.
------------------------------------------------------------
revno: 751
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2017-08-23 15:28:25 +0200
message:
  Changed internal Gamma array to be i (Sigma - Sigma^\dagger)^T
  
  Generically the scattering matrix (Gamma) is defined as:
    Gamma = i ( Sigma - Sigma^\dagger)
  however, before this commit the convention was:
    Gamma = ( Sigma - Sigma^\dagger) ^ T
  
  Now we use this convention:
    Gamma = i ( Sigma - Sigma^\dagger) ^ T
  
  1. The complex number i makes the scattering matrix Hermitian
  2. The transpose allows certain optimizations when calculating the
     transport (i.e. dot instead of matrix multiplications)
  
  I have re-runned all k-point sampled versions of MUMPS, full, BTD
  with and without bias (only bias should be important) and I have
  also checked TBtrans.
  The only thing missing for testing is the molecular projections
  for tbtrans. This should be tested (TODO). However, there it shouldn't
  matter because the Gamma are not re-calculated.
  
  I also found a bug when writing correction eigenvalues to ASCII,
  now it correctly only writes the k-averaged ones in AVCEIG.
------------------------------------------------------------
revno: 750 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2017-08-22 17:27:39 +0200
message:
  Merged 4.0 r532-534
    ------------------------------------------------------------
    revno: 483.3.48
    fixes bug: https://launchpad.net/bugs/1712319
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Tue 2017-08-22 16:58:06 +0200
    message:
      Updated Util/README for missing entries and sorting, fixes lp:1712319
      
      Now the Util/README is sorted and the missing entries
      are updated. It is still a relatively crude README.
    ------------------------------------------------------------
    revno: 483.3.47
    fixes bug: https://launchpad.net/bugs/1712317
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Tue 2017-08-22 15:12:33 +0200
    message:
      Updated some tests, partially fixes lp:1712317
      
      Added makefiles for:
        Util/Contour
        Util/Optical
        Util/sies2arc
      
      to enable easier compilation of said utilities.
      
      Removed clean targets in the protoneb and simpletests in
      siesta as subroutine utility.
      
      Readme files in above directories are also updated.
      
      In Optical a program called "input" has been changed to
      optical_input to prevent name clashes.
      
      I haven't implemented the LINALG fix, but I think we should
      encourage the use of external libraries for performance reasons.
      Essentially the shipped sources for LA are highly *discouraged*.
    ------------------------------------------------------------
    revno: 483.3.46
    fixes bug: https://launchpad.net/bugs/1711850
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Tue 2017-08-22 14:23:59 +0200
    message:
      Fixed documentation for tests, fixes lp:1711850
      
      A mistake in the usage documentation of the Makefile for the
      tests has been corrected.
------------------------------------------------------------
revno: 749
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2017-08-22 17:09:30 +0200
message:
  Added total energy contribution from an open-boundary calculation.
  
  The total energy contribution is (grand canonical ensemble):
    Etot = Etot - e \sum_i N_i \mu_i
  where N_i is the number of particles being occupied from the i'th chemical
  potential, with chemical potential \mu_i.
  Sadly this value depends on the choice of reference energy.
  For choices:
    mu_1 = -V/2
    mu_2 = V/2
  and 
    mu_1 = 0
    mu_2 = V
  one will find two _very_ different results. But this is a matter of choosing the
  zero potential.
  Perhaps we should make the "effective" chemical potentials be subtracted the
  average chemical potential to have a constant potential for varying bias'.
------------------------------------------------------------
revno: 748
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2017-08-18 12:03:00 +0200
message:
  Fixed wrong documentation in Diag
------------------------------------------------------------
revno: 747
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2017-08-07 12:58:45 +0200
message:
  Removed unneed m_diagon_opt file
------------------------------------------------------------
revno: 746
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2017-08-07 12:05:47 +0200
message:
  Fixed compilation of utilities with local_sys.o
  
  It was a matter of updating the sfmakedepend commands.
  Now all utilites (except SiestaSubroutine) works as expected.
------------------------------------------------------------
revno: 745 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2017-08-07 10:20:16 +0200
message:
  Merged 4.1-diag
  
  This merge updates the internal diagonalization routines, greatly.
  
  ELPA has been updated to the latest version (2017.005) This is now the required
  release version of ELPA due to the newer and the stable API.
  
  The diagonalization routines are now all implemented for both real and complex
  cases (Gamma and k-points).
  I.e. now ELPA and MRRR can also be used with nc and spin-orbit.
  There are also a default distribution which should provide better performance for
  large processor counts.
  And lastly, the diagonalization routines now also minimizes the memory requirement
  due to
  
  1. If the 1D distribution memory requirement is >= 2D distribution, we can re-use
     memory thus reducing the required memory by a factor of 2 (at least)
  2. The NC and SO routines are now passed the auxiliary work arrays to reduce
     allocations in the respective diag[23][gk] routines. This also saved some memory.
  
  The LAPACK sources are updated to accommodate the new MRRR routines.
    ------------------------------------------------------------
    revno: 739.1.21
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-diag
    timestamp: Mon 2017-08-07 10:09:05 +0200
    message:
      Removed ELPA correction, bug has been reported and fix should be ready
      
      If not, we will fix it in later commits. But ELPA should really fix this
      before release.
    ------------------------------------------------------------
    revno: 739.1.20
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-diag
    timestamp: Sun 2017-08-06 13:17:47 +0200
    message:
      Reduced memory requirement for spin-orbit calculations
      
      We now re-use the densematrix matrices and do not allocate/deallocate
      in the diag3[gk] routines. This makes them more similar to the diag[gk]
      routines in interface and behaviour.
      
      The interface parameters have also been updated to complex values.
      
      Bug fixed wrong memory specification in writewave (only for memory tracking)
    ------------------------------------------------------------
    revno: 739.1.19
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-diag
    timestamp: Sun 2017-08-06 12:37:27 +0200
    message:
      Reduced memory requirement for non-colinear calculations
      
      We now re-use the densematrix matrices and do not allocate/deallocate
      in the diag2[gk] routines. This makes them more similar to the diag[gk]
      routines in interface and behaviour.
      
      The interface parameters have also been updated to complex values.
      
      Change re_alloc routine assignment in writewave to densematrix
    ------------------------------------------------------------
    revno: 739.1.18
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-diag
    timestamp: Sun 2017-08-06 11:35:09 +0200
    message:
      Small bug-fixes and corrections from before this branch
      
      Added print-out and quick-return when requesting band wavefunctions
      for spin-orbit coupling.
      
      Added note about neigneeded in diag*k being explicitly calculated and
      hence no 2* is needed for non-colinear or spin-orbit.
      
      Fallback the block-size when only using 1D distribution in diagonalization
      routines. This is merely cosmetic to let the user know the used block-size.
      
      Fixed an neigwanted in an rdiag call when it fails the diagonalization.
      
      Added comments for why we can re-use the 1D matrices in a 2D distribution
      when the memory requirements are equal or smaller in the 2D case.
    ------------------------------------------------------------
    revno: 739.1.17
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-diag
    timestamp: Thu 2017-07-20 08:34:24 +0200
    message:
      Enabled a diagonalization blocksize to explicitly set it
      
      The blocksize only gets set for 2D distributions because
      we have to redistribute it there.
      Hence, if the blocksize is different from the internal blocksize
      the 2D distribution is default to .true., regardless of processory.
      This may help certain systems where diagonalization is of highest importance.
      
      Updated the documentation slightly.
      
      Fixed print-out if non-compiled option is present (MRRR and ELPA).
    ------------------------------------------------------------
    revno: 739.1.16
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-diag
    timestamp: Tue 2017-07-18 13:31:40 +0200
    message:
      Reverted the default diagonalization algorithm to D&C
      
      Decreased tolerances for the expert drivers.
    ------------------------------------------------------------
    revno: 739.1.15
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-diag
    timestamp: Tue 2017-07-18 12:31:23 +0200
    message:
      Removed unused codes elpa* and fixed bands and writewave calls
      
      Removed all unused codes (elpa* codes).
      
      Now the bands and writewave code has the correct interfaces
      for the diag* routines.
    ------------------------------------------------------------
    revno: 739.1.14
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-diag
    timestamp: Tue 2017-07-18 11:21:01 +0200
    message:
      Updated interfaces with intents
      
      Added intents for the interfaces to make it obvious
      what is input and output.
    ------------------------------------------------------------
    revno: 739.1.13
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-diag
    timestamp: Tue 2017-07-18 11:15:42 +0200
    message:
      Enabled 1D distribution with ELPA and made sure it works
      
      I found out that the current ELPA implementation
      actually works. But only IFF I use a 2D distribution
      and use all processors on the row (so grid-column == 1).
      This is rather unfortunate, but is probably due to a bug
      in ELPA. For now, if one requests ELPA, we force the above.
      
      Hence, I believe it to be a bug in ELPA that it does not
      work for the other distributions. I will let ELPA devs know.
      
      Fixed a bug for expert driver in non-2D distribution.
      
      Changed the behaviour of 2D grids. Now it only makes a
      2D grid IFF it is able to split in more than 1 dimension.
      I.e. Y x Z for Y > 1 and Z > 1. Otherwise it defaults to
      1D distribution (but not for ELPA yet).
      I.e. if the 2D distribution would be an Y x 1 or 1 x Y it makes
      no sense to redistribute data for the same distribution.
      However, the user may override these settings.
      
      Updated the documentation to reflect the ELPA usage.
      
      Fixed compilation in serial.
      
      I have now checked all cases of runs and it should have converged.
      
      MRRR is now the default diagonalization routine, if enabled.
      
      Cleanup of code in diag.F90
    ------------------------------------------------------------
    revno: 739.1.12
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-diag
    timestamp: Mon 2017-07-17 16:15:11 +0200
    message:
      Fixed bug related to the re-distribution of the 2D->1D
      
      I had forgotten to update the descriptors for the p*gemr2d calls.
      
      Added Diag.ProcessorY to the si001-diags test to test the layout as well.
      
      Improved logic in the correct_input routine.
    ------------------------------------------------------------
    revno: 739.1.11
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-diag
    timestamp: Mon 2017-07-17 14:35:47 +0200
    message:
      Updated option reading for the Diag.Algorithm flag
      
      It is now easier to grasp what happens in the reading of the options.
      
      Updated documentation to reflect the updated use of the diagonalization
      routines.
    ------------------------------------------------------------
    revno: 739.1.10
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-diag
    timestamp: Sun 2017-07-16 22:35:04 +0200
    message:
      Enabled a list-like test for the makefile system
      
      To easily enable testing a variety of choices of fdf
      variables one may now create a single test makefile
      which defines an fdf-name, and a list.
      I.e. an example makefile in a test folder may look
      like this:
      
         FDF_LIST = Diag.Algorithm
         LIST = divide-and-conquer expert noexpert mrrr
      
         include ../test-list.mk
         name=si001-diags
      
      which will then (when executing make) in the folder
      run all the algorithm variables in separate work_* folders.
      This may come in handy to check several values, but otherwise
      retaining the same test structure.
      
      See si001-diags for an example use.
    ------------------------------------------------------------
    revno: 739.1.9
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-diag
    timestamp: Sat 2017-07-15 22:47:34 +0200
    message:
      Added ELPA-2017, however it does not work :(
      
      I have now added ELPA to the diag.F90 code.
      It should work, as far as I can see. But there *must* be something
      wrong.
      
      The implementation of the ELPA library requires the current
      implementation of ELPA (>=2017.05).
      
      Added index to the solvers in the documentation.
      The documentation has also been updated with ELPA, but
      it is currently not shown (easy to enable once it works).
      
      A fix for possible problems with too few processors per column
      has been fixed.
      
      Added neig to all the ScaLAPACK routines for back-transformation and
      the redistribution routines to limit computations and communication
      overhead.
      
      TODO: re-run all tests with NumberOfEigenstates to assert the reduced
      computations.
    ------------------------------------------------------------
    revno: 739.1.8
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-diag
    timestamp: Fri 2017-07-14 21:02:27 +0200
    message:
      Fixed serial compilation and fixed FPPFLAG for libsiestaLAPACK.a
    ------------------------------------------------------------
    revno: 739.1.7
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-diag
    timestamp: Fri 2017-07-14 20:37:46 +0200
    message:
      Removed the deprecated dsyevds and zheevds routines
      
      They are not needed anymore because the diag.F90 routine
      copies the eigenvectors IFF they are requested.
    ------------------------------------------------------------
    revno: 739.1.6
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-diag
    timestamp: Fri 2017-07-14 20:27:26 +0200
    message:
      Bug fix for NumberOfEigenstates, enabled new option
      
      The selection of the number of eigenstates was buggy for
      non-polarized non-collinear and spin orbit cases, however,
      it was only if the numberofeigenstates option was too small.
      This should have been corrected now.
      
      The option NumberOfEigenstates now implements a variant of specification
      that should make it easier to select the "correct" number of eigenstates.
      If one passes a negative number it corresponds to the number of
      calculated eigenstates above the number of orbitals required to fill the
      orbitals according to the charge.
      I.e. if there are 20 orbitals with 10 electrons and -2 is passed,
      it would be equivalent to NumberOfEigenstates 12.
      
      Added note about possible buggy pdsyevr when requesting less than the number
      of total eigenvectors.
    ------------------------------------------------------------
    revno: 739.1.5
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-diag
    timestamp: Fri 2017-07-14 18:48:17 +0200
    message:
      Enabled NumberOfEigenstates for all diag* routines
      
      Now all the k-point routines uses the NumberOfEigenstates
      when calculating the initial eigen-spectrum, but subsequently
      it is adjusted to the minimum # of eigenstates.
      Note that there should be no problems by enabling this for the
      k-point sampling, if it "goes" wrong it has to be the users
      responsibility.
      
      Language corrections in the manual, it is written in US English,
      while diagonalisation was written in British English.
      
      Allowed the new diag routines to have 3 neig clauses:
      
       neig > 0:
         only calculate neig eigenvalues AND eigenvectors
       neig < 0:
         only calculate neig eigenvalues
       neig == 0:
         calculate all eigenvalues
      
      Tested the non-collinear and the spin-orbit cases.
    ------------------------------------------------------------
    revno: 739.1.4
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-diag
    timestamp: Fri 2017-07-14 14:17:28 +0200
    message:
      Fixed remaining changes required for only using the new diag.F90
      
      The bands, writewave and all the diagonalization upper level routines
      had dependencies on the old method (ParallelOverK etc.).
      
      Fixed inconsistencies when using diag.paralleloverk and gamma
      calculations.
      
      Removed dead codes: rdiag, rdiag_mrrr and cdiag
      
      Removed variables from parallel module (ParallelOverK and
      ResetFirstCall) which were only required for the old diag routines.
      
      Removed print-out of divide-and-conquer algorithm in read_options
      
      Added BlockSize to the rdiag calls.
    ------------------------------------------------------------
    revno: 739.1.3
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-diag
    timestamp: Fri 2017-07-14 12:21:31 +0200
    message:
      Enabling the memoryfactor option
      
      It is unclear whether it is actually needed, however,
      in case something goes wrong it may be nice to have.
      
      Updated the work array sizes for the lapack and scalapack routines
      where the work-query does not provide details.
      
      All different algorithms have been runned on the si001 test.
      Note I haven't tested all the real algorithms.
      
      Added a bug-printout if compiled with _DIAG_WORK.
      In this case if ScaLAPACK routine pzheev does not yield the
      correct work-size, a note will be written that there is a bug
      in ScaLAPACK.
      
      At least in 2.0.2 there is a bug (I have reported a bug, see
      http://icl.cs.utk.edu/lapack-forum/viewtopic.php?f=13&t=5164)
    ------------------------------------------------------------
    revno: 739.1.2
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-diag
    timestamp: Fri 2017-07-14 08:13:16 +0200
    message:
      Updated shipped lapack to contain the 2stage solvers
      
      Note that the 2stage solvers will only be called when using
      the diag.paralleloverk and for calculating the eigenvalues
      only. This is because it does not implement calclulating the 
      eigenvectors.
    ------------------------------------------------------------
    revno: 739.1.1
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-diag
    timestamp: Fri 2017-07-14 08:05:07 +0200
    message:
      Re-implementation of r/c diag routines (enabled MRRR)
      
      Complete re-write of the r/c diag routines.
      This rewrite accomblishes several things and enables even more
      algorithms than before.
      
      The basis of this routine is to provide diagonalization
      and it differs from the original routines in these respects:
       1. It does NOT implement the generalized algorithms.
          Every diagonalization is performed in a 2-step manner,
          a) convert to generalized form (*potrf, *gst),
          b) solve standard problem
          This leverages the requirement of the external library
          to implement the generalized forms (which does
          exactly the same).
       2. All pre-rotate and save-eigenvector options has been removed.
          There is no point in having them if they were not used.
          Using them should require changes to this.
       3. In 2D parallel the original implementations *always*
          allocated the equivalent 2D distribution arrays (H2D, S2D, Z2D).
          However, when the node's distributed 2D number of elements
          is <= size(H) then we do not need to allocate room for these
          nodes. I.e. we can save 3 * size(H2D) elements in memory!
          This will typically be so, and it may even happen that only a few
          of the nodes actually require to allocate additional memory.
       4. Change the default symmetric part from 'Upper' to 'Lower'.
          This is because the pzhengst (in ScaLAPACK) performs better
          for 'Lower' (see pdyengst/pzhengst documentations).
       5. Added more solvers
          - MRRR
          - 2stage solvers (only in LAPACK, and currently only for jobz='N')
          - no-expert drivers (regular ones)
------------------------------------------------------------
revno: 744 [merge]
fixes bug: https://launchpad.net/bugs/1708634
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2017-08-04 13:56:02 +0200
message:
  Merged 4.0 r531, fixed ioeig for non-colinear spin, lp:1708634
  
  Streamlining the writing of non-colinear spin and spin-orbit EIG files.
    ------------------------------------------------------------
    revno: 483.3.45
    fixes bug: https://launchpad.net/bugs/1708634
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Fri 2017-08-04 13:02:12 +0200
    message:
      Fixed ioeig file for non-colinear spins, fixes lp:1708634
      
      Now the eigenvalues are considered as a single spin
      configuration in cases were non-colinear is used.
      This also means that band-indices are doubled due to the double
      spin-configuration.
------------------------------------------------------------
revno: 743
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2017-08-03 10:34:48 +0200
message:
  Added more digits to the DM.Tolerance in option-printout
  
  When performing SOC calculations the extra precision may be
  required.
------------------------------------------------------------
revno: 742
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2017-08-01 15:29:14 +0200
message:
  Added note about energy reference for tbtrans
  
  This is important if one does shifted bias window calculations
  because the energy spectrum gets displaced.
------------------------------------------------------------
revno: 741
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2017-07-31 14:57:07 +0200
message:
  Fixed bug for tbtrans bias window only calculation
  
  There was a bug in tbtrans contour reading when the contour
  intervals was based on |V|. This is now corrected.
------------------------------------------------------------
revno: 740
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2017-07-31 14:32:37 +0200
message:
  Fixed warnings for Tbtrans/transiesta and added repeat to rgn_print
  
  rgn_print now enables collecting equal and adjacent items into a [.] * i
  like system. This makes it more readable for very large structures.
  
  Added checks against the memory allocation problem. This typically
  happened for very large tight-binding structures where the pivoting
  needed to be done "manually". Now there are checks by casting to reals
  and checking values.
  
  TBtrans and TranSIESTA now also prints a warning if there are connections
  between electrodes across the device region.
  
  Changed the default electrode pivoting in tbtrans to the largest
  overlapping electrode. It has less effect in transiesta and hence is
  un-changed there.
  
  Added electrode blocks in the siesta.TBT.nc file with electronic
  temperature and chemical potential. I.e now the TBT.nc file ALWAYS
  contains all electrodes as groups.
------------------------------------------------------------
revno: 739
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2017-07-05 12:09:01 +0200
message:
  Updated documentation dates 
  
  Also added the citation to the latest transiesta article.
------------------------------------------------------------
revno: 738
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2017-07-05 09:18:12 +0200
message:
  Updated documentation
  
  Accidentially when the Examples/Transiesta was deleted
  the manual was not updated (r715)
------------------------------------------------------------
revno: 737
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2017-07-04 15:18:05 +0200
message:
  Updated release.sh script to updated version.info file
  
  Now the version.info file will contain the tag used
  to create the tarball.
------------------------------------------------------------
revno: 736
tags: v4.1-b3
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2017-07-04 10:30:53 +0200
message:
  Updated copyright years in siesta manuals
------------------------------------------------------------
revno: 735
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2017-07-04 08:52:32 +0200
message:
  Updated Siesta tests
  
  Almost all tests are updated.
  
  I can't get the results of the FePt_zz/zy tests,
  they run for more than 10 hours.
  
  TODO: Update tests to ensure they all converge (SCF convergence)
  and that they run it a reasonable time (regardless of the result).
------------------------------------------------------------
revno: 734
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2017-07-03 13:28:45 +0200
message:
  Updated Transiesta-TBtrans tests
------------------------------------------------------------
revno: 733 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2017-07-03 13:16:01 +0200
message:
  Merged 4.0 r530
  
  Updated makefiles in Utils so that make clean works by cleaning
  everything.
  
  This makes the script ./clean_all.sh work as it should.
    ------------------------------------------------------------
    revno: 483.3.44
    tags: v4.0.1
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Mon 2017-07-03 12:08:01 +0200
    message:
      Fixed Makefiles for clean targets in Util directories
      
      Now the following utilities will clean everything when
      issuing make clean in their build directories.
      
      - COOP
      - SiestaSubroutine/ProtoNEB
      - SiestaSubroutine/SimpleTest
      - WFS
------------------------------------------------------------
revno: 732 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2017-07-03 11:52:23 +0200
message:
  Merged 4.0 r529
  
  Updated makefile for tests, the tests for 4.1-b3 will be added
  in the next commit.
    ------------------------------------------------------------
    revno: 483.3.43
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Mon 2017-07-03 09:29:10 +0200
    message:
      Updated all tests for the 4.0.1 release
      
      Every test has been updated and checked.
      
      There were some tests were the energy was changed.
      This was due to fixes in the dipole correction where the
      energy contribution of an internal field is only half of
      an external field. This was a bug in prior versions.
      
      Secondly, there were a few tests missing in the Tests/Makefile
      which have now been added.
    ------------------------------------------------------------
    revno: 483.3.42
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Sun 2017-07-02 12:08:24 +0200
    message:
      Fixed test name for dipole_correction
      
      The dipole_correction test had an erroneous SystemLabel.
      This has been corrected.
------------------------------------------------------------
revno: 731
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Sun 2017-07-02 10:56:49 +0200
message:
  Updated lapack and blas to 3.7.1
  
  Now the shipped sources of LAPACK and BLAS are updated
  with several bug-fixes.
------------------------------------------------------------
revno: 730 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Sun 2017-07-02 10:49:35 +0200
message:
  Merged 4.0 r527
    ------------------------------------------------------------
    revno: 483.3.41
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Sun 2017-07-02 10:44:19 +0200
    message:
      Fixes fdf-name for maxwalltime and the variable declaration
      
      Now the walltime_warning is in real(dp) to fit the reading of
      floating point values (to prevent erroneous conversion from
      real(dp) -> integer)
      
      Fixed name reads in fdf_get to be the same as the documentation
      specification.
------------------------------------------------------------
revno: 729 [merge]
author: Nick Papior <nickpapior@gmail.com>
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Sat 2017-07-01 23:12:36 +0200
message:
  Merged 4.0 r526 (units for max-walltime; fdf_isphysical)
    ------------------------------------------------------------
    revno: 483.3.40 [merge]
    author: Nick Papior <nickpapior@gmail.com>
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.0
    timestamp: Sat 2017-07-01 22:50:23 +0200
    message:
      Provide units for max-walltime and max-walltime-slack. Add fdf_isphysical
      
      The fdf options max-walltime and max-walltime-slack should properly be
      specified with units (e.g. 2.5 hours), instead of what a single number
      interpreted as seconds.
      
      To maintain compatibility with previous usage, a new boolean function
      
       fdf_isphysical(label)
      
      has been added to the FDF library, to check whether units are given
      for the value of 'label' in the fdf file or not.
        ------------------------------------------------------------
        revno: 483.9.19
        author: Nick Papior <nickpapior@gmail.com>
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.0-aiida
        timestamp: Sat 2017-07-01 22:47:51 +0200
        message:
          Provide units for max-walltime and max-walltime-slack. Add fdf_isphysical
          
          The fdf options max-walltime and max-walltime-slack should properly be
          specified with units (e.g. 2.5 hours), instead of what a single number
          interpreted as seconds.
          
          To maintain compatibility with previous usage, a new boolean function
          
           fdf_isphysical(label)
          
          has been added to the FDF library, to check whether units are given for
          the value of 'label' in the fdf file or not.
------------------------------------------------------------
revno: 728 [merge]
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Sat 2017-07-01 22:58:50 +0200
message:
  Merged 4.0 r525
  
  (More robust treatment of nspin=4 in GGA XC routines)
  
  Only Src/SiestaXC/ggaxc.f had to be changed.
  Src/xc.f already contained the patch (save cosmetics)
  
  (Thanks to Ramon Cuadrado)
    ------------------------------------------------------------
    revno: 483.3.39 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.0
    timestamp: Sat 2017-07-01 22:37:46 +0200
    message:
      More robust treatment of nspin=4 in GGA XC routines
      
      In Src/SiestaXC/ggaxc.f, and in Src/xc.f, use a more robust
      determination of the angles and the derivatives.
      
      (Thanks to Ramon Cuadrado)
        ------------------------------------------------------------
        revno: 483.11.3 [merge]
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.0-xc
        timestamp: Sat 2017-07-01 15:52:17 +0200
        message:
          Merge: removal of redundant comments
            ------------------------------------------------------------
            revno: 483.12.1
            committer: Nick Papior <nickpapior@gmail.com>
            branch nick: 4.0-xc
            timestamp: Fri 2017-06-30 19:55:36 +0200
            message:
              Removed RC comments that were not needed, no code logic has changed
        ------------------------------------------------------------
        revno: 483.11.2
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.0-xc
        timestamp: Fri 2017-06-30 16:45:53 +0200
        message:
          More robust treatment of nspin=4 in SiestaXC/ggaxc.f
        ------------------------------------------------------------
        revno: 483.11.1
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.0-xc
        timestamp: Fri 2017-06-30 16:37:45 +0200
        message:
          More robust way to deal with nspin=4 in xc.f
------------------------------------------------------------
revno: 727 [merge]
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Sat 2017-07-01 15:42:49 +0200
message:
  Merged 4.0 r523+524
  
  Update the STM programs in Util/STM)
    ------------------------------------------------------------
    revno: 483.3.38
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.0
    timestamp: Sat 2017-07-01 15:28:08 +0200
    message:
      (log for r523) Update the STM programs in Util/STM
      
      (By mistake, r523 used a wrong commit log. This is the correct one)
      
      - Fix fftw plan bug in STM/ol-stm code
      
        Due to an oversight, the NX and NY dimensions were not interchanged
        in the call to the FFTW plan routine that uses the F2003 interface.
      
      - Use WFSX files as input for the STM/ol-stm program
      
        It is no longer necessary to convert the WFSX to an old-fashioned
        WFS file before using the program. This will save space and time.
      
      - Add 'stm-label' feature to STM/ol-stm program + cosmetics
        
        An optional label can be pasted in the name of the output
        files.
        Remove fossil files and update documentation.
      
      - Add test for si001-ldos. Extra lines in plstm
        
        Added a new test to compute the LDOS for the si001-H test, to
        exercise the 'simple' STM program STM/plstm
        
        In plstm, print a blank line after every set of x scans, so that
        gnuplot can work better in 'surface/contour' mode.
      
      - Add a new interpolation option 'poly' to macroave
        
        Macroave might be useful to determine automatically the right
        point at which the vacuum potential gets flat (of interest for
        STM/ol-stm operation).
        
        The 'spline' interpolation option can cause oscillations for
        functions with discontinuous derivatives. In these cases the
        'linear' option is more robust.
        
        The current implementation of the 'linear' option is quite obscure. A
        new option 'poly' has been introduced. It uses a routine derived from
        code by D.R. Hamann which implements general polynomial interpolation.
        For order=1, it can replace the 'linear' option. For now, pending an
        upgrade of the interface, 'poly' implements quadratic polynomial
        interpolation (subject to the same oscillations for non-smooth
        functions).
    ------------------------------------------------------------
    revno: 483.3.37 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.0
    timestamp: Fri 2017-06-30 16:01:29 +0200
    message:
      Add extra logging and control capabilities
      
      A number of extra control and logging features have been implemented
      to facilitate the use of Siesta within automated computational
      frameworks, notably the AiiDA platform.
      
      - A new file 'MESSAGES' holds a summary of warnings and possible errors.
      
        Calls to 'die' now print a line in MESSAGES with a 'FATAL' prefix, and
        then perform an orderly closing of the CML file, and flush stdout and
        stderr, before actually terminating the program.
      
        The routine 'message(level,str)' also prints an appropriate line in
        MESSAGES.
      
      - Optional termination if geometry is not converged
        
        If the flag 'Geometry.Must.Converge' is .true., the
        program will terminate if the geometry relaxation is
        not converged, before carrying out any final analysis.
      
      - Enhancements to the CML interface
      
        Add routine print_spin and call it at every geometry step. The final
        call in 'siesta_analysis' is preserved for backwards compatibility.
      
        Put energies in 'scf finalization' module in the CML file
      
        Write stress to CML file at each geometry step
      
        Close properly the CML stack before 'die'ing.
      
      - Add a simple interface to check wall-clock time
        
        A new module 'm_check_walltime' provides a routine
        'check_walltime' and exports variables 'walltime_max'
        and 'walltime_warning'.
        
        Users can request walltime control by means of the
        fdf variables:
        
        Max.Walltime N   # in seconds, default infinity
        Max.Walltime.Slack    # in seconds
        
        Typically, the first would be set automatically by inheritance
        from the queuing system or AiiDA script. The second should give
        an estimate of the time needed for cleanup operations. The default
        is 5 seconds.
        
        Currently, the 'check_walltime' routine is invoked at the end of
        every SCF step, and at the end of every geometry step.
      
      - Fixes for compilation
        
        Use a 'local_sys.{f,F}' file in Util programs and
        SiestaXC to decouple them from the extra functionality
        in the top-level sys.F file (particularly the CML closing
        operations).
        
        Remove the dependency of 'alloc.o' on 'debugmpi'.
        
        Add '.c' to .SUFFIXES in 'arch.make.in' 
      
      - Add arch.make suitable for fortran-mpi Docker image
      
        (Experimental)
        ------------------------------------------------------------
        revno: 483.10.6
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.0-stm
        timestamp: Fri 2017-06-02 17:48:55 +0200
        message:
          Add a new interpolation option 'poly' to macroave
          
          Macroave might be useful to determine automatically the right
          point at which the vacuum potential gets flat.
          
          The 'spline' interpolation option can cause oscillations for
          functions with discontinuous derivatives. In these cases the
          'linear' option is more robust.
          
          The current implementation of the 'linear' option is quite obscure. A
          new option 'poly' has been introduced. It uses a routine derived from
          code by D.R. Hamann which implements general polynomial interpolation.
          For order=1, it can replace the 'linear' option. For now, pending an
          upgrade of the interface, 'poly' implements quadratic polynomial
          interpolation (subject to the same oscillations for non-smooth
          functions).
        ------------------------------------------------------------
        revno: 483.10.5
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.0-stm
        timestamp: Thu 2017-06-01 15:25:51 +0200
        message:
          Add 'stm-label' feature to STM program + cosmetics
          
          An optional label can be pasted in the name of the output
          files.
          Remove fossil files and update documentation.
        ------------------------------------------------------------
        revno: 483.10.4
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.0-stm
        timestamp: Wed 2017-05-31 11:14:05 +0200
        message:
          Add test for si001-ldos. Extra lines in plstm
          
          Added a new test to compute the LDOS for the si001-H test, to
          exercise the 'simple' STM program.
          
          In plstm, print a blank line after every set of x scans, so that
          gnuplot can work better in 'surface/contour' mode.
        ------------------------------------------------------------
        revno: 483.10.3
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.0-stm
        timestamp: Mon 2017-05-08 19:17:07 +0200
        message:
          Update manual
        ------------------------------------------------------------
        revno: 483.10.2
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.0-stm
        timestamp: Sun 2017-02-19 02:42:12 +0100
        message:
          Fix fftw plan bug
        ------------------------------------------------------------
        revno: 483.10.1
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.0-stm
        timestamp: Sun 2017-02-19 02:35:38 +0100
        message:
          Use wfsx instead of wfs
------------------------------------------------------------
revno: 726 [merge]
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Sat 2017-07-01 15:23:38 +0200
message:
  Merged 4.0 r522
  
  (Extra logging and control features)
    ------------------------------------------------------------
    revno: 725.1.7
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1
    timestamp: Sat 2017-07-01 14:43:31 +0200
    message:
      Update building of ProtoNEB and SimpleTest
    ------------------------------------------------------------
    revno: 725.1.6
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1
    timestamp: Sat 2017-07-01 14:39:05 +0200
    message:
      Update building of TS/tshs2tshs
    ------------------------------------------------------------
    revno: 725.1.5
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1
    timestamp: Sat 2017-07-01 14:37:34 +0200
    message:
      Update building of TS/ts2ts
    ------------------------------------------------------------
    revno: 725.1.4
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1
    timestamp: Sat 2017-07-01 14:35:18 +0200
    message:
      Update building of SpPivot
    ------------------------------------------------------------
    revno: 725.1.3
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1
    timestamp: Sat 2017-07-01 14:33:09 +0200
    message:
      Update building of Grimme
    ------------------------------------------------------------
    revno: 725.1.2
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1
    timestamp: Sat 2017-07-01 14:29:11 +0200
    message:
      Update building of COOP
    ------------------------------------------------------------
    revno: 725.1.1 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1
    timestamp: Sat 2017-07-01 02:59:38 +0200
    message:
      First stage of merging 4.0-522 (aiida patch)
        ------------------------------------------------------------
        revno: 483.3.36 [merge]
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.0
        timestamp: Fri 2017-06-30 15:48:40 +0200
        message:
          Add extra logging and control capabilities
          
          A number of extra control and logging features have been implemented
          to facilitate the use of Siesta within automated computational
          frameworks, notably the AiiDA platform.
          
          - A new file 'MESSAGES' holds a summary of warnings and possible errors.
          
            Calls to 'die' now print a line in MESSAGES with a 'FATAL' prefix, and
            then perform an orderly closing of the CML file, and flush stdout and
            stderr, before actually terminating the program.
          
            The routine 'message(level,str)' also prints an appropriate line in
            MESSAGES.
          
          - Optional termination if geometry is not converged
            
            If the flag 'Geometry.Must.Converge' is .true., the
            program will terminate if the geometry relaxation is
            not converged, before carrying out any final analysis.
          
          - Enhancements to the CML interface
          
            Add routine print_spin and call it at every geometry step. The final
            call in 'siesta_analysis' is preserved for backwards compatibility.
          
            Put energies in 'scf finalization' module in the CML file
          
            Write stress to CML file at each geometry step
          
            Close properly the CML stack before 'die'ing.
          
          - Add a simple interface to check wall-clock time
            
            A new module 'm_check_walltime' provides a routine
            'check_walltime' and exports variables 'walltime_max'
            and 'walltime_warning'.
            
            Users can request walltime control by means of the
            fdf variables:
            
            Max.Walltime N   # in seconds, default infinity
            Max.Walltime.Slack    # in seconds
            
            Typically, the first would be set automatically by inheritance
            from the queuing system or AiiDA script. The second should give
            an estimate of the time needed for cleanup operations. The default
            is 5 seconds.
            
            Currently, the 'check_walltime' routine is invoked at the end of
            every SCF step, and at the end of every geometry step.
          
          - Fixes for compilation
            
            Use a 'local_sys.{f,F}' file in Util programs and
            SiestaXC to decouple them from the extra functionality
            in the top-level sys.F file (particularly the CML closing
            operations).
            
            Remove the dependency of 'alloc.o' on 'debugmpi'.
            
            Add '.c' to .SUFFIXES in 'arch.make.in' 
          
          - Add arch.make suitable for fortran-mpi Docker image
          
            (Experimental)
            ------------------------------------------------------------
            revno: 483.9.18
            committer: Alberto Garcia <albertog@icmab.es>
            branch nick: 4.0-aiida
            timestamp: Fri 2017-06-30 10:48:45 +0200
            message:
              Remove contents of MESSAGES file at initialization
            ------------------------------------------------------------
            revno: 483.9.17 [merge]
            committer: Alberto Garcia <albertog@icmab.es>
            branch nick: 4.0-aiida
            timestamp: Fri 2017-06-30 10:31:34 +0200
            message:
              Sync to 4.0--521
            ------------------------------------------------------------
            revno: 483.9.16
            committer: Alberto Garcia <albertog@icmab.es>
            branch nick: 4.0-aiida
            timestamp: Mon 2017-05-15 15:06:32 +0200
            message:
              Enhance the MESSAGES interface
              
              A number of enhancements (design still fluid):
              
              -- Upon a termination due to time limit, the scf convergence
                 is also checked, and another (fatal) error can be raised.
              
              -- A similar check for geometry convergence in the time-limit
                 check in 'siesta_move'.
            ------------------------------------------------------------
            revno: 483.9.15
            committer: Alberto Garcia <albertog@icmab.es>
            branch nick: 4.0-aiida
            timestamp: Mon 2017-05-15 11:49:08 +0200
            message:
              Document walltime warnings. Set slack to 5 seconds
            ------------------------------------------------------------
            revno: 483.9.14
            committer: Alberto Garcia <albertog@icmab.es>
            branch nick: 4.0-aiida
            timestamp: Wed 2017-03-22 12:03:31 +0100
            message:
              Add arch.make suitable for fortran-mpi Docker image
            ------------------------------------------------------------
            revno: 483.9.13
            committer: Alberto Garcia <albertog@icmab.es>
            branch nick: 4.0-aiida
            timestamp: Sun 2017-03-12 02:08:18 +0100
            message:
              Fixes for compilation
              
              Use a 'local_sys.{f,F}' file in Util programs and
              SiestaXC to decouple them from the extra functionality
              in the top-level sys.F file (particularly the CML closing
              operations).
              
              Remove the dependency of 'alloc.o' on 'debugmpi'.
              
              Add '.c' to .SUFFIXES in 'arch.make.in' 
            ------------------------------------------------------------
            revno: 483.9.12
            committer: Alberto Garcia <albertog@icmab.es>
            branch nick: 4.0-aiida
            timestamp: Sun 2017-03-12 00:41:00 +0100
            message:
              Remove empty directories. Put README in Obj
            ------------------------------------------------------------
            revno: 483.9.11
            committer: Alberto Garcia <albertog@icmab.es>
            branch nick: 4.0-aiida
            timestamp: Sun 2017-03-12 00:39:35 +0100
            message:
              Shorten a line in siesta_forces
            ------------------------------------------------------------
            revno: 483.9.10
            committer: Alberto Garcia <albertog@icmab.es>
            branch nick: 4.0-aiida
            timestamp: Fri 2017-03-10 12:49:48 +0100
            message:
              Add mnemonic codes scf and time warnings and errors
            ------------------------------------------------------------
            revno: 483.9.9
            committer: Alberto Garcia <albertog@icmab.es>
            branch nick: 4.0-aiida
            timestamp: Wed 2017-03-08 10:53:39 +0100
            message:
              Remove cml dependency in SiestaXC
            ------------------------------------------------------------
            revno: 483.9.8
            committer: Alberto Garcia <albertog@icmab.es>
            branch nick: 4.0-aiida
            timestamp: Wed 2017-03-08 10:32:06 +0100
            message:
              Add cml in SiestaXC
            ------------------------------------------------------------
            revno: 483.9.7
            committer: Alberto Garcia <albertog@icmab.es>
            branch nick: 4.0-aiida
            timestamp: Sun 2017-03-05 20:42:40 +0100
            message:
              Optional termination if geometry is not converged
              
              If the flag 'Geometry.Must.Converge' is .true., the
              program will terminate if the geometry relaxation is
              not converged, before carrying out any final analysis.
            ------------------------------------------------------------
            revno: 483.9.6
            committer: Alberto Garcia <albertog@icmab.es>
            branch nick: 4.0-aiida
            timestamp: Sun 2017-03-05 17:38:31 +0100
            message:
              Add routine print_spin and call it at every geometry step
              
              The final call in 'siesta_analysis' is preserved for backwards
                compatibility.
            ------------------------------------------------------------
            revno: 483.9.5
            committer: Alberto Garcia <albertog@icmab.es>
            branch nick: 4.0-aiida
            timestamp: Sat 2017-03-04 01:04:01 +0100
            message:
              Put energies in 'scf finalization' module in the CML file
            ------------------------------------------------------------
            revno: 483.9.4
            committer: Alberto Garcia <albertog@icmab.es>
            branch nick: 4.0-aiida
            timestamp: Fri 2017-03-03 11:51:05 +0100
            message:
              Write stress to CML file at each geometry step
            ------------------------------------------------------------
            revno: 483.9.3
            committer: Alberto Garcia <albertog@icmab.es>
            branch nick: 4.0-aiida
            timestamp: Fri 2017-02-24 12:43:01 +0100
            message:
              Add a simple interface to check wall-clock time
              
              A new module 'm_check_walltime' provides a routine
              'check_walltime' and exports variables 'walltime_max'
              and 'walltime_warning'.
              
              Users can request walltime control by means of the
              fdf variables:
              
              Max.Walltime N   # in seconds, default infinity
              Max.Walltime.Slack    # in seconds
              
              Typically, the first would be set automatically by inheritance
              from the queuing system or AiiDA script. The second should give
              an estimate of the time needed for cleanup operations. By default,
              it is one minute per 100 atoms, with a minimum of 10 seconds.
              
              Currently, the 'check_walltime' routine is invoked at the end of
              every SCF step, and at the end of every geometry step.
            ------------------------------------------------------------
            revno: 483.9.2
            committer: Alberto Garcia <albertog@icmab.es>
            branch nick: 4.0-aiida
            timestamp: Tue 2017-02-21 17:12:49 +0100
            message:
              Close properly the CML stack
            ------------------------------------------------------------
            revno: 483.9.1
            committer: Alberto Garcia <albertog@icmab.es>
            branch nick: 4.0-aiida
            timestamp: Tue 2017-02-21 15:47:11 +0100
            message:
              Use MESSAGES file as summary
------------------------------------------------------------
revno: 725
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2017-06-29 21:35:41 +0200
message:
  Fixed a bug when TBT.Projs.Only was true
  
  This fix is only for tbtrans
------------------------------------------------------------
revno: 724
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2017-06-23 22:12:34 +0200
message:
  Added error when doing non-colinear or spin-orbit with LDA+U
  
  There are (@R. Robles) some terms missing in the LDA+U
  implementation when non-colinear or spin-orbit coupling is used.
  This has been added to the documentation as well.
  
  Secondly, the setup_hamiltonian now fully uses the spin type.
------------------------------------------------------------
revno: 723
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2017-06-23 21:49:18 +0200
message:
  Moved globalization of Eso energy into spinorb
  
  To make it easier to use the Eso globalization is
  now performed in the spinorb routine.
  
  Also implemented the spin type in setup_H0
------------------------------------------------------------
revno: 722
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2017-06-23 21:41:12 +0200
message:
  Changed preprocessor NO_MRRR to MRRR, default not compiled in
  
  Now the MRRR routines are defaulted not to be compiled in.
  If one wishes to use these faster methods one should use the
  preprocessor flag:
   -DSIESTA__MRRR
  which enables the necessary routines.
------------------------------------------------------------
revno: 721
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2017-06-23 09:25:11 +0200
message:
  Updated the release notes for 4.1-b3
------------------------------------------------------------
revno: 720
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2017-06-22 11:26:17 +0200
message:
  Fixed EDM spin-orbit coupling <>.nc file
  
  The spin components for the EDM matrix vs. DM is not the
  same for the spin-orbit case.
  Hence a fix was required to make sure they could be obtained correctly.
------------------------------------------------------------
revno: 719
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2017-06-19 14:07:47 +0200
message:
  Fixed spin-orbit coupling <>.nc file
  
  The spin components for the matrices vs. the real-space grid are not the
  same for the spin-orbit case.
  Hence a fix was required to make sure they could be obtained correctly.
------------------------------------------------------------
revno: 718
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2017-06-15 21:05:36 +0200
message:
  Fixed flook commit where I erroneously deleted a use statement
  
  Also forced h_chain to not run with MPI
------------------------------------------------------------
revno: 717
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2017-06-15 12:14:56 +0200
message:
  Fixed LTO compilation of the fdict and ncdf libraries
------------------------------------------------------------
revno: 716
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2017-06-15 11:38:26 +0200
message:
  Updated manual for the tests runs in the Makefile
------------------------------------------------------------
revno: 715
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2017-06-13 21:08:33 +0200
message:
  Removed Examples/TranSiesta directory, fixed ts2ts, +doc
  
  Removed the Examples/TranSiesta directory, the example would
  never work in the new TranSiesta because of a too small electrode.
  
  The ts2ts now also copies the old Neigen flag for tbtrans to the
  new specification.
  
  Added more documentation about the Lua interface.
------------------------------------------------------------
revno: 714
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2017-06-13 07:40:38 +0200
message:
  Fixed print-out of orbital currents with TRS
  
  I.e. now it only prints if the option is wrong.
------------------------------------------------------------
revno: 713
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Sun 2017-06-11 12:48:33 +0200
message:
  Enabled Lua calls with the new mixing routines
  
  The Lua-interface to changing the mixing weight etc. was broken
  because of the new mixing routines added.
  This has now been re-enabled because it seems like a very useful feature.
  
  A couple of requirements were needed to be fulfilled:
  
  1. The fdict variable required an update to enable pointers
     to character arrays (of len=1).
  
  2. The ncdf library then also required an update.
  
  3. The internals of the character retrieving functions needed adaption
     of the new method in fdict.
  
  Now this is much better and easier to handle.
  
  Two examples are now for the "pure" lua interface (not flos):
  
  - lua_h2o
    An adaptive change of the mixing weight per iteration.
    This is in an MD environment and thus it resets it every
    MD step.
    
  - lua_si111
    A mixing method changer based on the convergence criteria.
    This will change the mixer to more aggressive methods at
    certain convergence levels.
  
  Added a example explanations in the documentation.
------------------------------------------------------------
revno: 712
fixes bug: https://launchpad.net/bugs/1697142
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Sat 2017-06-10 11:48:05 +0200
message:
  Fixed double linker libraries in the shipped *.make files
  
  When using the COMB_LIBS files we should not add them to the LIBS
  variable (they are added manually).
  This has been fixed in gfortran.make and intel.make.
------------------------------------------------------------
revno: 711
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2017-05-23 00:06:14 +0200
message:
  Updated documentation with indices for MD.TypeOfRun
------------------------------------------------------------
revno: 710
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2017-05-19 21:29:35 +0200
message:
  Fixed Makefile for fdict and ncdf in tshs2tshs
  
  Changes to fdict and ncdf had not been propageted to this utility.
  I have done a:
    grep fdict Util/**/*
  folder and it should now compile everything fine.
------------------------------------------------------------
revno: 709
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2017-05-19 15:38:14 +0200
message:
  TBT clarified projection output and updated manual for tbtrans
  
  Added more information in the output when projection regions error
  out.
  Also added names to the orbital regions in tbtrans.
------------------------------------------------------------
revno: 708
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2017-04-25 22:54:59 +0200
message:
  Fixed clean Makefile target when no compilation has been performed
  
  The makefile was performing a clean in a possibly non-existing
  directory. It now checks correctly for it and only then proceeds.
  
  Updated all Makefiles
------------------------------------------------------------
revno: 707
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2017-04-21 23:10:18 +0200
message:
  Fixed an out-standing bug related to bond-currents and dH (TBT)
  
  The delta-H method in TBtrans has been revised and updated.
  
  Now dH adds e ^ { i k.R } phases for consistency. If people use it
  for rescaling coupling elements this makes sense, if it is used
  for more advanced uses (where the phases shouldn't be there) the
  users should be familiar with this and add the opposite phases.
  
  Secondly, the bond-currents are now defaulting to adding the dH
  elements to the bond-currents. I.e. the same equation for H
  is now also applied with dH. This is controlled via the flag
  
    TBT.dH.Current.Orb
  
  which defaults to True when bond-currents are requested.
  
  The documentation has been updated to reflect the changes.
------------------------------------------------------------
revno: 706 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2017-04-21 22:15:22 +0200
message:
  Merged 4.0 r521
    ------------------------------------------------------------
    revno: 483.3.35
    fixes bug: https://launchpad.net/bugs/1685169
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Fri 2017-04-21 22:13:48 +0200
    message:
      Fixed initialization of interpolation variable and reduction variable
      
      This fixes lp:1685169.
      The bug occurs when siesta has been compiled with:
         -ffpe-trap=invalid,zero,overflow,underflow,denormal
      which signals an SIGFPE.
      Typically these things are hidden when compiling normally and one
      should, probably, not be concerned.
------------------------------------------------------------
revno: 705
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2017-04-04 21:14:36 +0200
message:
  Updated tbtrans makefile for ncdf compilation
  
  Same as r699 for tbtrans.
------------------------------------------------------------
revno: 704
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2017-04-04 17:26:16 +0200
message:
  Fixed ncdf compilation on non-gnu compilers
------------------------------------------------------------
revno: 703
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2017-04-03 21:10:18 +0200
message:
  Added remark of TBT.Projs.T requirement in tbtrans.tex
------------------------------------------------------------
revno: 702
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2017-03-30 14:24:04 +0200
message:
  Removed unnecessary stuff in Makefile
  
  Updated create_images.py script in flos_h2o_neb test.
------------------------------------------------------------
revno: 701
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2017-03-29 09:06:42 +0200
message:
  Updated flos-h2o-neb script and reference output with optimized flags
------------------------------------------------------------
revno: 700
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2017-03-29 08:33:08 +0200
message:
  Forgot to add the flos_h2o_neb reference output in r698
------------------------------------------------------------
revno: 699
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2017-03-29 08:26:02 +0200
message:
  Bugfix for compilation on weird shells, tabulator inserts are tricky
  
  Now we use printf instead of echo.
------------------------------------------------------------
revno: 698
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2017-03-29 08:22:45 +0200
message:
  Updated tests folder, added FLOS tests for LBFGS, FIRE and meshcutoff
  
  Added flos tests.
  To run the flos tests it is required that:
  1. SIESTA has been compiled with flook support
  2. flos has been installed by adding the library to the LUA_PATH
     environment variable.
  
  The new flos tests involve a:
   LBFGS relaxation with the H2O molecule
   FIRE relaxation with the H2O molecule
   MeshCutofff convergence with the H2O molecule
   NEB of rotation of H2O molecule in a two molecule setup (not enough vacuum
   , but useful enough for testing).
  
  all 3 are very fast and shows how a Lua implementation could
  be performed.
  
  This also required that the tests folder is updated.
  Now the tests are subdivided into specific tasks:
   tests_soc; all spin-orbit tests. These are typically
   	   very loong tests and require a long time to run.
   tests_flos; tests requiring flook and flos
   tests; everything else
  
  Later these may be extended.
------------------------------------------------------------
revno: 697 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2017-03-27 08:43:38 +0200
message:
  Merged fdict-ncdf branch, contains memory leak fixes
  
  This merge updates the shipped fdict and ncdf sources such that
  1. A pre-processor is not required
  2. Many bug-fixes related to memory leaks have been fixed
  3. Documentation updates.
    ------------------------------------------------------------
    revno: 687.1.3 [merge]
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-fdict-ncdf
    timestamp: Fri 2017-03-24 19:55:01 +0100
    message:
      Merged 4.1 r688-695
    ------------------------------------------------------------
    revno: 687.1.2
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-ncdf-fdict
    timestamp: Wed 2017-03-01 08:57:52 +0100
    message:
      Updated documentation to specify that the preprocessor is not needed
    ------------------------------------------------------------
    revno: 687.1.1
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-ncdf-fdict
    timestamp: Wed 2017-03-01 08:28:09 +0100
    message:
      Updated fdict and ncdf to packages with smeka build system
      
      This has several advantages,
      - updates can more easily be made to fdict and ncdf.
      - The pre-processed sources are shipped with the source
        and the build-system will automatically detect which flags
        requires what sources. I.e. CPP is not a prerequisite anymore.
------------------------------------------------------------
revno: 696 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2017-03-27 08:36:49 +0200
message:
  Merged install-scripts branch, contains installation scripts
  
  This merge enables easy installation of netcdf and flook for
  use in SIESTA.
    ------------------------------------------------------------
    revno: 695.1.1
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-scripts
    timestamp: Fri 2017-03-24 21:05:55 +0100
    message:
      Added scripts for installing netcdf-4 and flook libraries
      
      To aid the user experience I have added two scripts which enables
      easy installation of NetCDF with CDF4 compliance, and flook library.
      
      Both make SIESTA more userfriendly due to easier post-processing tools
      and easier MD, geometry relaxation algorithms.
------------------------------------------------------------
revno: 695
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2017-03-22 09:41:26 +0100
message:
  Enabled reading TS.Atoms.Buffer using a direct list
  
  This is just slightly easier than using a full block if
  the atoms are consecutive.
  Also updated documentation to reflect this.
------------------------------------------------------------
revno: 694
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2017-03-22 08:39:33 +0100
message:
  Fixed fixed-spin calculations when writing to XML
  
  There was a bug in writing the Efs array to the XML output.
  This has been fixed.
------------------------------------------------------------
revno: 693
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2017-03-15 22:04:04 +0100
message:
  Fixed running flook without a file
  
  Commit r692 introduced a bug. This is now fixed.
------------------------------------------------------------
revno: 692
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2017-03-15 21:38:29 +0100
message:
  Updated flook interaction with flos
  
  Now flos is easier to implement and the routines
  for interaction has been changed from:
    siesta_get/siesta_return
  to
    siesta.receive/siesta.send
  to reflect their nature.
  There were some problems with the return keyword.
------------------------------------------------------------
revno: 691
fixes bug: https://launchpad.net/bugs/1672084
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Sat 2017-03-11 21:45:13 +0100
message:
  Fixed sorting bug in tbtrans introduced in 588
  
  It affected all calculated quantities if these flags
  were true and the sparse pattern was not already sorted:
  TBT.DOS.A
  TBT.Current.Orb
------------------------------------------------------------
revno: 690
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2017-03-06 14:30:43 +0100
message:
  Fixed sequence of reading the TBT.k block/list now TBT.k is always preferred
------------------------------------------------------------
revno: 689
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2017-03-02 09:56:25 +0100
message:
  Removed unneeded pre-processor flag in tbt_tri_scat
  
  Now the orbital currents are always with - E * S for energy scaling.
  (Note, they were also before this commit)
------------------------------------------------------------
revno: 688
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2017-03-01 08:44:09 +0100
message:
  Removed unused variables in tbtrans files, and in m_ts_sparse
------------------------------------------------------------
revno: 687
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2017-02-28 10:54:23 +0100
message:
  Bugfix in fdict string deletion
  
  Fixed a deletion of iso_var_str.
------------------------------------------------------------
revno: 686
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2017-02-27 15:20:52 +0100
message:
  Bugfix in documentation of tbtrans
  
  Nomenclature of projections was inconsistent.
------------------------------------------------------------
revno: 685 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2017-02-27 09:02:56 +0100
message:
  Merged 4.0 r520
    ------------------------------------------------------------
    revno: 483.3.34
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Mon 2017-02-27 09:01:37 +0100
    message:
      Updated Eig2DOS, now it is more consistent with the gnubands.f90 file
      
      Changed:
      -m => -e (makes more sense that small e is lower energy bound as used in gnubands)
      -M => -E (makes more sense that small e is lower energy bound as used in gnubands)
        (note that -m and -M are still workable)
      the old -e is not used anymore, however, if -d (debug) is enabled it works the same.
      -F is now equivalent to -f (as -F is used in gnubands).
      
      It now also checks whether the supplied KP file exists.
------------------------------------------------------------
revno: 684 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2017-02-21 08:39:26 +0100
message:
  Merged 4.0 r519
    ------------------------------------------------------------
    revno: 483.3.33
    fixes bug: https://launchpad.net/bugs/1666428
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Tue 2017-02-21 08:36:32 +0100
    message:
      Forced ParallelOverK to false if non-collinear spin
      
      Now Diag.ParallelOverK is forced to .false. if non-collinear
      spin is used.
      
      This fixes lp:1666428
------------------------------------------------------------
revno: 683 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2017-02-20 15:37:39 +0100
message:
  Merged 4.0 r518
    ------------------------------------------------------------
    revno: 483.3.32
    fixes bug: https://launchpad.net/bugs/1666219
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Mon 2017-02-20 15:34:22 +0100
    message:
      Fixed averaging of the electri-field energy contribution with GridCellSampling
      
      The energy from the external electric field was not added. It does not 
      matter for a true electric field, however when a dipole correction is
      in place the electric field may vary slightly and introduce corrections
      to the energy. This is now fixed.
      
      This fixes lp:1666219
------------------------------------------------------------
revno: 682
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2017-02-20 12:03:43 +0100
message:
  Added error-messages from lua
  
  Now lua-runs are fully compatible and will kill siesta if something
  is wrong.
------------------------------------------------------------
revno: 681 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2017-02-20 10:02:08 +0100
message:
  Merged 4.0 r517
    ------------------------------------------------------------
    revno: 483.3.31
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Sun 2017-02-19 20:26:15 +0100
    message:
      Memory leak fixed in spher_harm.f
      
      A memory leak was discovered using valgrind:
        valgrind --track-origins=yes --leak-check=full siesta
      
      A pointer array was nullified and re-allocated in certain cases
------------------------------------------------------------
revno: 680
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2017-02-20 10:01:29 +0100
message:
  Fixed memory leaks in parse.F90 and fdf.F90
  
  A memory leak when parsing lists, and one when reading in from
  %include files were detected and fixed. (thanks valgrind)
    valgrind --track-origins=yes --leak-check=full
  is really helpful.
------------------------------------------------------------
revno: 679
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2017-02-20 09:46:20 +0100
message:
  Fixed memory leaks in fdict, and transiesta related routines
  
  Several memory leaks was detected using valgrind, nearly all
  have been fixed.
  
  Currently, there is still a memory leak regarding the dictionary
  when concatenating. However, it is 2 bytes. I will amend a fix for this
  in a later revision (track fdict on github for when the fix will be
  available).
------------------------------------------------------------
revno: 678
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2017-02-17 22:45:50 +0100
message:
  Added Lua-error messages
  
  Now siesta will die, if Lua has an error.
  This prohibits running loose.
------------------------------------------------------------
revno: 677 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2017-02-17 14:28:06 +0100
message:
  Merged 4.0 r516
    ------------------------------------------------------------
    revno: 483.3.30
    fixes bug: https://launchpad.net/bugs/1665294
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Fri 2017-02-17 14:17:03 +0100
    message:
      Work around reshape in mesh3d for SiestaXC
      
      This fixes: lp:1665294
      
      Instead of doing reshape, we implement direct loops with
      an interface for copying, and one for adding.
      This should limit the heap memory consumption.
      
      I have tested this on 10 of the tests in the test directory,
      with no changes (however, only on 2 cores).
      Before releasing 4.0.1 we should rerun all tests.
------------------------------------------------------------
revno: 676 [merge]
fixes bug: https://launchpad.net/bugs/1656273
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Fri 2017-02-17 12:15:11 +0100
message:
  Merge 4.0-515 (Bader fix)
    ------------------------------------------------------------
    revno: 483.3.29 [merge]
    fixes bug: https://launchpad.net/bugs/1656273
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.0
    timestamp: Fri 2017-02-17 11:12:00 +0100
    message:
      Fix bug #1656273: Inappropriate model core charges for Bader analysis
      
      Use always a gaussian-like model function to simulate the charge of
      the core electrons that is added to the pseudo charge for Bader
      analysis. The previous method, based on re-scaling chlocal, could
      sometimes introduce spurious local maxima in the total charge density
      that confuse the Bader algorithm.
      
      (Thanks to Seyed Mohammad Tabatabaei for reporting the issue)
      
      Also, add a new option 'Analyze.Charge.Density.Only', with which the
      program generates charge density files and computes partial atomic
      charges (Hirshfeld, Voronoi, Bader) from the information in the input
      density matrix, and stops.  This is useful to analyze the properties
      of the charge density without a diagonalization step (just with a
      pre-existing density-matrix), and with a user-selectable mesh cutoff.
        ------------------------------------------------------------
        revno: 483.8.3
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.0-bader
        timestamp: Mon 2017-01-23 17:29:14 +0100
        message:
          Add option to analyze charge density and stop
        ------------------------------------------------------------
        revno: 483.8.2
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.0-bader
        timestamp: Mon 2017-01-23 17:18:35 +0100
        message:
          Put fake core charge on hydrogens
        ------------------------------------------------------------
        revno: 483.8.1
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.0-bader
        timestamp: Mon 2017-01-23 15:14:53 +0100
        message:
          New algorithm. No hydrogens
------------------------------------------------------------
revno: 675
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2017-02-14 09:24:03 +0100
message:
  Bugfix for 2-electrode calculations with transport along 2nd axis
  
  The Vha fix was wrongly calculated.
  Also, added printout of unit for H tolerance in TS.
------------------------------------------------------------
revno: 674
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2017-02-08 20:44:28 +0100
message:
  Change of mix_scf_first based on DM input
  
  Based on a couple of cases where the DM would converge but would
  have some memory of the initial (previous) DM, we have decided to
  only allow mixing the first SCF step IFF the DM is filled with
  atomic data, or if the read in DM has a different charge than it
  is supposed to.
  This should yield a better converged final DM and thus, forces.
------------------------------------------------------------
revno: 673
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2017-02-06 19:49:41 +0100
message:
  Added systemlabel to lua handles
  
  Sadly the string does not allow pass by reference, so
  in case the dictionary is deleted it should nullify non-char
  elements. Good thing for now is that the siesta-dicts
  are static.
------------------------------------------------------------
revno: 672
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Sun 2017-02-05 21:15:55 +0100
message:
  Clarified mixing step when linear mixing is started
  
  The mixing algorithm behaved correctly when having a linear
  mixer, however it erroneously ran the accumulation step even
  if the # of saved steps was 0. This has now been fixed.
------------------------------------------------------------
revno: 671 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2017-02-03 11:38:11 +0100
message:
  Merged 4.0 r513-514
    ------------------------------------------------------------
    revno: 483.3.28
    fixes bug: https://launchpad.net/bugs/1661562
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Fri 2017-02-03 11:31:06 +0100
    message:
      Added check for space in SystemLabel, fixes lp:1661562
      
      Now SIESTA dies if the systemlabel has a space in it.
    ------------------------------------------------------------
    revno: 483.3.27
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Thu 2017-02-02 12:01:48 +0100
    message:
      Differences between tbtrans and tbtrans_rep
      
      This fixes some differences reported between the
      tbtrans and tbtrans_rep codes.
      Essentially the difference was due to the integration points
      which were not distributed equivalently in the two examples.
      Now the contours are equivalent. There are still differences
      but those may be "ironed" out by increasing the number of
      integration points. So these are merely numerical artefacts.
      
      Secondly, the tbtrans_rep output printed energies in eV but
      the DOS was in 1/Ry, this is now fixed. Although it should not
      matter because it is the relative values that are important.
------------------------------------------------------------
revno: 670
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2017-02-03 10:47:57 +0100
message:
  Updated release.sh script in Docs
  
  Now there are more information on how to create a release.
------------------------------------------------------------
revno: 669
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2017-02-03 10:22:15 +0100
message:
  Fixed printout of suggested k-point sampling for electrode
  
  The suggested k-point sampling for electrodes was not enforcing
  the high k-point sampling in the semi-infinite direction.
------------------------------------------------------------
revno: 668
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2017-02-03 09:48:49 +0100
message:
  Fixes propagation calculation of the T.Out quantity
  
  The calculation of Tr[G.Gamma] using the propagation method
  was erroneous. This has been fixed (checked against the column
  spectral calculation, yay for two methods).
  
  Allowed dipole corrections in 1-electrode calculations
  because they will most likely be slabs and never an applied
  field. Hence the dipole correction may be needed along the
  semi-infinite direction.
  
  Updated tbtrans documentation to indicate what files are generated
  from which options. Added explanation of the aggregate transmission
  value.
------------------------------------------------------------
revno: 667
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2017-02-02 16:36:51 +0100
message:
  Added even more variables to the siesta_dictionaries
  
  This enables more communication with flos
------------------------------------------------------------
revno: 666
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2017-02-01 20:35:30 +0100
message:
  Changed default of WriteH to false
  
  Now siesta does not write out these files:
    H_DMGEN/H_MIXED
  They are mainly intended for testing use and not explicitly
  usable for regular users.
  
  See discussion here:
  https://code.launchpad.net/~nickpapior/siesta/siesta-forces-cleanup/+merge/315621
  
  Also updated documentation regarding these aspects.
------------------------------------------------------------
revno: 665
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2017-02-01 13:39:31 +0100
message:
  Almost finalized the flook interoperability
  
  Added documentation of the Lua scripting capability.
  In the documentation I have added a link to the flos library
  which already implements a few enhancements over the previous things.
  
  Added a new state in Lua, INIT_MD which is required to be able to
  do MeshCutoff convergences, this required the mesh cut-off to be retrieved
  from setup_H0.
  
  Added target attribute to the siesta-dictionary to ensure they are passed by
  reference.
  
  Added Mesh.Cutoff.Minimum and Mesh.Cutoff.Used.
  
  Moved the SCF_LOOP state to be just after mixing has been performed.
  
  Added the new states to the h2o_lua example.
------------------------------------------------------------
revno: 664 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2017-01-31 09:43:09 +0100
message:
  Merged 4.0 r512
    ------------------------------------------------------------
    revno: 483.3.26
    fixes bug: https://launchpad.net/bugs/1660553
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Tue 2017-01-31 09:31:37 +0100
    message:
      Changed a touch statement to prevent certain crashes
      
      Now the creation of the 0_NORMAL_EXIT file is made in
      pure fortran which should prohibit certain failures.
      This should fix: lp:1660553
------------------------------------------------------------
revno: 663
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2017-01-31 09:39:47 +0100
message:
  Updated siesta_dicts options for interacting with mesh
  
  Now all Grid.* has been updated to Mesh.*. In additon
  the MeshCutoff is now Mesh.Cutoff.
  
  Also added the k-point sampling to enables this in Lua
  calls.
------------------------------------------------------------
revno: 662
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2017-01-27 19:03:40 +0100
message:
  Fixed siesta dictionary for the flook interaction
  
  Now the initial and final movements can be accessible
  with:
  
     MD.Steps.First
     MD.Steps.Last
------------------------------------------------------------
revno: 661
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2017-01-27 15:21:44 +0100
message:
  Fixed coordinate exchanges to LUA and added a bunch more
  
  In the LUA hook one now has access to the unit conversion
  table:
  
    siesta.Units
  
  which contains all the unit conversions used internally in
  siesta.
  
  Added all the tolerance variables to the siesta dictionaries
  for communicating with lua
  
  A bug was found for communicating the coordinates from siesta
  to lua. When a supercell calculation was performed the xa(:,1:na_s)
  was sent, while it should only be xa(:,1:na_u). This has been fixed.
  
  Minor fixes in the usage of the options in siesta_options and read_options
  The default variable was not really used, and has been removed.
------------------------------------------------------------
revno: 660
fixes bug: https://launchpad.net/bugs/1646118
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2017-01-26 10:30:17 +0100
message:
  Made transiesta and tbtrans quit if the transfer matrix is 0
  
  If the user supplies an electrode where the transfer matrix is 0
  transiesta and tbtrans will now die, regardless of whether the user
  wants this.
  In fact, we could allow this by treating it as a molecular end, however
  it will then not be a reservoir.
  This sanity check should prevent users from doing wrong calculations.
  
  Also fixed print-out of electrode names if options are inconsistent in
  m_ts_electype.
------------------------------------------------------------
revno: 659
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2017-01-26 10:11:21 +0100
message:
  Updated documentation fixes lp:1646566
  
  Now it is clear how the initial spin-configuration is
  applied.
------------------------------------------------------------
revno: 658
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2017-01-26 08:26:19 +0100
message:
  Added more energies to the siesta-dictionary
  
  They are now available in the LUA calls as well.
------------------------------------------------------------
revno: 657
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2017-01-26 08:07:35 +0100
message:
  In lua md we now allow cell relaxations
  
  When doing LUA MD these variables are now available:
   MD.Relax.CellOnly
   MD.Relax.Cell
  which may be used to identify how the relaxation of the
  cell is requested.
  
  If one sets the cell to 0 in the LUA code siesta will
  now automatically calculate a new cell-size.
  
  Added write-out of the XV file in LUA-MD.
------------------------------------------------------------
revno: 656
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2017-01-25 22:30:25 +0100
message:
  Fixed displacement vector for elec-hartree plane
  
  When the electrode plane could not find any points inside
  the unit-cell a displacement vector is printed to help
  the user moving all atoms. The vector printed could in certain
  cases be wrong.
  This is now fixed.
------------------------------------------------------------
revno: 655 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2017-01-25 19:45:49 +0100
message:
  Merged 4.0 r511
    ------------------------------------------------------------
    revno: 483.3.25
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Wed 2017-01-25 19:38:03 +0100
    message:
      Ensured the transport points are using the mid-rule
      
      Previously it was the left rule which is not optimal.
------------------------------------------------------------
revno: 654
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2017-01-25 12:59:37 +0100
message:
  Fixed tbtrans calculation of polarized calculations without TBT.Spin
  
  I had mistakenly pointed to an empty pointer in case of the second spin
  channel when doing polarized calculations.
  Now this is fixed.
------------------------------------------------------------
revno: 653 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2017-01-25 11:42:39 +0100
message:
  Merged 4.0 r510
  
  This merge is a no-op, the fix was already applied (erronously
  by me).
    ------------------------------------------------------------
    revno: 483.3.24
    fixes bug: https://launchpad.net/bugs/1658518
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Wed 2017-01-25 11:40:33 +0100
    message:
      Fixed bug related to PGI compiler
      
      A list of derived type was public, whereas the derived type was
      private. This is not allowed.
      
      Fixes lp:1658518
------------------------------------------------------------
revno: 652
fixes bug: https://launchpad.net/bugs/1658518
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2017-01-25 10:50:50 +0100
message:
  Fixed bug related to PGI compiler
  
  A list of derived type was public, whereas the derived type was
  private. This is not allowed.
  
  Fixes lp:1658518
------------------------------------------------------------
revno: 651
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2017-01-25 10:42:41 +0100
message:
  Fixed hartree plane with 1 electrode calculations
  
  Now transiesta allows hartree-plane for 1 electrode calculations
------------------------------------------------------------
revno: 650
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2017-01-25 09:35:39 +0100
message:
  Allowed tselecs.sh to create input for 1 electrode (never a bias)
------------------------------------------------------------
revno: 649
fixes bug: https://launchpad.net/bugs/1658520
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2017-01-24 19:43:31 +0100
message:
  Fixed g95 compilation, fixes r632 and lp:1658520
  
  Apparently g95 does not allow intrinsic interfaces with
  optional arguments named the same as the argument in the intrinsic
  interface:
     size(..., dim)
  where dim is an optional argument in the calling routine is not 
  allowed. Basic work-around is to do:
     ldim = dim
     size(..., ldim)
  and it works.
------------------------------------------------------------
revno: 648
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2017-01-24 19:37:15 +0100
message:
  Updated dictionaries which may be passed to lua
  
  The flook dictionaries have been updated. Now one
  can also pass back and forth the stress tensor.
  TODO: fix the problem of changing the cell-vectors
  such that one can do external cell-relaxations.
------------------------------------------------------------
revno: 647 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2017-01-19 07:45:43 +0100
message:
  Merged 4.0 r509
    ------------------------------------------------------------
    revno: 483.3.23
    fixes bug: https://launchpad.net/bugs/1657584
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Thu 2017-01-19 07:44:08 +0100
    message:
      Fixed checking the correct reals in ProjectedDensityOfStates
      
      This is necessary as the fdf_bvalues where not differentiating 
      between reals and integers. However, there is a specific
      integer read after reals which forces the reals to be read as reals.
      
      This fixes lp:1657584
------------------------------------------------------------
revno: 646
fixes bug: https://launchpad.net/bugs/1657484
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2017-01-18 17:02:57 +0100
message:
  Fixed OMP statement when transfering to F90
  
  Forgot an ampersand for contiunation line,
  
  fixes lp:1657484
------------------------------------------------------------
revno: 645
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2017-01-18 11:26:51 +0100
message:
  Moved normalize_DM.F to normalize_DM.F90
  
  Updated to fortran 90 for the normalize_DM code.
------------------------------------------------------------
revno: 644
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2017-01-18 11:18:19 +0100
message:
  Fixed a bug in normalize_DM
  
  Since the SO merge the normalize_DM has only normalized the
  first 4 components. Since r632 it only normalized the
  first 2.
  
  Now everything is normalized.
------------------------------------------------------------
revno: 643
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2017-01-18 09:18:31 +0100
message:
  Changed maxk to nkpnt and implemented spin-type in siesta_init
  
  The maxk variable was dubious and not consistent throughout the 
  code. Now we have removed maxk to only rely on the kpoint_grid
  nkpnt.
------------------------------------------------------------
revno: 642
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2017-01-18 08:39:04 +0100
message:
  Fixed initial spin printout
  
  The size of the DM matrix was not correctly estimated.
  Now it loops over all orbitals as it should.
------------------------------------------------------------
revno: 641
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2016-12-29 16:45:19 +0100
message:
  Updated Makefile depedencies
------------------------------------------------------------
revno: 640
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2016-12-29 11:36:10 +0100
message:
  Updated citation for latest transiesta article
------------------------------------------------------------
revno: 639
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2016-12-29 11:12:45 +0100
message:
  Updated shipped blas and lapack to 3.7.0
  
  Fixed a few small bugs for compatibility in the script
  that creates the lapack/blas sources.
------------------------------------------------------------
revno: 638
fixes bug: https://launchpad.net/bugs/1652548
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2016-12-27 12:08:17 +0100
message:
  Bug in restructdSpData2D due to no interface
  
  In the recent merge r632 there was left out an interface for
  the subroutine. This meant that the optional flag was never
  really optional, but set to a non-initialized integer.
  The fix is to wrap the routine in a module.
  
  Fixes: lp:1652548
------------------------------------------------------------
revno: 637
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2016-12-22 09:20:08 +0100
message:
  Added developer version of manual
  
  The developer version of the manual should only be build
  by persons interested in further extending the siesta code
  and wishes to understand the data-structures and internals
  of siesta more intimately.
  
  Currently there are no additions to the developer version.
------------------------------------------------------------
revno: 636
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2016-12-21 12:21:28 +0100
message:
  Fixed bugs in custom settings for the mixer
  
  Fixed all known bugs in the mixer routines
------------------------------------------------------------
revno: 635
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2016-12-20 10:09:39 +0100
message:
  Fixed tbtrans documentation about hybrid parallel
  
  The mpirun command was wrong
------------------------------------------------------------
revno: 634
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2016-12-16 15:31:45 +0100
message:
  Merged tbtrans fixes and documentation update
  
  This fixes lp:1649774
------------------------------------------------------------
revno: 633 [merge]
fixes bug: https://launchpad.net/bugs/1649774
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2016-12-14 11:20:15 +0100
message:
  Merged tbtrans fixes and documentation update
  
  This fixes lp:1649774
    ------------------------------------------------------------
    revno: 632.1.3
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-tbt
    timestamp: Wed 2016-12-14 11:19:06 +0100
    message:
      Updated manual for tbtrans
    ------------------------------------------------------------
    revno: 632.1.2
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-tbt
    timestamp: Wed 2016-12-14 11:00:44 +0100
    message:
      Added quick-sort algorithm
      
      - The qsort implemented by Grima forced one to accept
        the permutation table (which is not always wanted).
        I have added a quick-sort to the intrinsic_missing
        module.
        Probably this should be changed to the smoothsort algorithm
        which works really well with partially sorted arrays.
      
      - Fix for comparison of the electrode name in the pivoting
        algorithm (lcase was not enforced).
      
      - Message clean-up in tbtrans
    ------------------------------------------------------------
    revno: 632.1.1
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-tbt
    timestamp: Wed 2016-12-14 08:06:15 +0100
    message:
      Fixed fan/front for ts-pivoting
      
      - The fan/front method of pivoting was not working as expected
        and could not be used with one electrode.
        This has now been leviated such that the user has full control.
      
      - For large systems (>100000 orbitals) the pivoting connectivity graph
        for the electrodes is rather slow because of the sequential progress
        of the sparsity pattern.
        I have tried to fix some of the issues related to the slow algorithms
        used.
      
      - A memory-leak in m_region has been fixed (only for serial)
      
      - m_region has been overhauled with changes related to array
        assignments etc, they typically introduce an unnecessary
        temporary array in most cases and should be avoided.
        In particular has rgn_sp_connect been improved. It is now
        5% faster.
      
      - Cleaned up tbtrans tbt_regions for more clarity. Now tbtrans
        also prints out the used pivoting algorithm for the electrode connectivity
        graphs.
------------------------------------------------------------
revno: 632 [merge]
fixes bug: https://launchpad.net/bugs/1645388
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2016-12-13 14:59:33 +0100
message:
  Merged new initialization routines for new_DM
  
  This clarifies the structure of the new_dm routine by
  splitting the init_DM routine into a "read" and an
  "atomic" init routine.
  In case we read a DM siesta now allows reading a different
  spin structure and does automatic extrapolation.
  
  This partially fixes lp:1645388
    ------------------------------------------------------------
    revno: 631.1.5
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-DM-init
    timestamp: Tue 2016-12-13 14:44:31 +0100
    message:
      Updated manual
    ------------------------------------------------------------
    revno: 631.1.4
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-DM-init
    timestamp: Mon 2016-12-12 07:54:23 +0100
    message:
      Made final spin-printout equivalent to the initial spin-printout
      
      This should clarify any differences between the two.
    ------------------------------------------------------------
    revno: 631.1.3
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-DM-init
    timestamp: Sun 2016-12-11 18:12:43 +0100
    message:
      Fixed spin-print-out for initial spin-configuration
      
      Updated documentation to reflect the reading of a DM with
      different spin-order.
    ------------------------------------------------------------
    revno: 631.1.2
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-DM-init
    timestamp: Fri 2016-12-09 11:26:17 +0100
    message:
      Restructured new_DM for easier changes
      
      The m_new_DM routine has recieved an overhaul.
      The initialization routines are re-implemented
      and tested with the tests in the test directories.
       fe_noncollinear and transiesta ts_au
      There is no logic change in this commit.
      Also tested with OpenMP.
    ------------------------------------------------------------
    revno: 631.1.1
    fixes bug: https://launchpad.net/bugs/1645388
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-DM-init
    timestamp: Thu 2016-12-08 12:45:49 +0100
    message:
      Enabled reading of DM with different spin-components
      
      This is handy for doing large scale calculations with
      multiple spins. First start by calculating the non-polarized
      case, then increase spin to polarized, then increase to
      non-collinear, and finally to spin-orbit. This has been
      tested on a very simple system to check it works.
       siesta -fdf Spin:none run.fdf
       siesta -fdf Spin:polarized run.fdf
       ...
      will now work.
      This partially fixes lp:1645388.
      
      The reading/writing of DM has changed to not take into account the
      number of spin-components. Thus checks for spin should be taken care
      of after reading DM (for TS and S).
------------------------------------------------------------
revno: 631
fixes bug: https://launchpad.net/bugs/1648053
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2016-12-07 19:48:14 +0100
message:
  Fixed bug when printing initial spin-difference
  
  This bug was introduced in r590.
------------------------------------------------------------
revno: 630 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2016-12-05 14:17:32 +0100
message:
  Merged 4.0-r508, reverted merge (no changes required)
    ------------------------------------------------------------
    revno: 483.3.22
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Mon 2016-12-05 14:15:01 +0100
    message:
      Updated documentation compilation
      
      The documentation compilation required additional
      steps to converge the resulting index.
------------------------------------------------------------
revno: 629
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2016-12-05 11:54:02 +0100
message:
  Fixed non-collinear and spin-orbit PDOS in serial
  
  Partially fixes lp:1645749.
  
  There was a factor of 2 mixing to print the magnetization,
  this is now fixed both for PDOS output and XML output.
------------------------------------------------------------
revno: 628
fixes bug: https://launchpad.net/bugs/1647073
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2016-12-05 09:10:22 +0100
message:
  Removed FoX format specifier when it can not be used
  
  Fixes lp:1647073.
  
  Also limited number of fields for single precision
  numbers by default in the xml output routines.
  A single precision number only has 7 significant
  digits, so we limit the output to that amount,
  instead of the previous 12 digits.
------------------------------------------------------------
revno: 627
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2016-11-29 09:43:56 +0100
message:
  Updated the way the date is printed in the manual
  
  Now the date tag is automaticly updated when the
  release.sh script is runned. This makes it easier
  to track.
  Also, one should change the \date macro before
  the begin{document} to change the date.
------------------------------------------------------------
revno: 626
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2016-11-29 09:31:35 +0100
message:
  Stepped the manual version for 4.1-b3
------------------------------------------------------------
revno: 625
tags: v4.1-b2
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2016-11-28 10:01:28 +0100
message:
  Updated manual for tbtrans and transiesta
  
  Added more documentation regarding PDOS which is oftenly requested
------------------------------------------------------------
revno: 624 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Sun 2016-11-27 21:03:03 +0100
message:
  Merged 4.0 r507
  
  Added print-outs of the difference from the averaged forces
  to figure out if it is really important or not.
    ------------------------------------------------------------
    revno: 483.3.21 [merge]
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Sun 2016-11-27 20:55:12 +0100
    message:
      Merged cell-sampling print-out
      
      Added print-outs of the difference from the averaged forces
      to figure out if it is really important or not.
        ------------------------------------------------------------
        revno: 483.7.2
        committer: Nick Papior <nickpapior@gmail.com>
        branch nick: 4.0-cell-sampling
        timestamp: Sat 2016-11-26 09:11:06 +0100
        message:
          Moved calculation of the displacements out grdsam
          
          The grdsam displacements where not optimally calculated.
        ------------------------------------------------------------
        revno: 483.7.1
        committer: Nick Papior <nickpapior@gmail.com>
        branch nick: 4.0-cell-sampling
        timestamp: Fri 2016-11-25 19:48:56 +0100
        message:
          Added print-out of maximum force difference in grdsam
          
          This enables one to more easily figure out if the grid
          sampling is required or not.
          siesta now also prints the standard-deviation.
          We have found that in certain systems (a Cu-Ni slab-alloy)
          the forces were highly unsymmetric (where they should have
          been symmetric). The solution was to grid-cell-sample
          along the normal vector to the surface. This helped
          alot and fixed the problem, however, before doing a
          fine-mesh sampling it can be nice to get a feel for it
          using very few points.
------------------------------------------------------------
revno: 623 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2016-11-25 19:04:25 +0100
message:
  Merge LDA+U fix, fixes lp:1643589
  
  This fixes a problem with the LDA+U calculations
  if using non-standard options.
    ------------------------------------------------------------
    revno: 484.1.18
    committer: Javier Junquera <javier.junquera@unican.es>
    branch nick: LDAU
    timestamp: Fri 2016-11-25 15:00:38 +0100
    message:
      Bug in the generation of the LDA+U projectors when the rc is explicitly introduced is fixed
------------------------------------------------------------
revno: 622
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Thu 2016-11-24 15:00:33 +0100
message:
  Add two more files to Denchar output in 3D mode
  
  For spin-polarized calculations, Denchar now outputs
  two more files:
  
  SystemLabel.RHO.cube:         Total charge density (sum over spins)
  SystemLabel.UPminusDOWN.cube: UP-DOWN spin difference
------------------------------------------------------------
revno: 621
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2016-11-24 11:06:28 +0100
message:
  Updated documentation of tbtrans
  
  Slight errors were in the tbtrans documentation and
  more has been fixed.
------------------------------------------------------------
revno: 620
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2016-11-22 09:38:33 +0100
message:
  Forced the suffixes in the makefile
  
  - Having the SUFFIXES explicitly in the Makefile will make
    it easier to create the arch.make files.
    Essentially now they only need to define the compiler, 
    compiler flags, and the compiler rules.
------------------------------------------------------------
revno: 619
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2016-11-17 08:10:22 +0100
message:
  The naming scheme for the tolerance parameters where illogical
  
  - They have now been updated and should be the new defaults.
------------------------------------------------------------
revno: 618
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2016-11-16 17:42:04 +0100
message:
  Fixed code from r616 where an s was missing in a variable
  
  - Updated makefiles
------------------------------------------------------------
revno: 617 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2016-11-15 11:17:18 +0100
message:
  Merge 4.0, r506 with VCA fixes
    ------------------------------------------------------------
    revno: 483.3.20
    fixes bug: https://launchpad.net/bugs/1633039
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Tue 2016-11-15 11:15:49 +0100
    message:
      Fixes the VCA mixing of pseudos, lp:1633039
      
      A simple extension of the grid is made by copying
      the last value if the interpolated grid is too small.
------------------------------------------------------------
revno: 616 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2016-11-15 11:05:33 +0100
message:
  Merge 4.1-fixes, fixes bugs in transiesta
  
  1) 1639779
  2) 1639812
  3) 1641573
    ------------------------------------------------------------
    revno: 614.1.3
    fixes bug: https://launchpad.net/bugs/1641573
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-fixes
    timestamp: Mon 2016-11-14 15:13:47 +0100
    message:
      Allowed slab-dipole correction for N-electrodes, lp:1641573
      
      - There were many cases where the slab dipole correction
        could not be applied.
      
        We have now "fixed" this by generally allowing the slab
        dipole correction in _any_ setup.
        However, there are shortcomings for very complicated
        N-electrode setups.
      
        Regardless a warning message is written telling the
        user to be careful!
      
        In fact for bilayer and twisted bilayer calculations
        with different bias on the inter-layers the slab
        dipole correction probably SHOULD be applied.
      
      - Removed the ts_tdir variable which was not used for
        anything.
        The ts_tidx variable is the important thing.
      
      - Removed a couple of unused variables in the dhscf code.
    ------------------------------------------------------------
    revno: 614.1.2
    fixes bug: https://launchpad.net/bugs/1639812
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-fixes
    timestamp: Mon 2016-11-14 12:45:57 +0100
    message:
      Fixed reading a grid in serial, lp:1639812
      
      - The custom Poisson solution was not working
        in serial due to the count not being specified.
        All routines regarding the voltage and hartree
        fix have been updated with more meaningful input.
    ------------------------------------------------------------
    revno: 614.1.1
    fixes bug: https://launchpad.net/bugs/1639779
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-fixes
    timestamp: Mon 2016-11-14 10:07:56 +0100
    message:
      Enabled check of connectivity with used-atoms, lp:1639779
      
      - When the user requests a subset of atoms in the electrodes
        we need to check the reduced sparsity pattern.
      
        This is now fixed.
------------------------------------------------------------
revno: 615
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2016-11-15 10:37:58 +0100
message:
  Added more documentation on using the manual
  
  - Enabled dependency list for easy dependency look-ups
    in fdfentry blocks.
  
  - Added dependencies on the SCF.Tolerance.* flags.
------------------------------------------------------------
revno: 614
fixes bug: https://launchpad.net/bugs/1640813
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2016-11-14 08:57:21 +0100
message:
  Fix tree-timer with TS lp:1640813
  
  - The tree-timer only allows timer-reports on
    direct children of the current active section.
    This is not possible with the TS section because
    it is "hidden" under the IterSCF routine.
    Thus for tree-timers we now simply print the
    IterSCF tree which holds the TS section.
------------------------------------------------------------
revno: 613 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2016-11-11 15:23:03 +0100
message:
  Merge of MD-constraint fixes
    ------------------------------------------------------------
    revno: 612.1.1
    fixes bug: https://launchpad.net/bugs/1640137
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-md-constraints
    timestamp: Tue 2016-11-08 19:05:43 +0100
    message:
      Constraints with MD was not working, fixes lp:1640137
      
      - The initialization of the fixed routine was done right
        after the initialization of the initial velocities.
        This meant that the constraints was not applied to the
        velocities.
      
      - Further, this was also the reason why I could not get the
        MD constriants to work previously. Hence, many of the
        constraints now work with MD and with directional constraint.
------------------------------------------------------------
revno: 612
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2016-11-07 17:15:13 +0100
message:
  Error in r611, the referenced variable ts_tidx should be >0
  
  - Fixed the commit so that it correctly interprets the flags.
------------------------------------------------------------
revno: 611
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2016-11-07 15:38:55 +0100
message:
  Fixed transiesta documentation for the Poisson solution
  
  - The documentation was not documenting the input file
    option for the poisson fix.
  
  - Removed redundant flag TS.Poisson.Position
    which is now encapsulated in TS.Poisson.
------------------------------------------------------------
revno: 610
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2016-11-07 08:34:42 +0100
message:
  Fixed tbtrans documentation and the makefile
  
  - The tbtrans documentation had some inconsistencies for
    certain flags.
  
  - The makefile for the documentation was missing one more
    compilation step to update the index position.
------------------------------------------------------------
revno: 609 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2016-11-04 15:38:22 +0100
message:
  Merged fixes for tbtrans
    ------------------------------------------------------------
    revno: 607.1.1
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1
    timestamp: Fri 2016-11-04 12:41:59 +0100
    message:
      Fixed compilation of tbtrans with g95
      
      - A few mistakes had sneaked in the compilation
        with g95.
      
        Now interfaces and intents are consistent with the
        compilation with g95.
------------------------------------------------------------
revno: 608 [merge]
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Fri 2016-11-04 15:26:44 +0100
message:
  Some optimizations in nlefsm
  
  Routine nlefsm stands out as a bottleneck for parallelization
  efficiency, since the loop over KB projectors is "global", and a
  substantial amount of work, proportional to the size of the system,
  has to be done by all MPI processes.  The initial steps in nlefsm
  optimization have reduced the cpu weight of that loop by:
  
  - Pre-computation (in hsparse) of the atoms really involved in KB
    overlaps with the orbitals handled by the process.
  - Early exit from the loop after simpler tests
  - Other minor optimizations
    ------------------------------------------------------------
    revno: 587.1.4 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-nl
    timestamp: Fri 2016-11-04 15:16:04 +0100
    message:
      Sync to 4.1-607
    ------------------------------------------------------------
    revno: 587.1.3 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-nl
    timestamp: Fri 2016-11-04 15:10:50 +0100
    message:
      Add initialization and cosmetic fixes
      
      Even though a de-facto initialization was achieved by the
      call to 'superc' in 'state_init', the new array 'in_kb_orb_u_range'
      is now explicitly initialized in 'hsparse'.
      
      Cosmetic changes in 're_alloc' statements.
      
      (Thanks to Nick Papior)
        ------------------------------------------------------------
        revno: 587.2.1
        committer: Nick Papior <nickpapior@gmail.com>
        branch nick: 4.1-nl
        timestamp: Thu 2016-11-03 19:41:19 +0100
        message:
          Fixed allocation and initialization of new array
          
          - The re_alloc variable name was inconsistent
          
          - The initialization was based on orbitals but on
            a fixed variable which could, or could not make
            seg-faults due to out-of-bounds.
    ------------------------------------------------------------
    revno: 587.1.2
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-nl
    timestamp: Fri 2016-11-04 11:57:20 +0100
    message:
      Check for floating species. Add simple counters
    ------------------------------------------------------------
    revno: 587.1.1
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-nl
    timestamp: Mon 2016-10-10 17:22:12 +0200
    message:
      Optimized nlefsm
------------------------------------------------------------
revno: 607
fixes bug: https://launchpad.net/bugs/1638726
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2016-11-03 19:31:09 +0100
message:
  Fixed print-out chemical potentials and Volt, fixes lp:1638726
  
  - If the difference between the max and min of the
    chemical potentials and the applied bias is
    too large then the program (TS and TBT) will
    die.
    
------------------------------------------------------------
revno: 606 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2016-11-03 16:02:37 +0100
message:
  Merged manual fixes for a completely rewritten manual
  
  - Fixes T.Elecs.All => T.All
    and other variations thereof
    ------------------------------------------------------------
    revno: 603.1.19
    fixes bug: https://launchpad.net/bugs/1638815
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-manual
    timestamp: Thu 2016-11-03 12:35:17 +0100
    message:
      Fixed lp:1638815
      
      There was no abort if SCF.Mix was given an erroneous value.
    ------------------------------------------------------------
    revno: 603.1.18
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-manual
    timestamp: Wed 2016-11-02 20:43:47 +0100
    message:
      Fixed missing fdf keywords from textbf and wrong names
    ------------------------------------------------------------
    revno: 603.1.17
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-manual
    timestamp: Wed 2016-11-02 19:54:21 +0100
    message:
      Updated tbtrans documentation and keywords for Elecs.All => All
      
      This was inconsistent and the Elecs was superfluous information
      for the keyword. 
    ------------------------------------------------------------
    revno: 603.1.16
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-manual
    timestamp: Wed 2016-11-02 19:42:42 +0100
    message:
      Updated documentation about defaults in the chemical potentials
    ------------------------------------------------------------
    revno: 603.1.15
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-manual
    timestamp: Tue 2016-11-01 20:18:32 +0100
    message:
      Fixed wrong flag for nonodes
    ------------------------------------------------------------
    revno: 603.1.14
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-manual
    timestamp: Mon 2016-10-31 15:46:18 +0100
    message:
      Updated manual with Alberto changes [2]
    ------------------------------------------------------------
    revno: 603.1.13
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-manual
    timestamp: Mon 2016-10-31 12:06:37 +0100
    message:
      Updated manual with Alberto changes
    ------------------------------------------------------------
    revno: 603.1.12
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-manual
    timestamp: Fri 2016-10-28 09:01:40 +0200
    message:
      Updated manual for LDAU stuff
    ------------------------------------------------------------
    revno: 603.1.11
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-manual
    timestamp: Fri 2016-10-28 08:47:17 +0200
    message:
      Updated manual for MD stuff
    ------------------------------------------------------------
    revno: 603.1.10
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-manual
    timestamp: Thu 2016-10-27 17:56:22 +0200
    message:
      Updated release.sh and makefile for documents for easier releases
    ------------------------------------------------------------
    revno: 603.1.9
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-manual
    timestamp: Thu 2016-10-27 14:44:51 +0200
    message:
      Updated copyright notice in tbtrans documentation
      
      And stepped version in manual to b2
    ------------------------------------------------------------
    revno: 603.1.8
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-manual
    timestamp: Thu 2016-10-27 14:20:49 +0200
    message:
      Updated more manual entries for start of MD
    ------------------------------------------------------------
    revno: 603.1.7
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-manual
    timestamp: Thu 2016-10-27 14:09:16 +0200
    message:
      Updated more manual entries for Save options
    ------------------------------------------------------------
    revno: 603.1.6
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-manual
    timestamp: Thu 2016-10-27 14:01:18 +0200
    message:
      Updated more manual entries for W90
    ------------------------------------------------------------
    revno: 603.1.5
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-manual
    timestamp: Thu 2016-10-27 13:51:55 +0200
    message:
      Updated more manual entries for Optical options
    ------------------------------------------------------------
    revno: 603.1.4
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-manual
    timestamp: Thu 2016-10-27 10:34:08 +0200
    message:
      Updated more manual entries for ON stuff
    ------------------------------------------------------------
    revno: 603.1.3
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-manual
    timestamp: Thu 2016-10-27 10:22:56 +0200
    message:
      Updated more manual entries
    ------------------------------------------------------------
    revno: 603.1.2
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-manual
    timestamp: Wed 2016-10-26 22:11:26 +0200
    message:
      Fixed minor erroneous flags in the manual
    ------------------------------------------------------------
    revno: 603.1.1
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.1-manual
    timestamp: Wed 2016-10-26 22:04:36 +0200
    message:
      Updated manual to reflect new formatting
      
      - Updated many entries
      
      - Re-added the DM.History.Depth key in
        read_options.
      
      - Removed avoid_after_kick. It isn't used anymore
        and may be emulated using the more advanced scheme.
      
      - Changed name of FixSpin to Spin.Fix (backward compatibility
        maintained.
      
      - Enabled sysfile in manual to only print the file-ending with
        * (SystemLabel may be redundant in certain descriptive sections)
------------------------------------------------------------
revno: 605 [merge]
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Mon 2016-10-31 22:00:50 +0100
message:
  Include recent patchlogs from 4.0
  
  Some recent bugfixes and other changes were ported from 4.0 without a
  proper inclusion of the relevant patchlogs. This made it appear (e.g.,
  in 'bzr missing') as if the fixes had not been applied upstream.
  
  A merge followed by 'bzr revert .' includes the desired patchlogs without
  any more changes in the working directory.
  
  - Declare all variables
  - Fixes non-colinear band calculation, fixes lp:1636100
  - Fix bug 1625725 in 'nodes' basis-generation option
  - Did not allow user control of SlabDipoleCorrection, fixes lp:1630827
    ------------------------------------------------------------
    revno: 483.3.19
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.0
    timestamp: Mon 2016-10-31 14:12:24 +0100
    message:
      Declare all variables
      
      Some variables were not properly declared. This can
      cause errors if a compiler flag to catch implicit typing
      is used.
      
      Except in file Util/TBtrans/cdiag_local.F, all variables
      are now declared.
    ------------------------------------------------------------
    revno: 483.3.18
    fixes bug: https://launchpad.net/bugs/1636100
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Mon 2016-10-24 09:27:38 +0200
    message:
      Fixes non-colinear band calculation, fixes lp:1636100
      
      The interface call for diag2k was erroneous in non-colinear call.
    ------------------------------------------------------------
    revno: 483.3.17
    fixes bug: https://launchpad.net/bugs/1625725
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.0
    timestamp: Thu 2016-10-13 14:49:05 +0200
    message:
      Fix bug 1625725 in 'nodes' basis-generation option
      
      A bug was introduced in revno 436: the number of nodes and the
      principal quantum number was off by one.  It has now been fixed.
      
      Note however that the preferred way to generate basis sets in Siesta
      is the default 'split' scheme.
      
      (Thanks to Seungchul Kim for reporting the issue)
      
      
      
      
      	
    ------------------------------------------------------------
    revno: 483.3.16
    fixes bug: https://launchpad.net/bugs/1630827
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: 4.0
    timestamp: Thu 2016-10-06 09:25:28 +0200
    message:
      Did not allow user control of SlabDipoleCorrection, fixes lp:1630827
      
      For backwards compatibility it is nice to be able to turn off the 
      SlabDipolecorrection such that one can compare against older versions.
      This was a mistake.
------------------------------------------------------------
revno: 604
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Mon 2016-10-31 14:43:46 +0100
message:
  Declare most variables
  
  Some variables were not properly declared. This can cause errors if a
  compiler flag to catch implicit typing is used.
  
  Except in file fdict/iso_var_str.f90, all variables are now declared.
------------------------------------------------------------
revno: 603
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2016-10-25 12:36:33 +0200
message:
  Fixed cell constraints and the manual regarding this
  
  The cell constrainst for non-orthogonal cells is not
  really working. I have added checks for this in the
  code and now it will die if it cannot do what is requested.
  Simultaneously the cell-angle constraints only allows
  expansion of the spanning vectors. 
------------------------------------------------------------
revno: 602
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2016-10-25 09:05:36 +0200
message:
  Fix electrode plane determination if Bloch expansions are used
  
  In case Bloch expansion is used for only one electrode the Hartree
  plane was more or less fixed at the non-Bloch electrode.
  This has now been fixed.
  This should have no effects in the calculation.
------------------------------------------------------------
revno: 601
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2016-10-25 07:58:07 +0200
message:
  Fixed documentation with XML changes
------------------------------------------------------------
revno: 600
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2016-10-24 11:49:33 +0200
message:
  Fixed defaults for tbtrans and chemical potentials
  
  Now the defaults for tbtrans are so that:
   1. if there is no bias, there is no need to specify
   the chemical potentials.
   2. if there is a bias, the default is the transiesta
   default.
  
  This enables easier input for tight-binding calculations.
------------------------------------------------------------
revno: 599
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2016-10-21 14:30:21 +0200
message:
  Updated obj_setup.sh to not mention the configure script
  
  We had forgotten to remove the configure reference in the 
  obj_setup.sh file.
------------------------------------------------------------
revno: 598
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2016-10-21 13:59:25 +0200
message:
  Added gfortran.make and intel.make in Obj directory
  
  These are example arch.make files
------------------------------------------------------------
revno: 597
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2016-10-21 13:55:53 +0200
message:
  In FoX removal there was some changes that were not shipped to TS
  
  Bug fixes for compilation of TS using WXML only (no FoX)
  Now siesta and transiesta have the same link-lines
------------------------------------------------------------
revno: 596 [merge]
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Fri 2016-10-21 11:59:30 +0200
message:
  Implement CML calls using an upgraded Src/wxml library
  
  The generation of the CML file with the most important data from a run
  is now handled by an upgraded version of the existing code in Src/wxml
  (part of xmlf90, based on earlier work by Jon Wakelin and Toby White).
  
  The new code is now also used in pdos.F (which still contains a
  parallel xml thread to maintain compatibility with one of Andrei
  Postnikov's tools).
  
  This matches FoX's wxml functionality with a much smaller footprint, so
  the FoX code has been removed from the distribution.
    ------------------------------------------------------------
    revno: 589.1.12 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-cml
    timestamp: Fri 2016-10-21 11:19:10 +0200
    message:
      Incorporate Nick's changes to sizes in wxml
        ------------------------------------------------------------
        revno: 589.2.1
        committer: Nick Papior <nickpapior@gmail.com>
        branch nick: 4.1-cml
        timestamp: Thu 2016-10-20 21:24:56 +0200
        message:
          Bug fixed for long buffer writes in wxml
          
          - Sometimes if long strings are written an overflow
            would happen. This has been fixed by increasing the 
            buffer size.
          
          - Removed references to FoX in the missing makefile and 
            comment files (NOTICE.txt, for example)
    ------------------------------------------------------------
    revno: 589.1.11
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-cml
    timestamp: Thu 2016-10-20 14:47:06 +0200
    message:
      Add NOTES.cml file
    ------------------------------------------------------------
    revno: 589.1.10
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-nofox
    timestamp: Wed 2016-10-19 16:23:41 +0200
    message:
      Trim k-point section
    ------------------------------------------------------------
    revno: 589.1.9
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-nofox
    timestamp: Wed 2016-10-19 15:34:59 +0200
    message:
      Add cmlAddComment. Fix rows/columns bug
      
      The "property" routines had an inconsistent criterion for row/column
      identification. Now everything is in the Fortran convention, which
      matches the FoX criterion also.
      
      Forces, for example, are now clearly output in lines of 3 components.
      
      Removed mentions of xml.abort-on-error and xml.abort-on-warning in the
      manual.
    ------------------------------------------------------------
    revno: 589.1.8 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-nofox
    timestamp: Wed 2016-10-19 12:34:20 +0200
    message:
      Sync to 4.1--594
    ------------------------------------------------------------
    revno: 589.1.7
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-nofox
    timestamp: Fri 2016-10-14 15:57:19 +0200
    message:
      Remove FoX
    ------------------------------------------------------------
    revno: 589.1.6
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-nofox
    timestamp: Fri 2016-10-14 15:23:08 +0200
    message:
      More cosmetics
    ------------------------------------------------------------
    revno: 589.1.5
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-nofox
    timestamp: Fri 2016-10-14 15:13:54 +0200
    message:
      Complete functionality. Missing cosmetics
    ------------------------------------------------------------
    revno: 589.1.4
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-nofox
    timestamp: Fri 2016-10-14 14:29:34 +0200
    message:
      Fixed namespace declarations, etc. ccViz works
    ------------------------------------------------------------
    revno: 589.1.3
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-nofox
    timestamp: Fri 2016-10-14 12:20:03 +0200
    message:
      Fixed parameters/scalars
    ------------------------------------------------------------
    revno: 589.1.2
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-nofox
    timestamp: Fri 2016-10-14 12:05:01 +0200
    message:
      Getting closer to spec
    ------------------------------------------------------------
    revno: 589.1.1
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-nofox
    timestamp: Thu 2016-10-13 18:49:33 +0200
    message:
      Compiles
------------------------------------------------------------
revno: 595
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2016-10-19 11:34:03 +0200
message:
  Enabled default chemical potentials if they are named equally
  
  This makes setting the default chemical potential more easy
  if one names the chemical potentials and electrodes by the
  same names.
  
  Furthermore, if there is only one chemical potential then
  that is ALWAYS selected.
------------------------------------------------------------
revno: 594
fixes bug: https://launchpad.net/bugs/1625725
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2016-10-19 09:39:07 +0200
message:
  Bug fix for PAO.BasisType node lp:1625725
------------------------------------------------------------
revno: 593
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2016-10-19 09:31:41 +0200
message:
  Removed all references to paste function (also utils)
  
  There was no need to have this function, trim is the equivalent
  function.
  
  All utilities have also been updated.
------------------------------------------------------------
revno: 592
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2016-10-18 18:07:59 +0200
message:
  Enabled list setting of the k-point sampling for tbtrans
  
  Also updated manual for tbtrans to reflect the TBT.Symmetry.TimeReversal
  flag which is needed for TBT.Current.Orb and k-point sampling.
------------------------------------------------------------
revno: 591
author: Ramon Cuadrado <ramon.cuadrado@cin2.es>
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2016-10-14 14:38:43 +0200
message:
  Updated manual with spin-orbit information
------------------------------------------------------------
revno: 590
fixes bugs: https://launchpad.net/bugs/1623415 https://launchpad.net/bugs/1623420
author: Ramon Cuadrado <ramon.cuadrado@cin2.es>
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2016-10-14 14:27:57 +0200
message:
  Fixes the spin-printout and calculation (NC and SO)
  
  - The sign in the initialization of the fourth component of the 
    Density Matrix when the Spin-Orbit term is included in the calculation
    has been changed to be consistent with the DM.InitDM in the fdf file. 
    The corresponding sobroutine is fill_dscf_from_atom_info within the 
    module m_new_dm. In addition, at the end of fill_dscf_from_atom_info 
    subroutine is called print_initial_spin() that currently prints out 
    the initial spin polarization. This has been changed and on whether 
    spin polarized or non-collinear/spin-orbit calculation is performed, 
    the output will be Q(1)-Q(2) in the first case and M_x, M_y and M_z 
    in the second.    
    
  - The calculation of the angles of the magnetization vector as a function 
    of q(1:4) in the subroutine spnvec by Mulliken population has been 
    reviewed when the number of spin components is four(non-collinear/spin-orbit). 
------------------------------------------------------------
revno: 589
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2016-10-11 21:38:17 +0200
message:
  Bug discovered when running linear-kick and MD 
  
  - The itteration counter for the mixing routines was never
    reset which meant that depending on the number of SCF siesta would
    crash in the next MD step.
    
    Thanks to R. Robles for the bug-report
  
  - Added print-out when resetting the history, and fixed
    debug read for the mixers.
------------------------------------------------------------
revno: 588
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2016-10-10 15:00:00 +0200
message:
  Enabled supercell bond-currents
  
  - The previous orbital currents were stored only in the unit-cell
    However, we now enable the full calculation of the supercell interactions.
    This is a minor change and results in a slightly larger sparse matrix.
    The sisl package has been updated to handle this as well.
  
  - Added Sp_sort in m_sparsity_handling which ensures that a sparse matrix
    is sorted.
  
  - Possibly fix for spin-transport calculations in tbtrans.
    The abstraction of only calculating one spin-component made the logic
    erroneous.
------------------------------------------------------------
revno: 587
fixes bug: https://launchpad.net/bugs/1630849
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2016-10-06 14:41:05 +0200
message:
  MD methods other than CG did not allow re-use of DM, fixes lp:1630849
  
  Now it defaults to at least 1 extrapolation.
------------------------------------------------------------
revno: 586
fixes bug: https://launchpad.net/bugs/1630827
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2016-10-06 09:26:34 +0200
message:
  Did not allow user control of SlabDipoleCorrection, fixes lp:1630827
  
  For backwards compatibility it is nice to be able to turn off the 
  SlabDipolecorrection such that one can compare against older versions.
  This was a mistake.
------------------------------------------------------------
revno: 585
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2016-10-05 09:25:53 +0200
message:
  Forgot to actually delete the configure files and other obsoleted files
  
  This commit should have gone together with r582
------------------------------------------------------------
revno: 584
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2016-10-04 11:39:32 +0200
message:
  Updated manual to reflect changes of configure
------------------------------------------------------------
revno: 583
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2016-10-04 11:31:12 +0200
message:
  Fixed m_mpi_utils for globalization of integer
  
  There was a missing transfer if MPI wasn't defined.
  Also added the missing arguments of `Comm`
------------------------------------------------------------
revno: 582
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2016-10-04 11:22:48 +0200
message:
  Removed unnecessary configure/arch-make stuff
  
  Removed all configure related stuff. This is now "obsoleted"
  until an expert tells us what to do.
  
  Moved sample arch.make files to the Obj directory. In this way
  the basic examples and documentations are where people will
  initially search for them.
  
  Removed deprecated lapack/blas sources. Now one should use the full
  sources in case the optimized libraries does not contain the needed
  functionality.
  
  Cleaned up Makefile.
  Specifically the rule for the sockets.c file was unnecessary as
  it was (almost) equal to the implicit rule of C-compilation.
  
  Removed folders:
    Src/Sys
    Src/Conf
    Src/m4
------------------------------------------------------------
revno: 581
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2016-10-04 08:45:36 +0200
message:
  Added citation for transiesta and pexsi
------------------------------------------------------------
revno: 580
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2016-09-28 21:20:28 +0200
message:
  Fixed print-out in m_region (nothing computational)
  
  - The last items was missing a comma-separation
------------------------------------------------------------
revno: 579
fixes bug: https://launchpad.net/bugs/1627041
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2016-09-28 09:23:17 +0200
message:
  Updated blas.f, lapack.f the documentation and Makefile, fixes 1627041
  
  - blas.f and lapack.f where updated to the latest LAPACK sources.
    There were some minor bugs.
  
  - The documentation of tbtrans was missing the pivot flag description.
  
  - The Makefile was not forwarding the INCFLAGS to FFLAGS in libfdict and
    libncdf which is necessary.
    This fixes: lp:1627041
------------------------------------------------------------
revno: 578
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Tue 2016-09-27 12:13:48 +0200
message:
  Write LDA+U projector information to .ldau_proj files
  
  For LDA+U calculations, the projector information was written to the
  .ion files in a form that made them unusable. Now, that information is
  written to files with names 'SpLabel'.ldau_proj, where 'Splabel' is
  the species label.
------------------------------------------------------------
revno: 577
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Tue 2016-09-27 11:31:30 +0200
message:
  Add third argument to reclat call in two routines
------------------------------------------------------------
revno: 576
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Fri 2016-09-16 14:25:04 +0200
message:
  Fix double import in mpi_siesta
------------------------------------------------------------
revno: 575 [merge]
fixes bug: https://launchpad.net/bugs/1619437
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Wed 2016-09-14 18:19:23 +0200
message:
  Changes to further standards compliance (merges 4.0--501)
  
  Brought about by the use of extra compiler checks, notably by g95 and
  the '-std=f2003 -fall-intrinsics' setting in gfortran.
  
  Apart from syntax and visibility issues, F2008 extensions
  ('contiguous' keyword), and non-standard declarations (such as
  "real*8") have been removed. Bounds specification in pointer
  assignment is in principle permitted by F2003, but are not yet
  implemented by all compilers.
  
  Also, the building of the MPI interfaces has been updated to properly
  include 8-byte integers.
  
  (Declarations in the code in Util are not fully updated yet)
    ------------------------------------------------------------
    revno: 574.1.4
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-ag
    timestamp: Wed 2016-09-14 12:57:36 +0200
    message:
      Remove obsolete hollerith constructs
    ------------------------------------------------------------
    revno: 574.1.3
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-ag
    timestamp: Wed 2016-09-14 11:35:16 +0200
    message:
      Fix minor syntax glitch and update PEXSI .html files
    ------------------------------------------------------------
    revno: 574.1.2
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-ag
    timestamp: Tue 2016-09-13 18:40:40 +0200
    message:
      Remove non-standard declarations
    ------------------------------------------------------------
    revno: 574.1.1 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-ag
    timestamp: Tue 2016-09-13 15:22:20 +0200
    message:
      Merge 4.0-501 and fix other vanilla g95 complaints
        ------------------------------------------------------------
        revno: 483.3.15 [merge]
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 4.0
        timestamp: Tue 2016-09-13 14:00:42 +0200
        message:
          Changes to further standards compliance
          
          Brought about by the use of extra compiler checks, notably by g95 and
          the '-std=f2003 -fall-intrinsics' setting in gfortran.
          
          Apart from syntax and visibility issues, non-standard declarations
          such as "real*8" have been removed.
          
          Also, the building of the MPI interfaces has been updated to properly
          include 8-byte integers.
          
          (Declarations in the code in Util are not fully updated yet)
          		
          
          	
            ------------------------------------------------------------
            revno: 483.6.6
            committer: Alberto Garcia <albertog@icmab.es>
            branch nick: 4.0-ag
            timestamp: Tue 2016-09-13 12:36:39 +0200
            message:
              Fix typo in Denchar routine
            ------------------------------------------------------------
            revno: 483.6.5
            committer: Alberto Garcia <albertog@icmab.es>
            branch nick: 4.0-ag
            timestamp: Tue 2016-09-13 11:42:56 +0200
            message:
              Update declarations in zheevds
            ------------------------------------------------------------
            revno: 483.6.4
            committer: Alberto Garcia <albertog@icmab.es>
            branch nick: 4.0-ag
            timestamp: Tue 2016-09-13 07:41:26 +0200
            message:
              Consolidate interface imports in mpi_siesta
            ------------------------------------------------------------
            revno: 483.6.3
            committer: Alberto Garcia <albertog@icmab.es>
            branch nick: 4.0
            timestamp: Mon 2016-09-12 15:30:18 +0200
            message:
              Fix Util/WFS
            ------------------------------------------------------------
            revno: 483.6.2
            committer: Alberto Garcia <albertog@icmab.es>
            branch nick: 4.0
            timestamp: Mon 2016-09-12 15:22:53 +0200
            message:
              Update MPI int kind handling
            ------------------------------------------------------------
            revno: 483.6.1
            committer: Alberto Garcia <albertog@icmab.es>
            branch nick: 4.0
            timestamp: Fri 2016-09-09 17:12:09 +0200
            message:
              Fixes for further standards compliance
              
              Some changes were needed to allow compilation with g95, which has
              stricter checks than other compilers in some areas.
              
              Non-standard specifications such as real*8 and integer*8 are being
              progressively removed.
------------------------------------------------------------
revno: 574
fixes bug: https://launchpad.net/bugs/1622526
committer: Alberto Garcia <albertog@icmab.es>
branch nick: 4.1
timestamp: Mon 2016-09-12 11:19:56 +0200
message:
  Fix bug in switch-off option for MRRR
------------------------------------------------------------
revno: 573
tags: v4.1-b1
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Wed 2016-08-31 07:52:35 +0200
message:
  Removed __FILE__ reference in class_Distribution
  
  - In some cases will this preprocessor fail.
    Besides, it was only used in one place.
  
  - Fixed release.sh (dublicate path)
    and removed it self from the release tarball
------------------------------------------------------------
revno: 572
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2016-08-30 16:02:33 +0200
message:
  Removed default constants in read_options
  
  - There was no need to have elsewhere defined
    defaults in read_options. Now they are
    hard-coded which makes it easier to
    track and change.
  
  - Updated all makefiles.
------------------------------------------------------------
revno: 571
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2016-08-30 15:46:54 +0200
message:
  Updated to new manual format
------------------------------------------------------------
revno: 570
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2016-08-30 11:41:02 +0200
message:
  Added Gate-tests
  
  - Added gate_G_{charge,hartree} for charge and Hartree gates
------------------------------------------------------------
revno: 569
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2016-08-30 11:32:08 +0200
message:
  Forced mulliken printout during SCF to false in certain cases
  
  - If the user does not request a specific type of mulliken population
    AND request mulliken per SCF, then it is automatically turned off.
------------------------------------------------------------
revno: 568
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2016-08-30 10:31:55 +0200
message:
  Updated manual and removed obsolete appendices
  
  - Also minor fixes across the full manual.
    References, spelling mistakes etc.
  
  - Highlighted that the release is a beta release
------------------------------------------------------------
revno: 567
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2016-08-30 08:35:45 +0200
message:
  Updated tbtrans manual for the next release
------------------------------------------------------------
revno: 566
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2016-08-30 08:07:55 +0200
message:
  Moved release notes, changed SIESTA__MRRR to SIESTA__NO_MRRR
------------------------------------------------------------
revno: 565 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2016-08-30 07:43:37 +0200
message:
  Merged AG changes for 4.1 release
  
  Introduction of SIESTA__MRRR and several forgotten
  variables in certain modules.
    ------------------------------------------------------------
    revno: 562.1.7
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-ag
    timestamp: Tue 2016-08-30 02:05:21 +0200
    message:
      Add mention to mix-scf1
    ------------------------------------------------------------
    revno: 562.1.6
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-ag
    timestamp: Tue 2016-08-30 01:56:18 +0200
    message:
      Updated release notes
    ------------------------------------------------------------
    revno: 562.1.5
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-ag-aux
    timestamp: Tue 2016-08-30 00:21:39 +0200
    message:
      Put contributors in manual
    ------------------------------------------------------------
    revno: 562.1.4
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-ag-aux
    timestamp: Tue 2016-08-30 00:19:24 +0200
    message:
      Add draft release notes
    ------------------------------------------------------------
    revno: 562.1.3 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-ag-aux
    timestamp: Tue 2016-08-30 00:18:53 +0200
    message:
      Sync to 4.1-564
    ------------------------------------------------------------
    revno: 562.1.2
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-ag
    timestamp: Sun 2016-08-28 08:27:21 +0200
    message:
      Declare some variables
    ------------------------------------------------------------
    revno: 562.1.1
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.1-ag
    timestamp: Fri 2016-08-26 08:34:05 +0200
    message:
      Add SIESTA__MRRR wrapper
------------------------------------------------------------
revno: 564
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Mon 2016-08-29 08:36:23 +0200
message:
  Enabled compilation of link-time optimizations
  
  - Link-time optimizations are required to have the compiled
    libraries made with the same flags.
    This commit introduces small fixes to a few Makefiles
    FoX and SiestaXC which now allows link-time optimizations.
  
    Using LTO for GCC 6.1.0 the final executable decreases
    by a staggering 33%
------------------------------------------------------------
revno: 563
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Fri 2016-08-26 08:32:41 +0200
message:
  Added documentation of NetCDF-4 file, changed file to slabel
  
  - Added documentation for the generic SIESTA NetCDF file
  
  - Ensured that the NetCDF-4 file is named <slabel>.nc
------------------------------------------------------------
revno: 562
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Thu 2016-08-25 13:44:59 +0200
message:
  Fixed documentation and added flook and tbtrans
  
  - Defining the 4.1 in the documentation was incorrect.
  
  - Added how to enable flook
  
  - Added missing flag for tbtrans calculations which
    ensures a correct DOS on the device atoms.
------------------------------------------------------------
revno: 561
committer: Nick Papior <nickpapior@gmail.com>
branch nick: 4.1
timestamp: Tue 2016-08-23 21:29:36 +0200
message:
  Prepared release branch for 4.1
------------------------------------------------------------
revno: 560
tags: s4.1
committer: Nick Papior <nickpapior@gmail.com>
branch nick: trunk
timestamp: Tue 2016-08-23 21:22:56 +0200
message:
  Removed entroy print outs from pexsi defs
  
  Simple removal of output which where debugging statements
  for the PEXSI method.
------------------------------------------------------------
revno: 559
committer: Nick Papior <nickpapior@gmail.com>
branch nick: trunk
timestamp: Tue 2016-08-23 07:02:49 +0200
message:
  Made older shipped libraries issue a warning on compilation
  
  - The linalg.a libraries (etc.) are now deprecated in favor
    of libsiestaBLAS.a and/or libsiestaLAPACK.a
  
    Trying to use the previous libraries in COMP_LIBS
    results in a warning message and quits.
------------------------------------------------------------
revno: 558
committer: Nick Papior <nickpapior@gmail.com>
branch nick: trunk
timestamp: Fri 2016-08-19 07:32:11 +0200
message:
  Updated transiesta-tbtrans tests with the new settings
  
  - Everything seems in order. In fact some of the
    convergence properties are now better due to the
    constraint on the Hamiltonian.
  
  - Fixed the print-out of error on the energy density
    matrix to print in eV.
  
  - Fixed scripts for TS tests to only compile tbtrans
    if it isn't already compiled.
  
  - Removed mentions of old flags in the TS test.
    Also corrected those which have farther than principal
    cell connections.
    In these situations I have added a remark for the flag
    so it should be clear its use is highly discouraged.
------------------------------------------------------------
revno: 557
committer: Nick Papior <nickpapior@gmail.com>
branch nick: trunk
timestamp: Thu 2016-08-18 12:36:36 +0200
message:
  Enabled EDM convergence criteria, controls the forces
  
  - The convergence criteria now enables converging the
    energy density matrix.
  
    This is a simple addition which does not introduce
    any complexity to the code.
    I expect it may be used to control the fineness of
    the force calculations.
    It does, however, not seem too much different than
    the Hamiltonian convergence.
------------------------------------------------------------
revno: 556
committer: Nick Papior <nickpapior@gmail.com>
branch nick: trunk
timestamp: Thu 2016-08-18 11:02:14 +0200
message:
  Re-runned all tests and updated the reference tests
  
  - I have re-runned all tests with the new defaults (mix hamiltonian
    and H converge as well.)
  
    A couple of the tests showed changes (see r554) which could
    be explained by a not fully converged system in the mix DM case.
  
    As such it seems these new defaults exhibit superior convergence
    and, hopefully, more consistent results as both the Hamiltonian and
    DM are converged.
  
    It would perhaps be interesting to also converge EDM?
  
  - A couple of the tests was not added in the previous reference frame
    and they are now there.
    I haven't compared these against the old version.
    These tests are:
      anneal-cont.out
      carbon_nanoscroll.out
      dipole_correction.out
      fe_cohp.out
      fe_noncol_kp.out
      fen.out
      force_constants.out
      ge111.out
      h2o-rhog-mixing.out
      h2o_2.out
      pb_bulk.out
      si001.out
      sinw.out
      sinw_2.out
      
------------------------------------------------------------
revno: 555
committer: Nick Papior <nickpapior@gmail.com>
branch nick: trunk
timestamp: Thu 2016-08-18 09:24:34 +0200
message:
  Updated documentation, PAO and AtomicCoordinates in new format
  
  - Updated all PAO and AtomicCoordinates entries to the new format.
------------------------------------------------------------
revno: 554
committer: Nick Papior <nickpapior@gmail.com>
branch nick: trunk
timestamp: Thu 2016-08-18 07:56:45 +0200
message:
  Run all tests, solved merge problems and updated convergence criteria
  
  - Re-run all tests.
  
    This showed a couple of interesting things.
  
    1. There was a mistake in the compute_dm code after
    the PEXSI merge when spin-orbit coupling was introduced
    2. I have removed Hprev as it essentially is the same as
    Hold. Either way it shouldn't produce a huge difference
    in the tracking of the dEbs, etc. (after all they are
    not physically used other than for convergence criteria)
    3. The change to SCF.Mix Hamiltonian resulted in a huge
    number of changes in the output. This is because the first
    step prints out the energies at INIT. However, the Hamiltonian
    is different because it is initialized after the compute_dm step.
  
  - Changed the logic in convergence criteria.
    Now the convergence criterias are additive and may be fully controlled.
    However, at least one convergence criteria must be used.
  
    Now the default convergence criteria is both the Hamiltonian and the density
    matrix.
  
    This is updated in the manual and the compatibility note.
  
  - Initially I thought the above differences in the energies was
    due to inconsistencies after r538. Hence I have created some
    simple routines in the m_energies.f90 code which updates a selected
    few of the energies.
    I think this should be adopted in the future to ensure that all
    calls to update energies are consistent.
    This will make changes to energy calculations less error-prone.
  
  - Implemented the spin-type in the following routines:
     compute_dm
     final_H_f_stress
     state_init
  
  - Changed the m_compute_max_diff to an interface code with appropriate
    size calculations. There was no reason for explicitly using the
    sparse pattern.
  
  - Fixed a bug in the molecularmechanics code (introduced by Nick r542)
  
  - Added a cyclediffs.sh script which loops on OUT.diffs files and
    it lets one easily cycle the diffs, simply do:
  
    cd Tests
    make check
    ./cyclediffs.sh
  
    and answer all the questions. Basically it makes deletes OUT.diffs
    which you have agreed isn't really a change.
  
  - The tests may now be runned via:
  
     make MPI="mpirun -np 4"
     
    which then uses the default SIESTA location.
  
    Currently the script checks whether mpirun/mpiexec
    is in SIESTA variable, and if so, does not use MPI variable.
    This makes it easier to decide on the number of cores without
    writing the full path.
------------------------------------------------------------
revno: 553
committer: Nick Papior <nickpapior@gmail.com>
branch nick: trunk
timestamp: Tue 2016-08-16 08:21:30 +0200
message:
  Updated SCF print-outs
  
  - Now dDmax and dHmax are both printed (always)
  
  - Added more digits to the output so that non-collinear
    and spin-orbit etc. have the same format.
  
  - After the final step the fermi energy is now also printed
    in the list of Final energies
------------------------------------------------------------
revno: 552
committer: Nick Papior <nickpapior@gmail.com>
branch nick: trunk
timestamp: Sat 2016-08-13 16:00:08 +0200
message:
  Fixed none orbital pivoting ('none' should be equivalent to orb+none)
  
  - If a transiesta users requests Pivot 'none' there
    was a bug related to defaulting the atomic pivoting
    table.
    This has been fixed now.
    
------------------------------------------------------------
revno: 551
committer: Nick Papior <nickpapior@gmail.com>
branch nick: trunk
timestamp: Sat 2016-08-13 12:06:00 +0200
message:
  Enabled BLAS and LAPACK sources shipped with siesta fixes lp:1593706
  
  - Updated blas.f and lapack.f to encompass all required
    routines to succesfully compile siesta without having the
    blas and lapack libraries.
  
    We still do not recommend this as performance libraries
    (especially BLAS) will drastically improve performance.
  
    The current sources (without comments) are taken from
    the lapack svn repository at revision 1776 (v3.6.1)
  
  - To make it easier to update the scripts in future
    commits a create.sh script and linalg2file.py script
    are added which enables to retrieve the correct sources
    from the basic lapack/blas sources.
  
  - Updated documentation which describes libsiestaBLAS/LAPACK.a
  
  - Enabled libsiestaBLAS/LAPACK.a in tbtrans
  
    
------------------------------------------------------------
revno: 550
committer: Nick Papior <nickpapior@gmail.com>
branch nick: trunk
timestamp: Fri 2016-08-12 08:34:43 +0200
message:
  Updated documentation and explained more on TS.Analyze
------------------------------------------------------------
revno: 549
committer: Nick Papior <nickpapior@gmail.com>
branch nick: trunk
timestamp: Fri 2016-08-12 07:59:02 +0200
message:
  Made transiesta analyzation start sooner
  
  - Moving the analyzation step more up uses less
    memory and allows extremely large systems to be
    analyzed on small laptops (execution time may be
    long).
  
  - Introducing a pivoting table for looking up the
    min/max columns improved rgn2tri algorithm by orders
    of magnitude.
  
  - Moved a couple of the integers to long for large
    scale calculations.
  
  - Removed METIS from rgn2tri analyzis
------------------------------------------------------------
revno: 548
committer: Nick Papior <nickpapior@gmail.com>
branch nick: trunk
timestamp: Thu 2016-08-11 21:47:18 +0200
message:
  Fixed command line options for siesta
  
  - The PEXSI branch introduced command line-options.
    However, that was also introduced in transiesta branch
    Now they are merged in a standard form.
  
  - Updated manual to reflect these changes.
  
  - Also fixed bug for piping AND using command line options
------------------------------------------------------------
revno: 547
committer: Nick Papior <nickpapior@gmail.com>
branch nick: trunk
timestamp: Thu 2016-08-11 18:51:04 +0200
message:
  Updated compatibility notes, MixH -> default
  
  - Updated compatibility notes for specifics regarding the 4.1
    release
  
  - Made MixHamiltonian the default mixing option.
  
  - Updated documentation for siesta by moving a couple of the
    basic entries to the new format.
------------------------------------------------------------
revno: 546
committer: Nick Papior <nickpapior@gmail.com>
branch nick: trunk
timestamp: Wed 2016-08-10 13:29:54 +0200
message:
  Removed superfluous print-outs
  
  - The memory print-outs was more than likely related
    to PEXSI for checking that the splitting of the workers
    and PEXSI-nodes
  
  - The entropy print-out is now only performed in PEXSI compilations
  
  - The defaults for the timers are now reverted in case of non-PEXSI
    runs.
  
  - Updated the manual for a couple of entries related to timings.
------------------------------------------------------------
revno: 545
committer: Nick Papior <nickpapior@gmail.com>
branch nick: trunk
timestamp: Wed 2016-08-10 13:00:11 +0200
message:
  Fixed PEXSI compilation and deferred the Nodes count
  
  - A couple of define flags for PEXSI was not up to date,
    possibly lost during the merge(?). Well...
  
  - Updated print-out of computational method in read_options.
  
  - Moved printing of number of nodes to one line
------------------------------------------------------------
revno: 544
committer: Nick Papior <nickpapior@gmail.com>
branch nick: trunk
timestamp: Wed 2016-08-10 09:53:46 +0200
message:
  Finalized the NOTES.documentation about the tags.
------------------------------------------------------------
revno: 543
fixes bug: https://launchpad.net/bugs/1611265
committer: Nick Papior <nickpapior@gmail.com>
branch nick: trunk
timestamp: Wed 2016-08-10 09:29:39 +0200
message:
  Small fixes in m_mixing according to lp:1611265
  
  - Fixed OpenMP statement
  
  - Fixed double naming of constants and routines
  
  - Fixed history_init calls in transiesta
------------------------------------------------------------
revno: 542 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: trunk
timestamp: Mon 2016-08-08 15:09:40 +0200
message:
  Merged documentation, see Docs/branch-changes/NOTES.documentation
  
  This merge introduces a new documentation scheme for LaTeX.
  It intrinsically introduces clickable fdf-flags and creates 3
  relevant indices, 1) regular index, 2) fdf-flag (only!) index
  and a files index.
  
  Test-suite ran. No problems (some of them, however, needs to be 
  updated such that problems shouldn't occur)
    ------------------------------------------------------------
    revno: 527.1.33
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: documentation
    timestamp: Mon 2016-08-08 13:48:54 +0200
    message:
      Updated documentation of the diag part.
      
      More flags are converted into the new fdfentry method.
      
      Fixed references for the transiesta electrode setup
      and the mixing variables.
      One should use the fdfindex* variant for sub-options in
      blocks.
    ------------------------------------------------------------
    revno: 527.1.32
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: documentation
    timestamp: Sat 2016-08-06 10:11:02 +0200
    message:
      Fixed a few remaining things of the documentation
      
      Added documentation at the top of the siesta.tex
      file. There a short explanation of the simple
      mechanisms for writing new documentation is created.
      
      Added nag package which will complain about certain
      use of ancient commands.
    ------------------------------------------------------------
    revno: 527.1.31
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: documentation
    timestamp: Fri 2016-08-05 13:58:38 +0200
    message:
      Updated date for the documentation
    ------------------------------------------------------------
    revno: 527.1.30
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: documentation
    timestamp: Fri 2016-08-05 13:29:08 +0200
    message:
      Added PEXSI reference, changed PEXSI documentation to new style
      
      Fixed minor things in the fdf setup for the manual in TeX.
    ------------------------------------------------------------
    revno: 527.1.29
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: documentation
    timestamp: Fri 2016-08-05 12:36:09 +0200
    message:
      Updated release.sh, updated NOTES, added Ramon as contributor
    ------------------------------------------------------------
    revno: 527.1.28
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: documentation
    timestamp: Fri 2016-08-05 11:59:13 +0200
    message:
      Added tags and updated release.sh
      
      Also moved branch-changes into NOTES.documentation
    ------------------------------------------------------------
    revno: 527.1.27 [merge]
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: documentation
    timestamp: Fri 2016-08-05 09:30:26 +0200
    message:
      Merged trunk-540
    ------------------------------------------------------------
    revno: 527.1.26
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: documentation
    timestamp: Thu 2016-08-04 16:57:19 +0200
    message:
      Added Docs/release.sh script for easy creation of tar.gz
      
      This script enables easier release tar.gz files with a consistent
      format.
      The main functionality is that it will create a folder:
         siesta-releases
      in the main folder where it will create a branch at the specified
      tag. It will subsequently build the documentation and create
      any necessary changes to the code that is necessary before
      making the code available publicly.
      
      This script is provided by Nick R. Papior
    ------------------------------------------------------------
    revno: 527.1.25
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: documentation
    timestamp: Thu 2016-08-04 14:28:34 +0200
    message:
      Updated documentation for change of list in fdf
      
      Added documentation of PEXSI
      
      Added documentation of Accuracy control and principal
      cell connections.
    ------------------------------------------------------------
    revno: 527.1.24 [merge]
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: documentation
    timestamp: Fri 2016-07-29 16:26:45 +0200
    message:
      Merged trunk
      
      Added documentation for fdict and ncdf
    ------------------------------------------------------------
    revno: 527.1.23
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: documentation
    timestamp: Fri 2016-07-29 10:11:38 +0200
    message:
      Added documentation of external libraries
      
      Documented BLAS/LAPACK/ScaLAPACK/MPI/OpenMP/NetCDF4
      in the manual.
      
      Also added documentation of how to compile and run
      siesta using OpenMP.
      
      The NetCDF4 documentation is now also in place.
    ------------------------------------------------------------
    revno: 527.1.22
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: documentation
    timestamp: Mon 2016-07-25 10:25:13 +0200
    message:
      Added documentation of charge/hartree gate
      
      - The Charge/Hartree gate is now documented.
      
      - Added an \ifdeprecated which may be used to
        keep old flags in the manual.
      
      - The old mixing options are now deprecated and
        partially removed (may be re-instantiated by
        setting \deprecatedtrue in the heading)
        However, the options are not used.
    ------------------------------------------------------------
    revno: 527.1.21
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: documentation
    timestamp: Fri 2016-07-22 11:08:31 +0200
    message:
      Added projection documentation for tbtrans
    ------------------------------------------------------------
    revno: 527.1.20
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: documentation
    timestamp: Thu 2016-07-21 22:40:37 +0200
    message:
      Enabled size compilation of manual, as well as screen
      
      - Updated the makefile for the documentation.
        Now it can build the manual in different formats:
      
          make SIZE=10|11|12
          
        will control the font-size of the manual.
      
      - One can also compile the manual in a screen, two-column format
        which may be easier to read on a big screen.
      
          make all
      
        will create all different documentations:
           siesta.pdf, siesta-screen.pdf
           tbtrans.pdf, tbtrans-screen.pdf
    ------------------------------------------------------------
    revno: 527.1.19 [merge]
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: documentation
    timestamp: Thu 2016-07-21 14:24:27 +0200
    message:
      Merged trunk-530
    ------------------------------------------------------------
    revno: 527.1.18
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: documentation
    timestamp: Thu 2016-07-21 14:22:08 +0200
    message:
      Added tbtrans documentation
      
      - The tbtrans documentation is nearly complete.
        Currently I think I only need to document the projection
        stuff.
      
      - The tbtrans manual is a separate document. This is because
        I hope it will encourage the use of tbtrans as a separate
        program.
      
      - Added preliminary placeholder for transiesta article.
      
      - Updated keywords for electrodes to be more generic.
        Now TSHS == HS and Rep.A1 is not used anymore.
        TSDE == DE
      
      - Cleaned the molecular mechanics module.
    ------------------------------------------------------------
    revno: 527.1.17
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: documentation
    timestamp: Tue 2016-07-19 15:12:52 +0200
    message:
      Finalized transiesta documentation
      
      - All tbtrans documentation has been removed.
        This will be present in a separate manual.
      
      - Changed the default Poisson position to be the
        cell.
    ------------------------------------------------------------
    revno: 527.1.16
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: documentation
    timestamp: Tue 2016-07-19 13:45:05 +0200
    message:
      Fixed mixing with restarts of zero
    ------------------------------------------------------------
    revno: 527.1.15
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: documentation
    timestamp: Tue 2016-07-19 10:08:25 +0200
    message:
      Fixed mixing for GR such that it may be used again
      
      - Re-enabled GR mixing scheme. Currently it does
        not work with transferring the history to this one
    ------------------------------------------------------------
    revno: 527.1.14
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: documentation
    timestamp: Mon 2016-07-18 11:16:51 +0200
    message:
      Added more TS documentation
      
      - Added equilibrium contour documentation
      
      - Added non-equilibrium contour documentation
      
      - Added how to put in atoms in the input block
      
      - Reduced the Fermi function cutoff energy (2.5 kT)
        is now the new minimum.
    ------------------------------------------------------------
    revno: 527.1.13
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: documentation
    timestamp: Fri 2016-07-15 16:36:30 +0200
    message:
      Added contour documentation. Still things that are missing
      
      - Added more documentation of the contour options for
        transiesta
      
      - Fixed cell-side constraint in the m_fixed.F90 module
    ------------------------------------------------------------
    revno: 527.1.12
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: documentation
    timestamp: Wed 2016-07-13 15:53:28 +0200
    message:
      Added documentation of transiesta
      
      - Updated the documentation to contain information regarding
        the regular transiesta options.
      
      - There are still quite a bit of flags that needs to be added.
    ------------------------------------------------------------
    revno: 527.1.11
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: documentation
    timestamp: Fri 2016-07-08 22:17:30 +0200
    message:
      Added documentation of the Geometry.Constraints
      
      - Updated the documentation of the Geometry.Constraints
        to follow the latest implementations.
      
        Remark that now cellangle, cellside, center, rigid
        now work.
    ------------------------------------------------------------
    revno: 527.1.10
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: documentation
    timestamp: Fri 2016-07-08 17:15:47 +0200
    message:
      Beginning of converting mix to separate calls
      
      - Almost updated everything to be consistent in terms
        of the Pulay vs. Broyden mixing.
        Now Broyden is implemented similarily as the Pulay
        mixing scheme where it is much clearer how they are
        similar.
      
      - Currently the Pulay-GR is not functioning.
    ------------------------------------------------------------
    revno: 527.1.9
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: documentation
    timestamp: Thu 2016-07-07 12:29:39 +0200
    message:
      Added tests of mix_linear|pulay|broyden for easy checks
    ------------------------------------------------------------
    revno: 527.1.8
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: documentation
    timestamp: Wed 2016-07-06 15:38:33 +0200
    message:
      Added the tex/physics.tex file and the bib file
      
      - Added the bibliography
      
      - Added physical constants.
    ------------------------------------------------------------
    revno: 527.1.7
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: documentation
    timestamp: Wed 2016-07-06 15:14:24 +0200
    message:
      Added documentation of the new mixing options
      
      - Added initial documentation of the SCF mixing options.
      
      - Removed the possibility of adding a linear initial mixer
        I cannot see how this is (standard) a good idea.
      
        In any case, it can be realized using the more advanced input
        format of the mixing options.
      
      - Fixed the next|restart.p calculation.
      
        Now it is the relative difference between the previous residual.
    ------------------------------------------------------------
    revno: 527.1.6
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: documentation
    timestamp: Tue 2016-07-05 14:52:10 +0200
    message:
      Changed mixing keywords
      
      - Instead of SCF.Mix we now use SCF.Mixer(s)
      
        This has the benefit that SCF.Mix may be used
        to set the mixing quantity via:
          SCF.Mix DM|Hamiltonian|charge
        and the block SCF.Mixers control the input mixers.
      
      - Enabled SCF.Mix DM|Hamiltonian|charge
        To control the quantity mixed.
      
        The old keywords are now noted as deprecated and
        but we still retain their use as defaults.
    ------------------------------------------------------------
    revno: 527.1.5
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: documentation
    timestamp: Tue 2016-07-05 13:37:03 +0200
    message:
      Updated the mixing method preparing for the documentation
      
      - Now the option reading is much more easy
        and it actually behaves as expected with less
        complexity
      
      - Fixed the "after convergence" run.
      
      - Now there may be two next's.
      
        One for itterations, and one for after-convergence.
      
      - Extended the scfmix test to use a variety of mixers.
        Also updated the reference. (note this has debugging
        options)
      
      - Moved siesta_options regarding the mixing settings
        to m_mixing_scf for clarity.
      
      - Added printing of the mixing blocks such that users
        may easily extend them (just like PAO.Basis block)
      
      - Removed some unnecessary fdf key words.
    ------------------------------------------------------------
    revno: 527.1.4
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: documentation
    timestamp: Tue 2016-07-05 07:44:56 +0200
    message:
      Removed all tt/it/sc/bf hanging in new-lines
    ------------------------------------------------------------
    revno: 527.1.3
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: documentation
    timestamp: Mon 2016-07-04 22:23:30 +0200
    message:
      Changed textsc siesta/transiesta to \siesta/\tsiesta
    ------------------------------------------------------------
    revno: 527.1.2
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: documentation
    timestamp: Mon 2016-07-04 16:38:28 +0200
    message:
      Changed tt/it/sc/bf
      
      Updated all tt/it/sc/bf tex commands to the newer
      latex commands.
    ------------------------------------------------------------
    revno: 527.1.1
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: documentation
    timestamp: Mon 2016-07-04 16:34:00 +0200
    message:
      Enabled initial new documentation layout
      
      - Added generic parser of fdf keywords using
        |#1|. This enables more efficient documentation
        as the keywords become less cluttered.
      
      - 3 indices are now present in the siesta
        manual. These encompass regular, files and fdf-flags.
------------------------------------------------------------
revno: 541
committer: Nick Papior <nickpapior@gmail.com>
branch nick: trunk
timestamp: Fri 2016-08-05 14:19:32 +0200
message:
  Temporary work-around for supercell changes
  
  The TS branch introduced a kill of siesta when the supercell
  was changed during an MD. This may not always be the case if the
  supercell structure is correct, but the connected supercells are
  changing. In that case will it be acceptable to continue. However,
  there may be cases where this is not applicable.
  This will be fully fixed in future cases where the supercell information
  is retained in restart files.
------------------------------------------------------------
revno: 540
committer: Nick Papior <nickpapior@gmail.com>
branch nick: trunk
timestamp: Thu 2016-08-04 15:17:48 +0200
message:
  Moved many of the CHANGES files to the branch-changes
  
  Their use will probably be discouraged to be used.
  
  The one main use for future CHANGES would provide a complete (single)
  detailed description of the branch changes.
------------------------------------------------------------
revno: 539 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: trunk
timestamp: Thu 2016-08-04 14:19:02 +0200
message:
  Merged transiesta
  
  Added die routine for non-complete principal connections
  and precision control of the SE convergence.
  
  Changed the { to [ for list construction in FDF.
  
  Added fdf_bphysical to read 'VN' (value name)
    ------------------------------------------------------------
    revno: 537.1.3
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: transiesta
    timestamp: Thu 2016-08-04 14:14:42 +0200
    message:
      Added fdf_bphysical and change { to [ in list creations
      
      The sample.f90 has been checked and works correctly and
      thus all lists may now be used as [. This is to accommodate
      future { for dictionaries etc.
      
      Added a fdf_bphysical routine for reading physical quantities
      in blocks.
      
      Added a copy statement to the dictionary.
    ------------------------------------------------------------
    revno: 537.1.2
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: transiesta
    timestamp: Mon 2016-08-01 06:51:05 +0200
    message:
      transiesta now dies if the principal cell is not enforced
      
      This may be controlled by the:
        TS.Elecs.Neglect.Principal
      or for tbtrans
        TBT.Elecs.Neglect.Principal
      We do this because it may often be misused by people unaware of the
      physical implications of not having principal cell connections.
    ------------------------------------------------------------
    revno: 537.1.1
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: transiesta
    timestamp: Sun 2016-07-31 09:48:22 +0200
    message:
      Added accuracy control to transiesta on a per-electrode case
      
      Through fdf-flags one may control the accuracy required for the
      convergence of the self-energies. This enables finer control of
      the self-energy calculations and in some cases it may be useful.
------------------------------------------------------------
revno: 538 [merge]
committer: Alberto Garcia <albertog@icmab.es>
branch nick: trunk
timestamp: Thu 2016-08-04 11:27:45 +0200
message:
  Merged PEXSI-solver interface code
  
  Please see the manual for the new options related to the PEXSI
  solver. Keep in mind that this solver is competitive only for very
  large calculations.
  
  Alberto Garcia thanks Lin Lin, Chao Yang, Georg Huhs, and Nick Papior
  for their help with the design and coding of the interface.
  
  Developer note: Please see the "Notes for PEXSI operation" in
  Src/siesta.F for a brief overview of the basic coding changes
  that need to be kept into account for further development work.
    ------------------------------------------------------------
    revno: 432.2.128
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Thu 2016-08-04 11:03:32 +0200
    message:
      Use SIESTA__PEXSI as symbol, and .LDOS. instead of .localdos.
      
      Updated "ifdefs" to use SIESTA__PEXSI as flag. 
      
      PEXSI local DOS routines now use  .LDOS. fdf flags. Updated test files.
      
      (+ make previous 2D-array MPI "gather" interface changes in .lit files)
    ------------------------------------------------------------
    revno: 432.2.127
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Wed 2016-08-03 08:44:11 +0200
    message:
      Cleaner fix for init_spin behavior
      
      The nspin, spinor_dim, et al integer pointers in 'm_init' have now
      been initialized to 'null()', and the 'init_spin' routine is now
      called by all processes in 'siesta_init'.  This is the cleanest way to
      fix the problem described in the previous commit.
      
      Note that the PEXSI routines still use the 'nspin' variable internally
      to refer to both 'spinor_dim' and 'h_spin_dim'. This will be changed when
      mixed-spin solving is implemented.
      
      modified:
        Src/m_spin.F90
        Src/siesta_init.F
    ------------------------------------------------------------
    revno: 432.2.126
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Sun 2016-07-31 02:31:34 +0200
    message:
      Fix bug related to init_spin behavior
      
      The PEXSI-only processes do not call 'init_spin', and rely on a
      broadcast from the Siesta_worker nodes to get certain information. As
      nspin, spinor_dim, et al were integer pointers in 'm_init', they were
      undefined on entry to the PEXSI interface routines, causing segfaults.
      They have been converted to plain integers for now, pending a review
      of other possible ways to fix the problem. 
      
      Some pointers in sparse_matrices have been initialized to null().
      
      A test to catch non-collinear or spin-orbit cases has been added
      before the call to the PEXSI solver.
      
      Note that the PEXSI routines still use the 'nspin' variable internally
      to refer to both 'spinor_dim' and 'h_spin_dim'. This will be changed when
      mixed-spin solving is implemented.
      
      Added Tests/sih-pexsi-spin.
      
      modified:
        Src/compute_dm.F
        Src/m_spin.F90
        Src/siesta_analysis.F
        Src/sparse_matrices.F
      added:
        Tests/sih-pexsi-spin
    ------------------------------------------------------------
    revno: 432.2.125
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Sat 2016-07-30 03:43:32 +0200
    message:
      Put back the MPI interfaces
      
      The custom MPI interfaces in Src/MPI are now compiled
      by default, except if the preprocessor option
      
       -DNO_MPI_INTERFACES
      
      is specified.
      
      + 2D arrays have to be passed as a(1,1) in the
        mpi_(all)gather calls in the pexsi modules...
      
      + Update pexsi arch.makes in Src/Sys
    ------------------------------------------------------------
    revno: 432.2.124
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Sat 2016-07-30 02:20:25 +0200
    message:
      Wrap PEXSI code within preprocessor blocks
      
      The mechanism is similar to that used for TranSiesta.
      
      (Also wrapped ELPA code within MPI preprocessor blocks)
    ------------------------------------------------------------
    revno: 432.2.123
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Fri 2016-07-29 23:56:47 +0200
    message:
      Remove old pexsi code
      
      removed:
        Src/OldPEXSI/
        Src/dummy_pexsi/
        Src/m_pexsi_solver.F90_old
    ------------------------------------------------------------
    revno: 432.2.122 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Fri 2016-07-29 23:48:56 +0200
    message:
      Sync to trunk-537 (removal of fdf_global_get + fixes)
    ------------------------------------------------------------
    revno: 432.2.121 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Fri 2016-07-29 23:42:13 +0200
    message:
      Sync to trunk-535 (after ELPA/MRRR merge + fdict changes)
    ------------------------------------------------------------
    revno: 432.2.120
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Thu 2016-07-28 15:00:13 +0200
    message:
      Add flag to turn off calculation of forces
      
      With the fdf setting 'compute-forces F' the program will skip the call
      to 'post_scf_work' in 'siesta_forces'. This is for debugging purposes
      only.
      
      modified:
        Src/siesta_forces.F
        
        
    ------------------------------------------------------------
    revno: 432.2.119
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Tue 2016-07-26 16:22:59 +0200
    message:
      Clarify the options and filenames to output H and DM
      
      For backwards compatibility, a single SystemLabel.DM file
      is produced by default. If the blocked-format option
      
          Write.Blocked.Matrix T
      
      is used, a variety of files with the '.blocked' suffix might be
      produced. See the manual for a full explanation.
      
      Note that the above performance-enhancing option is NOT enabled
      by default.
      
      modified:
        Docs/siesta.tex
        Src/m_iodm_old.F
        Src/save_density_matrix.F
    ------------------------------------------------------------
    revno: 432.2.118 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Fri 2016-07-22 11:03:08 +0200
    message:
      Sync to trunk-531
      
      Still to test: the NCDF_4 interoperability.
    ------------------------------------------------------------
    revno: 432.2.117 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Thu 2016-07-21 16:36:18 +0200
    message:
      Sync to trunk-525 (after TS merge + few revs)
      
      NOTES: Work in progress.
      Tests run. Some differences still to be explored
      
      write_dm interface: For now, files of the form SystemLabel.DM_MIXED
      and SystemLabel.DM_OUT are produced by Nick's new routine.
      
      Files such as DM_OUT and DM_MIXED (as well as H_DMGEN and H_MIXED) are
      produced by AG's write_spmatrix.
    ------------------------------------------------------------
    revno: 432.2.116 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Thu 2016-07-21 10:42:45 +0200
    message:
      Sync to trunk-508 (after spin-orbit)
    ------------------------------------------------------------
    revno: 432.2.115 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Mon 2016-07-11 15:20:39 +0200
    message:
      Sync to trunk-507 (after LDA+U and a few fixes)
      
      (+ fix change in timer label: itermd-->itergeom)
    ------------------------------------------------------------
    revno: 432.2.114 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Sun 2016-07-10 23:57:58 +0200
    message:
      Sync to trunk-492 (after GPL and a few fixes)
    ------------------------------------------------------------
    revno: 432.2.113 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Sun 2016-07-10 23:15:32 +0200
    message:
      Sync to trunk-476 (after Fix the geometry and DM and H logic)
      
      Note that the logic in the PEXSI branch's siesta_forces.F
      was already more complete than in the trunk, so it has
      been kept unchanged, with minor additions for documentation.
      
      The sparse matrix format is "blocked" by default.
    ------------------------------------------------------------
    revno: 432.2.112 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Sun 2016-07-10 01:56:26 +0200
    message:
      Sync to trunk-475 (after Wannier and sockets)
    ------------------------------------------------------------
    revno: 432.2.111 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Sun 2016-07-10 01:39:39 +0200
    message:
      Sync to trunk-472
    ------------------------------------------------------------
    revno: 432.2.110
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: pexsi-v0.8
    timestamp: Tue 2015-11-10 14:53:01 +0100
    message:
      Fix communicator bug in LDOS routine
      
      The full spatial communicator must be used for the plan, even
      if we use only a pole's worth of processors.
      
      Insert note in the manual regarding the mandatory divisibility of
      the number of MPI processes by PEXSI.npPerPole.
      
      modified:
        Src/pexsi-ldos.lit
        Src/m_pexsi_local_dos.F90
        Docs/siesta.tex
        Docs/LitCode/pexsi-ldos.html
        
    ------------------------------------------------------------
    revno: 432.2.109
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: pexsi-v0.8
    timestamp: Thu 2015-11-05 14:08:52 +0100
    message:
      Avoid stopping the program when the solver does not converge. Update documentation.
      
      Rather than stopping the program immediately, we allow the
      density-matrix normalization step to try to recover the correct number
      of electrons. This is non-optimal but can recover from occassional
      instabilities.
      
      Update the manual.
      
      Create Docs/LitCode to hold the .html files produced (manually for now) from
      the .lit files in Src.
      
      added:
        Docs/LitCode/
        Docs/LitCode/README
        Docs/LitCode/pexsi-dos.html
        Docs/LitCode/pexsi-ldos.html
        Docs/LitCode/pexsi-lit.html
        Docs/LitCode/pexsi-solver.html
        Docs/LitCode/redist-spmatrix.html
      renamed:
        Src/redist-spmatrix.org => Src/redist-spmatrix.lit
      modified:
        Docs/siesta.tex
        Src/Makefile
        Src/m_pexsi_driver.F90
        Src/makefile.lit
        Src/pexsi-solver.lit
        Src/redist-spmatrix.lit
    ------------------------------------------------------------
    revno: 432.2.108
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: pexsi-v0.8
    timestamp: Tue 2015-11-03 15:28:28 +0100
    message:
      Update comments in lit files
    ------------------------------------------------------------
    revno: 432.2.107
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: pexsi-v0.8
    timestamp: Mon 2015-11-02 15:35:42 +0100
    message:
      Implemented DOS and LDOS routines with spin-polarization
    ------------------------------------------------------------
    revno: 432.2.106
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: pexsi-v0.8
    timestamp: Mon 2015-11-02 01:28:08 +0100
    message:
      Added pexsi-dos.lit
    ------------------------------------------------------------
    revno: 432.2.105
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: pexsi-v0.8
    timestamp: Mon 2015-10-26 18:09:00 +0100
    message:
      Update interval when falling back to IC in solver
      
      When the Newton step in the solver falls outside the bracket a new one
      is chosen which includes the jump point. Then a new inertia-count
      cycle begins.
      
      (+ added .make files for MN and Edison)
      
      added:
        Src/Sys/edison-pexsi.make
        Src/Sys/marenostrum-pexsi.make
      modified:
        Src/m_pexsi_driver.F90
        Src/pexsi-lit.org
    ------------------------------------------------------------
    revno: 432.2.104
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: pexsi-v0.8
    timestamp: Tue 2015-10-20 17:45:16 +0200
    message:
      Better support for PEXSI versions
      
      The file f_ppexsi_interface.f90 now "include"s the actual interface
      file from the PEXSI distribution directory. See the new file
      Src/Sys/pexsi-gfortran-openmpi.make for an example of arch.make.
      
      Cosmetics: minimize debugging output.
      
      Some rough edges still remaining:
      
      - Update of estimated mu in inertia-count?
      
      - Treatment of the "large jump" in the Newton method
        (diagnosis criteria and re-bracketing for inertia-count)
        
      - Centralization and documentation of options.
      
      - Cosmetics for output
      
      - Option to treat spin serially in PEXSI
      
      added:
       Src/Sys/pexsi-gfortran-openmpi.make
      modified:
       Src/Makefile
       Src/class_Distribution.F90
       Src/f_ppexsi_interface.f90
       Src/m_pexsi_driver.F90
       Src/m_redist_spmatrix.F90
       Src/pexsi-lit.org
       Src/redist-spmatrix.org
      
      		
    ------------------------------------------------------------
    revno: 432.2.103
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: pexsi-v0.8
    timestamp: Mon 2015-10-19 23:54:30 +0200
    message:
      Simplify class_Distribution
      
      Some constructs were F2003 only (notably the "allocate on assignment").
      There is now a single distribution module with dispatching based on
      the type of distribution.
      
      Some rough edges still remaining:
      
      - Treatment of the "large jump" in the Newton method
        (diagnosis criteria and re-bracketing for inertia-count)
        
      - Centralization and documentation of options.
      
      - Cosmetics for output
      
      - Option to treat spin serially in PEXSI
      
      	
    ------------------------------------------------------------
    revno: 432.2.102
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: pexsi-v0.8
    timestamp: Mon 2015-10-19 10:56:48 +0200
    message:
      First working version for spin-polarization
      
      This version splits the PEXSI communicator to deal
      with spins completely in parallel. Note that the SIESTA
      side still does them serially.
      
      Some rough edges still remaining:
      
      - Treatment of the "large jump" in the Newton method
        (diagnosis criteria and re-bracketing for inertia-count)
        
      - Centralization and documentation of options.
      
      - Cosmetics for output
      
      - Option to treat spin serially in PEXSI
      
      	
    ------------------------------------------------------------
    revno: 432.2.101
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: pexsi-v0.8
    timestamp: Mon 2015-10-19 10:47:36 +0200
    message:
      Version with spin for testing
    ------------------------------------------------------------
    revno: 432.2.100
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: pexsi-v0.8
    timestamp: Mon 2015-10-19 10:40:24 +0200
    message:
      Clarified free_energy issue. Cosmetics
    ------------------------------------------------------------
    revno: 432.2.99
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: pexsi-v0.8
    timestamp: Mon 2015-10-19 10:04:43 +0200
    message:
      Fixed bug in broadcast of nvals. It works
    ------------------------------------------------------------
    revno: 432.2.98
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: pexsi-v0.8
    timestamp: Sun 2015-10-18 20:52:12 +0200
    message:
      Almost there. Some more fixes. Still leaking for spin
    ------------------------------------------------------------
    revno: 432.2.97
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: pexsi-v0.8
    timestamp: Sun 2015-10-18 20:01:43 +0200
    message:
      Almost there. Some memory leak
    ------------------------------------------------------------
    revno: 432.2.96
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: pexsi-v0.8
    timestamp: Sat 2015-10-17 20:03:33 +0200
    message:
      Still broken but closer
    ------------------------------------------------------------
    revno: 432.2.95
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: pexsi-v0.8
    timestamp: Fri 2015-10-16 17:20:19 +0200
    message:
      (Broken) New strategy for redistribution
    ------------------------------------------------------------
    revno: 432.2.94
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: pexsi-v0.8
    timestamp: Thu 2015-10-15 19:15:03 +0200
    message:
      Broken code --just for comments
    ------------------------------------------------------------
    revno: 432.2.93
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: pexsi-v0.8
    timestamp: Wed 2015-10-14 18:22:20 +0200
    message:
      First shot at spin-polarization
    ------------------------------------------------------------
    revno: 432.2.92
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: pexsi-v0.8
    timestamp: Wed 2015-10-14 14:07:01 +0200
    message:
      Preparation for support of spin-polarization
    ------------------------------------------------------------
    revno: 432.2.91
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: pexsi-v0.8
    timestamp: Wed 2015-10-14 11:44:47 +0200
    message:
      Literate version of redist-spmatrix
    ------------------------------------------------------------
    revno: 432.2.90
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: pexsi-v0.8
    timestamp: Tue 2015-10-13 18:26:57 +0200
    message:
      Refine the expert interface for spinless case (work in progress)
      
      Some rough edges still remaining:
      
      - Treatment of the "large jump" in the Newton method
        (diagnosis criteria and re-bracketing for inertia-count)
        
      - Centralization and documentation of options.
      
      modified:
        Src/m_pexsi_driver.F90
        Src/pexsi-lit.org
            
      	
    ------------------------------------------------------------
    revno: 432.2.89
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: pexsi-v0.8
    timestamp: Tue 2015-10-13 16:59:24 +0200
    message:
      Better org structure and cosmetics
    ------------------------------------------------------------
    revno: 432.2.88
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: pexsi-v0.8
    timestamp: Tue 2015-10-13 11:28:28 +0200
    message:
      Bug fixes and clarifications
    ------------------------------------------------------------
    revno: 432.2.87
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: pexsi-v0.8
    timestamp: Mon 2015-10-12 23:52:59 +0200
    message:
      Use an expert interface instead of the simple driver
      
      Call and handle the inertia-count routine and the "Fermi operator"
      calculator.
      Some rough edges regarding termination conditions and tolerance sizes
      (particularly the "energy width" criterion for inertia-count).
      
      modified:
        Src/Makefile
        Src/m_pexsi_driver.F90
        Src/pexsi-lit.org
            
      	
    ------------------------------------------------------------
    revno: 432.2.86
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: pexsi-v0.8
    timestamp: Mon 2015-10-12 13:36:51 +0200
    message:
      Use org-mode for tangling pexsi sources
      
      added:
        Src/pexsi-lit.org
        Src/tangle.sh
      modified:
        Src/m_pexsi.f90
        Src/m_pexsi_driver.F90
      	
    ------------------------------------------------------------
    revno: 432.2.85
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: pexsi-v0.8
    timestamp: Thu 2015-06-18 17:16:33 +0200
    message:
      Fix timing hierarchy in pexsi driver. Manual update
      
      * A timing section was wrongly enclosed in another.
      
      * Document the default values for the DM and H writing options.
      
      modified:
        Docs/siesta.tex
        Src/m_pexsi_driver.F90
    ------------------------------------------------------------
    revno: 432.2.84
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: pexsi-v0.8
    timestamp: Thu 2015-06-18 17:05:30 +0200
    message:
      Update interface to pexsi-v0.8.0
      
      modified:
        Src/f_ppexsi_interface.f90
        Src/m_pexsi.f90
        Src/m_pexsi_dos.F90
        Src/m_pexsi_local_dos.F90
    ------------------------------------------------------------
    revno: 432.2.83
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: pexsi-v0.7
    timestamp: Mon 2014-12-22 12:17:14 +0100
    message:
      Clarifications in the manual. Non-square np-per-pole
      
      Made some clarifications in the manual on the basis of feedback from
      Lin Lin.
      
      - The restriction of being a perfect square for np-per-pole has been lifted. 
      
      - New default of 1 for PEXSI.np-symbfact.
      
      - Clearer labeling for different ways of computing the band-structure
        energy (displayed when verbosity >= 2)
      
      modified:
        Docs/siesta.tex
        Src/m_pexsi.f90
        Src/m_pexsi_dos.F90
        Src/m_pexsi_driver.F90
        Src/m_pexsi_local_dos.F90
    ------------------------------------------------------------
    revno: 432.2.82
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: pexsi-v0.7
    timestamp: Wed 2014-12-17 16:28:01 +0100
    message:
      Some more documentation. Update of PEXSI tests.
      
      added:
        Tests/sih-pexsi/
        Tests/sih-pexsi/makefile
        Tests/sih-pexsi/sih-pexsi.fdf
        Tests/sih-pexsi/sih-pexsi.pseudos
      modified:
        Docs/siesta.tex
        Src/obj_setup.sh
        Tests/si64-pexsi/si64-pexsi.fdf
    ------------------------------------------------------------
    revno: 432.2.81 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: pexsi-v0.7
    timestamp: Wed 2014-12-17 11:16:31 +0100
    message:
      Sync to trunk-464. More documentation.
      
      Improve the documentation of the new framework for H and DM output.
      
      464:  Merge fixes from rc-4.0: constr. forces, MPI compilation, mm.potentials
      463:  Added restart file for smooth continuation of annealing runs (F. Corsetti)
      462:  Improved MPI version of siesta as a subroutine (J.M.Soler)
      461:  %files added to Util/JobList options (J.M.Soler)
      460:  New GGA and VDW functionals (M.Fritz & J.M.Soler)
      
      added:
        Docs/gga.CHANGES
        Docs/rc-4.0.CHANGES
        Src/SiestaXC/Testers/Reference/
        Src/SiestaXC/Testers/test6.f90
        Src/SiestaXC/Testers/test6.m
        Tests/anneal-cont/
        Tests/anneal-cont/README
        Tests/anneal-cont/makefile
        Tests/anneal-cont/script.sh
        Util/DensityMatrix/dmUnblock.F90
        Util/JobList/Examples/Ice/dummyFile
        Util/SiestaSubroutine/ProtoNEB/
      renamed:
        Src/SiestaXC/Testers/test2.f90 => Src/SiestaXC/Testers/test2.F90
      modified:
        Docs/CHANGES
        Docs/siesta.tex
        Pseudo/atom/Docs/atom.tex
        Pseudo/atom/pseudoXML.f
        Pseudo/atom/pxf.F90
        Pseudo/atom/velect.f
        Pseudo/atom/version.h
        Src/MPI/Makefile
        Src/SiestaXC/Testers/makefile
        Src/SiestaXC/Testers/test1.f90
        Src/SiestaXC/Testers/test3.F90
        Src/SiestaXC/Testers/test4.F90
        Src/SiestaXC/Testers/test5.f90
        Src/SiestaXC/atomxc.F90
        Src/SiestaXC/cellxc.F90
        Src/SiestaXC/ggaxc.f
        Src/SiestaXC/ldaxc.f
        Src/SiestaXC/makefile
        Src/SiestaXC/siestaxc.F90
        Src/SiestaXC/vdwxc.F90
        Src/SiestaXC/vv_vdwxc.F90
        Src/SiestaXC/xcmod.f90
        Src/atom.F
        Src/dynamics.f
        Src/fsiesta_mpi.F90
        Src/molecularmechanics.F90
        Src/write_subs.F
        Src/xc.f
        Util/DensityMatrix/README
        Util/DensityMatrix/makefile
        Util/JobList/Examples/Ice/iceChecks.jobs
        Util/JobList/README
        Util/JobList/Src/jobList.f90
        Util/SiestaSubroutine/README
        Src/SiestaXC/Testers/test2.F90
    ------------------------------------------------------------
    revno: 432.2.80
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: pexsi-v0.7
    timestamp: Tue 2014-12-16 12:44:32 +0100
    message:
      More documentation. Cosmetic changes in output
      
      Improve the documentation of some features. 
      Remove very low-level output and wrap other according to verbosity levels
      (work in progress).
      
      modified:
        Docs/siesta.tex
        Src/m_pexsi_dos.F90
        Src/m_pexsi_driver.F90
        Src/m_pexsi_local_dos.F90
        Src/m_redist_spmatrix.F90
    ------------------------------------------------------------
    revno: 432.2.79
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: pexsi-v0.7
    timestamp: Mon 2014-12-15 16:29:08 +0100
    message:
      Document the PEXSI features and update interface to v0.7.3
      
      Wrote the first version of a new section of the manual devoted to
      PEXSI.
      
      Updated the interpretation of the PEXSI.safe-width-ef-solver parameter
      to make it consistent with the psimilar parameter for
      inertia-counting.
      
      Deprecated the use of the parameter PEXSI.inertia-count.
      
      A minor cosmetic change in f_ppexsi_interface.f90 in the official
      v0.7.3.
      
      modified:
        Docs/siesta.tex
        Src/f_ppexsi_interface.f90
        Src/m_pexsi_driver.F90
        Src/Sys/macosx-pexsi.make
    ------------------------------------------------------------
    revno: 432.2.78
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: pexsi-v0.7
    timestamp: Wed 2014-12-03 16:48:01 +0100
    message:
      Fix factor-of-two in DOS from inertia-count
      
      The inertia-count routine counts eigenvalues. Hence, we need
      a factor of two for properly getting the integrated density of states.
      
      modified:
        Src/m_pexsi_dos.F90
    ------------------------------------------------------------
    revno: 432.2.77
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: pexsi-v0.7
    timestamp: Tue 2014-12-02 13:00:10 +0100
    message:
      Re-implemented the local DOS feature
      
      Used the selected-inversion interface.
      The number of processors per pole for this operation can
      be independently specified by
      
         PEXSI.LocalDOS.npPerPole  N
      
      In the absence of this line, the value of PEXSI.npPerPole is used.
      
      NOTE: Due to the extra call to dhscf to convert the reduced DM to the
      LDOS (which is a "charge density" at the desired energy), the file
      Rho.grid.nc is overwritten with the LDOS information. There is
      currently no way to avoid this. The file can be re-generated from the
      SystemLabel.RHO file after the Siesta run using the Util/Grid/grid2cdf
      program.
      
      renamed:
        Src/m_pexsi_local_dos.F90_old => Src/m_pexsi_local_dos.F90
      modified:
        Src/Makefile
        Src/siesta_analysis.F
        Src/m_pexsi_local_dos.F90
    ------------------------------------------------------------
    revno: 432.2.76
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: pexsi-v0.7
    timestamp: Mon 2014-12-01 10:16:24 +0100
    message:
      Fix formatting problems in long source lines
      
      Some lines included backslashes that confused some compilers.  Other
      long lines in the PEXSI modules have now been split to fit within the
      classic 80 columns.
      
      modified:
        Src/m_pexsi_dos.F90
        Src/m_pexsi_driver.F90
    ------------------------------------------------------------
    revno: 432.2.75
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: pexsi-v0.7
    timestamp: Wed 2014-11-26 11:16:45 +0100
    message:
      Re-implement DOS calculation
      
      Use call to the raw inertia-count routine.
      Do not try to re-use the plan, as it would complicate
      the program flow.
      
      renamed:
        Src/m_pexsi_dos.F90_old => Src/m_pexsi_dos.F90
      modified:
        Src/Makefile
        Src/siesta_analysis.F
        Src/m_pexsi_dos.F90
    ------------------------------------------------------------
    revno: 432.2.74
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: pexsi-v0.7
    timestamp: Thu 2014-11-13 11:00:55 +0100
    message:
      Provide a safe bracket around mu for the solver
      
      Revised the heuristics for the 'solver-only' calls to add a bracket
      in case a fall-back to inertia-counting is needed.
      
      modified:
        Src/m_pexsi_driver.F90
    ------------------------------------------------------------
    revno: 432.2.73
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: pexsi-v0.7
    timestamp: Thu 2014-11-06 16:41:14 +0100
    message:
      Add a new 'options' field for mu0, to initialize the solver.
      
      The heuristics for the 'solver-only' calls have to be revised,
      since there is in principle no need for a bracket, but a 
      fall-back to inertia-counting is possible.
      
      modified:
        Src/f_ppexsi_interface.f90
        Src/m_pexsi_driver.F90
    ------------------------------------------------------------
    revno: 432.2.72
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: pexsi-v0.7
    timestamp: Tue 2014-11-04 12:41:23 +0100
    message:
      Use heuristics for re-use of inertia-count brackets
      
      Take some code from the old version to provide heuristics for the
      optimization of initial brackets during the SCF loop. So far only
      the inertia-count stage is treated.
      
      Re-organized the code into internal subroutines for clarity.
      
      modified:
        Src/m_pexsi_driver.F90
    ------------------------------------------------------------
    revno: 432.2.71
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: pexsi-v0.7
    timestamp: Mon 2014-10-27 19:14:29 +0100
    message:
      Reuse plan in simple KSDFT driver
      
      Store the 'plan' in a new m_pexsi module, and 
      initialize and finalize as needed.
      
      Still no optimization of initial bracket during the SCF loop.
      
      added:
        Src/m_pexsi.f90
      modified:
        Src/Makefile
        Src/m_pexsi_driver.F90
        Src/siesta_forces.F
    ------------------------------------------------------------
    revno: 432.2.70
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: pexsi-v0.7
    timestamp: Tue 2014-10-14 11:04:52 +0200
    message:
      Simple KSDFT driver from new interface
      
      Proof of concept.
      No plan reuse.
      No optimization of initial bracket during the SCF loop.
      
      removed:
        Src/m_pexsi_interface.f90
      added:
        Docs/pexsi-v0.7.CHANGES
        Src/Sys/macosx-pexsi.make
        Src/f_ppexsi_interface.f90
        Src/m_pexsi_driver.F90
        Tests/si64-pexsi/
        Tests/si64-pexsi/makefile
        Tests/si64-pexsi/si64-pexsi.fdf
        Tests/si64-pexsi/si64-pexsi.pseudos
      renamed:
        Src/m_pexsi_dos.F90 => Src/m_pexsi_dos.F90_old
        Src/m_pexsi_local_dos.F90 => Src/m_pexsi_local_dos.F90_old
        Src/m_pexsi_solver.F90 => Src/m_pexsi_solver.F90_old
      modified:
        Src/Makefile
        Src/siesta_analysis.F
    ------------------------------------------------------------
    revno: 432.2.69
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Fri 2014-04-25 15:48:05 +0200
    message:
      Implement new PEXSI solver dynamical-tolerance algorithm
      
      The on-the-fly tolerance for the number of electrons can now be
      fine-tuned on the basis of the ratio dDmax/dDtol (i.e., how far from
      convergence we are), instead of through the absolute value of dDmax.
      
      Here dDmax is the measure of last step's deviation in SCF convergence and
      dDtol is the tolerance for SCF convergence.
      
      Parameters:
      
      PEXSI.dynamical-tolerance   (default .false.)
      
      toggles the new algorithm. The default, for compatibility, is to use
      the old one.
      
      The algorithm itself is:
      
            tolerance_exp = log10(dDmax/(tolerance_target_factor*dDtol))
            tolerance_exp = max(tolerance_exp,0.0_dp)*tolerance_preconditioner
            tolerance = PEXSINumElectronToleranceMin * 10.0_dp**tolerance_exp
            tolerance = min(tolerance,PEXSINumElectronToleranceMax)
      
      and the parameters are set by the following keywords and default
      values:
      
       tolerance_target_factor = fdf_get("PEXSI.tolerance-target-factor",5.0_dp)
       tolerance_preconditioner = fdf_get("PEXSI.tolerance-preconditioner",1.0_dp)
      
      For reference, the old algorithm is:
      
         tolerance = Max(PEXSINumElectronToleranceMin, &
                                    Min(dDmax*1.0, PEXSINumElectronToleranceMax))
      and
      
      PEXSINumElectronToleranceMin = 
                  fdf_get("PEXSI.num-electron-tolerance-lower-bound",0.01_dp)
      PEXSINumElectronToleranceMax = 
                  fdf_get("PEXSI.num-electron-tolerance-upper-bound",0.5_dp)
      
      The tolerance will not move up, only down.
      
      The computed tolerance can still be overridden if an absolute
      tolerance is explicitly specified in the fdf file
      
         PEXSINumElectronTolerance =  fdf_get("PEXSI.num-electron-tolerance",&
                                              tolerance)
      
      modified:
        Src/m_pexsi_solver.F90
    ------------------------------------------------------------
    revno: 432.2.68 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Fri 2014-04-25 14:50:01 +0200
    message:
      Sync to trunk-456 [charge-density mixing update]
      
      See CHANGES file for more details
    ------------------------------------------------------------
    revno: 432.2.67 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Thu 2014-02-20 14:47:15 +0100
    message:
      Sync to trunk-456 [charge-density mixing update]
      
      See CHANGES file for more details
    ------------------------------------------------------------
    revno: 432.2.66
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Thu 2014-02-20 14:43:07 +0100
    message:
      Add thermal broadening to inherited bracketing intervals
      
      * When inheriting a bracketing inertia-count interval, the next
      inertia-count or solver steps start with a slightly larger interval,
      broadened by 2kT.
      
      * When the PEXSI solver does not converge, the bracketing interval
      expansion for the subsequent inertia-count step is based on the current
      solver interval, not on the latest inertia-count step's.
      
      modified:
        Src/m_pexsi_solver.F90
    ------------------------------------------------------------
    revno: 432.2.65 [merge]
    author: Georg Huhs <georg.huhs@bsc.es>
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Wed 2014-02-12 10:50:26 +0100
    message:
      Added functionality for tracing with extrae.
      
      (Georg Huhs)
      
      ('extrae' is part of the BSC tracing tools)
      
      For each timing event a user function with the same name is
      registered.  At the end of the run the file 'siesta_user_labels.pcf'
      containing the labels needed for later analysis is created. The
      content of this file needs to be appended to the *.pcf file generated
      by the tracing.
      
      For activating this functionality the code has to be compiled with the
      option 
      
      -DTRACING 
      
      and linked with the 'extrae' library.
      
      The file Src/extrae_module.f90 is taken from extrae 2.4 and might need
      to be updated when using later versions of extrae.
      
      
      When compiling with 
      
        -DTRACING_SOLVEONLY
      
      the tracing is deactivated after initializing Siesta and activated
      again before starting the first pexsi-solve phase.  This ensures that
      for some time the pexsi-solve is not corrupted by tracing-IO. If this
      time-window is too short, the event buffer size can be increased in
      extrae.xml
      
      added:
        Src/extrae_eventllist.F90
        Src/extrae_module.f90
      modified:
        Src/Makefile
        Src/SiestaXC/makefile
        Src/m_pexsi_solver.F90
        Src/siesta.F
        Src/siesta_end.F
        Src/timer.F90
        Src/Sys/marenostrum-III-extrae.make 
        ------------------------------------------------------------
        revno: 432.10.3
        committer: Georg Huhs <ghuhs@bsc.es>
        branch nick: pexsi-devel
        timestamp: Thu 2014-02-06 13:14:44 +0100
        message:
          Bugfix in Makefile
          
          Extended functionality for tracing with extrae.
          
          When compiling with 
            -DTRACING_SOLVEONLY
          the tracing is deactivated after initializing Siesta and activated again before starting the first pexsi-solve phase. 
          This ensures that for some time the pexsi-solve is not corrupted by tracing-IO. If this time-window is too short, the event buffer size can be increased in extrae.xml
          
          The user labels are now written with increasing numbering. 
        ------------------------------------------------------------
        revno: 432.10.2
        committer: Georg Huhs <ghuhs@bsc.es>
        branch nick: pexsi-devel
        timestamp: Tue 2014-02-04 21:06:29 +0100
        message:
          Fixed bug in build system
        ------------------------------------------------------------
        revno: 432.10.1
        committer: Georg Huhs <ghuhs@bsc.es>
        branch nick: pexsi-devel
        timestamp: Tue 2014-02-04 14:39:09 +0100
        message:
          Added functionality for tracing with extrae.
          
          For each timing event a user function with the same name is registered. 
          At the end of the run the file 'siesta_user_labels.pcf' containing the labels needed for later analysis is created. The content of this file needs to be appended to the *.pcf file generated by the tracing. 
          
          For activating this functionality the code has to be compiled with the option 
            -DTRACING
          and linked with the extrae-library. 
          
          The file Src/extrae_module.f90 is taken from extrae 2.4 and might need to be updated when using later versions of extrae. 
    ------------------------------------------------------------
    revno: 432.2.64 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Mon 2014-02-10 11:48:55 +0100
    message:
      Sync to trunk-455
      
      455:  [merge] Charge-density mixing
      454:  [merge] Allow the handling of ghosts of synthetic atoms
      453:  Added a simple ps-->inp converter for ATOM
      452:  Fixed a wrong threshold for the bias for transiesta...
      
      
       
    ------------------------------------------------------------
    revno: 432.2.63
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Fri 2013-12-13 19:12:36 +0100
    message:
      Add option to read a starting Hamiltonian for the scf cycle
      
      When mixing the Hamiltonian, the option
      
        Read-H-from-file T
      
      will use a starting Hamiltonian read from file H_IN. 
      
      (Note that the same option, when used with 'MaxSCFIterations 0', will
      read H to be used in post-processing, such as in (L)DOS calculation.)
      
      modified:
        Src/Makefile
        Src/m_iodm.F
        Src/siesta_forces.F
      
       
    ------------------------------------------------------------
    revno: 432.2.62 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Wed 2013-12-04 15:33:33 +0100
    message:
      Sync to trunk-451
      
      * Use electronic entropy from current scf step. 
      * Do not update EHarris after scf step.
      * Added message detailing which DM is used in 'post_scf_work'
       
      (See CHANGES file)
      
      modified:
        Src/Makefile
        Src/compute_dm.F
        Src/final_H_f_stress.F
        Src/local_DOS.F
        Src/m_energies.F90
        Src/post_scf_work.F
        Src/scfconvergence_test.F
        Src/setup_hamiltonian.F
        Src/siesta_init.F
        Src/write_md_record.F
        Src/write_subs.F
    ------------------------------------------------------------
    revno: 432.2.61 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Tue 2013-12-03 10:59:25 +0100
    message:
      Sync to trunk-450
      
      * Fix SiestaXC/mesh3d to avoid overflow of distributions and/or tasks
      * Fix Tbtrans runs at Gamma when using Transiesta k-point data
      * Minor fixes in XC library (JMS)
      
      (See CHANGES file)
      
      modified:
        Src/SiestaXC/cellxc.F90
        Src/SiestaXC/makefile
        Src/SiestaXC/mesh3d.F90
        Src/SiestaXC/vdwxc.F90
        Src/SiestaXC/vv_vdwxc.F90
        Util/TBTrans_rep/tbtrans.F90
    ------------------------------------------------------------
    revno: 432.2.60 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Mon 2013-11-25 15:19:38 +0100
    message:
      More hooks for PEXSI steering during scf-loop
      
      ** Implement an "expert" inertia-count driver and mu bracket heuristics
      
      With the option
      
        PEXSI.inertia-expert-driver T
      
      the program will call the inertia-count routine requesting a single
      iteration, and use the results in a loop to increase the number of
      criteria for convergence:
      
      -- Electron tolerance in the base interval.
      
      This reflects the basic heuristic that the integrated DOS should be more
      precise as the interval gets shorter. (This was the only criterion up to now.)
      
          PEXSI.inertia-num-electron-tolerance  [default 20]
      
      -- Workable electron tolerance in the base interval.
      
          PEXSI.inertia-min-num-electron-tolerance  [default 10]
      
      There can be problems with the algorithm if the interval is too
      small. Hence this termination criterion.
      
      -- Mu tolerance
      
      If the chemical potential has changed by less than
      
          PEXSI.inertia-mu-tolerance  [default a very small number] unit
      
      from one inertia-count iteration to the next, the cycle ends, and mu is passed
      on to the PEXSI solver.
      
      -- Energy width of the interval (deprecated, as it does not make sense
         for gapped systems)
      
      
      When the inertia-count cycle ends, the bracket passed to the PEXSI solver is:
      
        [muMinInertia, muMaxInertia]  (the refined interval)
      
      ** Implement Ef shift estimation
      
      Using H for the current and the previous iterations, and the most recent DM,
      the program estimates the change in the band-structure energy, and from it
      (assuming a rigid shift), the change in Fermi level. This is passed to
      the PEXSI solver to modify the inherited brackets.
      
      
      ** Add more heuristics for bracketting
      
      Clarification of the workflow. More options to control the number
      of inertia count steps, the bracketting convergence, and the use of
      the information about the shift in Ef:
      
      * In numInertiaCounts is negative, it indicates a minimum number of ic
        steps. There can be more, if the dDmax in the previous iteration is
        above:
      
        safe_dDmax_NoInertia = fdf_get("PEXSI.safe-dDmax-no-inertia",0.05)
      
      * Use of Ef shift:
      
        If the dDmax in the previous iteration is above, respectively:
      
        safe_dDmax_Ef_Inertia = fdf_get("PEXSI.safe-dDmax-ef-inertia",0.1)
        safe_dDmax_Ef_solver = fdf_get("PEXSI.safe-dDmax-ef-solver",0.05)
      
        the bracketting for IC and solver steps is controlled by
      
        safe_width_ic = fdf_get("PEXSI.safe-width-ic-bracket",4.0_dp*eV,"Ry")
       
        (half that width on either side of muLower and muUpper from the latest
         inertia count step)
      
        and
      
        safe_width_solver = fdf_get("PEXSI.safe-width-solver-bracket",2.0_dp*eV,"Ry")
      
        (half that width on either side of mu from the latest solver step)
      
        If the dDmax is below the above tolerance(s), the shift in Ef is used to move the
        previous brackets for IC and/or the solver
      
      
      **  Monitoring of memory peaks by calls to getrusage()
      
      A simple, and crude for now, method to display the maximum resident
      size reached at several points in the program has been implemented,
      with file rusage.f90 (an interface to the C routine getrusage()),
      memory_snapshot.f90, and memory_all.f90. This is not completely
      portable.
      
      'Memory_snapshot' prints the peak working set size reached in the root node.
      
      The routine 'memory_all' prints the maximum and minimum values of the
      peak working set size accross the processors in the communicator. Used
      only in the PEXSI routines for now.
      
      **  Implement PEXSI "Annealing"
      
      Use larger PEXSI temperatures when dDmax is far from convergence.
      This can remove instabilities for problematic systems.
      
      Options:
      
        PEXSI.use-annealing T
      
        PEXSI.annealing-preconditioner  {number} (default 1)
        PEXSI.annealing-target-factor   {number} (default 10)
      
        The effective PEXSI temperature (for solver and inertia-counts processing) is computed
        as:
      
         T = T_0 * ( 1 + precond* log(prevDmax/(target_factor*Dtol))  
      
              (with maximum of T_0)
      
        where 'Dtol' is the scf tolerance, 'prevDmax' is the previous iteration's maximum
        deviation in DM (or H), 'target_factor' determines the level at which the nominal
        temperature is reached in relation to the scf tolerance, and 'precond' is a scale
        factor for the increase in temperature.
      
        After the second iteration, the temperature decreases monotonically, regardless of
        any large fluctuations in prevDmax, to avoid convergence oscillations.
        ------------------------------------------------------------
        revno: 432.9.7
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: trunk-pexsi-brackets
        timestamp: Mon 2013-11-25 14:36:49 +0100
        message:
          Extra parameter for PEXSI "annealing"
          
          Use larger PEXSI temperatures when dDmax is far from convergence.
          This can remove instabilities for problematic systems.
          
          Options:
          
            PEXSI.use-annealing T
          
            PEXSI.annealing-preconditioner  {number} (default 1)
            PEXSI.annealing-target-factor   {number} (default 10)
          
            The effective PEXSI temperature (for solver and inertia-counts processing) is computed
            as:
          
             T = T_0 * ( 1 + precond* log(prevDmax/(target_factor*Dtol))  
          
                  (with maximum of T_0)
          
            where 'Dtol' is the scf tolerance, 'prevDmax' is the previous iteration's maximum
            deviation in DM (or H), 'target_factor' determines the level at which the nominal
            temperature is reached in relation to the scf tolerance, and 'precond' is a scale
            factor for the increase in temperature.
          
            After the second iteration, the temperature decreases monotonically, regardless of
            any large fluctuations in prevDmax, to avoid convergence oscillations.
          
          modified:
            Src/m_pexsi_solver.F90
        ------------------------------------------------------------
        revno: 432.9.6
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: trunk-pexsi-brackets
        timestamp: Fri 2013-11-22 17:14:21 +0100
        message:
          Implement PEXSI "annealing"
          
          Use larger PEXSI temperatures when dDmax is far from convergence.
          This can remove instabilities for problematic systems.
          
          Option:
          
            PEXSI.use-annealing T
            PEXSI.annealing-preconditioner  {number}
          
            See code for details.
          
          modified:
            Src/m_pexsi_solver.F90
        ------------------------------------------------------------
        revno: 432.9.5
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: trunk-pexsi-brackets
        timestamp: Thu 2013-11-21 17:09:03 +0100
        message:
          Add more heuristics for bracketting
          
          Clarification of the workflow. Many more options to control the number
          of inertia count steps, the bracketting convergence, and the use of
          the information about the shift in Ef:
          
          
          * In numInertiaCounts is negative, it indicates a minimum number of ic
            steps. There can be more, if the dDmax in the previous iteration is
            above:
          
            safe_dDmax_NoInertia = fdf_get("PEXSI.safe-dDmax-no-inertia",0.05)
          
          * Use of Ef shift:
          
            If the dDmax in the previous iteration is above:
          
            safe_dDmax_Ef_Inertia = fdf_get("PEXSI.safe-dDmax-ef-inertia",0.1)
            safe_dDmax_Ef_solver = fdf_get("PEXSI.safe-dDmax-ef-solver",0.05)
          
            the bracketting for IC and solver steps is controlled by
          
            safe_width_ic = fdf_get("PEXSI.safe-width-ic-bracket",4.0_dp*eV,"Ry")
           
            (half that width on either side of muLower and muUpper from the latest
             inertia count step)
          
            safe_width_solver = fdf_get("PEXSI.safe-width-solver-bracket",2.0_dp*eV,"Ry")
          
            (half that width on either side of mu from the latest solver step)
          
            If the dDmax is below the tolerance, the shift in Ef is used to move the
            previous brackets for IC and the solver
          
          * Cosmetics
          
            The flow is now more clear.
          
            See the code for a complete rundown of the changes. There are too many
            to list at this stage.
          
          * New version of "memory" routine with basic MPI awareness.
          
            The routine memory_all prints the maximum and minimum values of the
            peak working set size accross the processors in the
            communicator. Used only in the PEXSI routines for now.
          
          added:
            Src/memory_all.F90
          modified:
            Src/Makefile
            Src/m_pexsi_solver.F90
        ------------------------------------------------------------
        revno: 432.9.4
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: trunk-pexsi-brackets
        timestamp: Tue 2013-11-19 16:29:38 +0100
        message:
          Implement Ef shift estimation
          
          Using H for the current and the previous iterations, and the most recent DM,
          the program estimates the change in the band-structure energy, and from it
          (assuming a rigid shift), the change in Fermi level. This is passed to
          the PEXSI solver to modify the inherited brackets.
          
          added:
            Src/compute_ebs_shift.F90
          modified:
            Src/Makefile
            Src/compute_dm.F
            Src/m_pexsi_solver.F90
            Src/setup_hamiltonian.F
            Src/siesta_forces.F
            Src/sparse_matrices.F
            Src/state_init.F
        ------------------------------------------------------------
        revno: 432.9.3 [merge]
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: trunk-pexsi-brackets
        timestamp: Mon 2013-11-18 16:37:46 +0100
        message:
          Sync to trunk-pexsi-54
          
          Deallocate buffers in write_mat.
          
          (+ comment out initial memory snapshot in siesta.F -- no ionode yet)
          
          modified:
            Src/m_matio.F90
            Src/siesta.F
        ------------------------------------------------------------
        revno: 432.9.2
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: trunk-pexsi-brackets
        timestamp: Sat 2013-11-16 17:08:53 +0100
        message:
          Monitoring of memory peaks by calls to getrusage()
          
          A simple, and crude for now, method to display the maximum resident
          size so far at several points in the program has been implemented, with
          file rusage.f90 (an interface to the C routine getrusage()) and 
          memory_snapshot.f90. This is not completely portable.
          
          added:
            Src/memory_snapshot.f90
            Src/rusage.f90
          modified:
            Src/Makefile
            Src/m_pexsi_solver.F90
            Src/siesta.F
            Src/siesta_forces.F
        ------------------------------------------------------------
        revno: 432.9.1
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: trunk-pexsi-brackets
        timestamp: Wed 2013-11-06 17:08:19 +0100
        message:
          Implement an "expert" inertia-count driver and mu bracket heuristics
          
          (Work in progress)
          
          With the option
          
            PEXSI.inertia-expert-driver T
          
          the program will call the inertia-count routine requesting a single
          iteration, and use the results in a loop to increase the number of
          criteria for convergence:
          
          -- Electron tolerance in the base interval.
          
          This reflects the basic heuristic that the integrated DOS should be more
          precise as the interval gets shorter.
          
              PEXSI.inertia-num-electron-tolerance  [default 20]
          
          -- Workable electron tolerance in the base interval.
          
              PEXSI.inertia-min-num-electron-tolerance  [default 10]
          
          There can be problems with the algorithm if the interval is too small. Hence this termination criterion.
          
          -- Mu tolerance
          
          If the chemical potential has changed by less than
          
              PEXSI.inertia-mu-tolerance  [default a very small number] unit
          
          from one inertia-count iteration to the next, the cycle ends, and mu is passed
          on to the PEXSI solver.
          
          -- Energy width of the interval (deprecated, as it does not make sense
             for gapped systems)
          
          
          When the inertia-count cycle ends, the bracket passed to the PEXSI solver is:
          
            [muMinInertia, muMaxInertia]  (the refined interval)
          
          unless the user uses the option 
          
             PEXSI.UseFixedMuBracket T
          
          in which case the bracket is
          
           [muLower - delta/2, muUpper + delta/2]
          
          where delta is controlled by
          
             PEXSI.FixedMuBracket [default 0.4 eV]
          
          added:
            Src/m_interpolate.F90
          modified:
            Src/Makefile
            Src/m_pexsi_solver.F90
    ------------------------------------------------------------
    revno: 432.2.59
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Mon 2013-11-18 16:33:14 +0100
    message:
      Deallocate auxiliary buffers in write_mat
      
      Some buffers were not deallocated at the end of the routine.
      
      modified:
        Src/m_matio.F90
    ------------------------------------------------------------
    revno: 432.2.58
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Wed 2013-10-30 11:20:35 +0100
    message:
      Avoid opening .alloc file when not needed
      
      For alloc-report-level == 0, the SystemLabel.alloc file
      was still opened. This has been fixed.
      
      modified:
        Src/alloc.F90
    ------------------------------------------------------------
    revno: 432.2.57
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Mon 2013-10-28 11:34:27 +0100
    message:
      Fix boundary bug in SiestaXC's vdW code
      
      An erratic misbehavior of the vdW XC code has been traced
      to an improper initialization of an array. It has been fixed.
      
      (Thanks to G. Huhs and J.M. Soler)
      
      modified:
        Src/SiestaXC/mesh1d.f90
    ------------------------------------------------------------
    revno: 432.2.56 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Mon 2013-10-28 11:11:52 +0100
    message:
      Speedup the I/O for DM and H writes
      
      By using blocks of orbitals (according to the underlying default
      block-cyclic distribution), the sparse-matrix I/O can be speeded-up
      significantly, both by saving MPI communication and by reducing the
      number of file accesses. This is essential for large systems, for
      which the I/O could take a significant fraction of the total
      computation time.
      
      The newly re-organized DM and H information is now written to file in
      "blocked format" by default, unless the option
      
             Use.Blocked.WriteMat F
      
      is used.
      
      The new format is not backwards compatible. A converter program
      (Util/DensityMatrix/dmbs2dm.F90) has been written to post-process
      those files intended for further analysis or re-use in Siesta. This is
      the best option for now, since it allows liberal checkpointing with a
      much smaller time consumption, and only incurs costs when re-using or
      analyzing files.
      
      Note that TranSiesta will continue to produce .DM files, in the old
      format (See save_density_matrix.F)
      
      ( To test the new features, the option
      
       S.Only T
      
      can be used. It will produce three files: a standard one, another one
      with optimized MPI communications, and a third, blocked one.
      )
      
      added:
        Docs/pexsi-matio.CHANGES
        Src/m_matio.F90
        Util/DensityMatrix/dmbs2dm.F90
        Util/DensityMatrix/f2kcli.F90
        Util/DensityMatrix/m_getopts.f90
      modified:
        Src/Makefile
        Src/m_iodm.F
        Src/overlap.f
        Src/save_density_matrix.F
        Src/siesta_forces.F
        Util/DensityMatrix/makefile
        ------------------------------------------------------------
        revno: 432.8.6
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: trunk-pexsi-matio
        timestamp: Thu 2013-10-24 11:42:22 +0200
        message:
          Fix bug in dmbs2dm. Change name of argument to write_mat
          
          * A record was missing in the conversion to classic DM format by
          Util/DensityMatrix/dmbs2dm.
          
          * The optional argument to signal blocked operation in write_mat in
          module m_matio has been changed from "historical" to "compatible".
          
          modified:
            Src/m_iodm.F
            Src/m_matio.F90
            Src/overlap.f
            Src/save_density_matrix.F
            Util/DensityMatrix/dmbs2dm.F90
        ------------------------------------------------------------
        revno: 432.8.5
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: trunk-pexsi-matio
        timestamp: Wed 2013-10-23 16:04:01 +0200
        message:
          Write converter from blocked to non-blocked and deploy
          
          The newly re-organized DM and H information is now written
          to file in "blocked format" by default, unless the option
          
                 Use.Blocked.WriteMat F
          
          is used.
          
          The new format is not backwards compatible. A converter
          program (Util/DensityMatrix/dmbs2dm.F90) has been written
          to post-process those files intended for further analysis
          or re-use in Siesta. This is the best option for now, since
          it allows liberal checkpointing with a much smaller time
          consumption, and only incurs costs when re-using or analyzing
          files.
          
          Note that TranSiesta will continue to produce .DM files,
          in the old format (See save_density_matrix.F)
          
          ( To test the new features, the option
          
           S.Only T
          
          can be used. It will produce three files: a standard one,
          another one with optimized MPI communications, and a third,
          blocked one.
          )
          
          
          added:
            Util/DensityMatrix/dmbs2dm.F90
            Util/DensityMatrix/f2kcli.F90
            Util/DensityMatrix/m_getopts.f90
          modified:
            Src/Makefile
            Src/m_iodm.F
            Src/save_density_matrix.F
            Util/DensityMatrix/makefile
        ------------------------------------------------------------
        revno: 432.8.4
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: trunk-pexsi-matio
        timestamp: Tue 2013-10-22 15:11:10 +0200
        message:
          Use larger chunks for file writes
          
          The information in a whole "blocksize"-worth of data is now
          written to a single record on disk. This speeds up the I/O
          significantly.
          
          The new format is not backwards compatible. A new reading routine
          (possibly with on-the-fly blocksize changes) has to be written.
          
          modified:
            Src/Makefile
            Src/m_matio.F90
            Src/overlap.f
            Src/siesta_forces.F
        ------------------------------------------------------------
        revno: 432.8.3
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: trunk-pexsi-matio
        timestamp: Sat 2013-10-19 12:02:06 +0200
        message:
          Functional. Some cosmetics remain
        ------------------------------------------------------------
        revno: 432.8.2
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: trunk-pexsi-matio
        timestamp: Fri 2013-10-18 16:34:08 +0200
        message:
          Added listd
        ------------------------------------------------------------
        revno: 432.8.1
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: trunk-pexsi-matio
        timestamp: Fri 2013-10-18 13:04:44 +0200
        message:
          First shot at new write_Mat
    ------------------------------------------------------------
    revno: 432.2.55 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Tue 2013-10-22 16:26:04 +0200
    message:
      Sync to trunk-447
      
      * Improve the estimation of the orbital distribution blocksize
      * Output file names for dhscf packed in a derived type (JMS)
      
      See the CHANGES file.
      
      modified:
        Docs/CHANGES
        Docs/siesta.tex
        Src/Makefile
        Src/dhscf.F
        Src/files.f
        Src/grdsam.F
        Src/initparallel.F
        Src/local_DOS.F
        Src/m_dminim.F90
        Src/m_pexsi_local_dos.F90
        Src/m_zminim.F90
        Src/parallelsubs.F
        Src/setup_hamiltonian.F
        Src/siesta_analysis.F
        Src/siesta_options.F90
    ------------------------------------------------------------
    revno: 432.2.54
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Thu 2013-10-17 14:56:44 +0200
    message:
      Do not time 'matel' to avoid overheads
      
      For large systems, there are too many calls to matel, and
      the timer overhead is noticeable. Timing calls have been
      disabled in matel.f
      
      modified:
        Src/matel.f
    ------------------------------------------------------------
    revno: 432.2.53
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Thu 2013-10-17 11:35:48 +0200
    message:
      Disable parallel timer by default
      
      When large numbers of processors are used, the "parallel" timer
      (producing the TIMES file) might be inefficient, and introduce
      inbalances in the "tree_timer" (based on walltime on the root node).
      
      The "parallel" timer has been disabled by default. It can be 
      enabled by
      
        Use.Parallel.Timer T
      
      (The "tree_timer" is on by default. It can be disabled by
      
        Use.Tree.Timer F
      )
      
      modified:
        Src/siesta_init.F
        Src/timer.F90
    ------------------------------------------------------------
    revno: 432.2.52
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Wed 2013-10-16 14:22:13 +0200
    message:
      Wrap timing call. Simplify DOS routine. Add output to unit 6.
      
      * A timing call for IterMD was performed by all processors. It has
        been wrapped so that only the SIESTA-workers perform it.
      
      * The new DOS routine now makes a single call to the raw-inertia-count
        routine, with the entire interval and set of shifts.
      
      * A number of output statements have been changed from "write(*, )"
        to "write(6, )" form, and viceversa. If the command-line option
        " -o OUTfile" is used, output to unit 6 will be redirected to
        OUTfile. The rest will end up in the default standard output stream.
        
      modified:
        Src/m_iodm.F
        Src/m_pexsi_dos.F90
        Src/m_pexsi_local_dos.F90
        Src/m_pexsi_solver.F90
        Src/siesta_forces.F
        Src/timer_tree.f90
    ------------------------------------------------------------
    revno: 432.2.51 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Mon 2013-10-14 16:00:32 +0200
    message:
      Richer matrix I/O to facilitate analysis
      
      * Save Hamiltonian and/or DM with proper filenames
      
      New file names:
      
      DM_MIXED: Useful for checkpointing
      DM_OUT:   Last DM computed
      
      H_MIXED:  Useful for checkpointing
      H_DMGEN:  Last H from which the electronic structure was computed
      
      The "mixed" files are produced only in the appropriate runs (MixDM
      (default), or MixHamiltonian).
      
      Other options affecting which files are written:
      
      - Checkpointing options:
      
      WriteDM
      WriteH
      
      - Analysis options:
      
      WriteDM.end.of.cycle
      WriteH.end.of.cycle
      
      - Backwards compatibility:
      
      SCF.MixAfterConvergence
      
      
      * With the option
      
         read-H-from-file T
      
      the program will attempt to read H from the file "H_IN". This is
      useful when performing analyses which only need H (and S), but not
      the DM. 
      
      For example, to compute bands, or (p)DOS:
      
      (... options for bands or (p)DOS...)
      max-scf-iterations 0
      read-H-from-file T
      
      Optionally, since the Fermi level is not computed in these cases, it
      can be set directly in the fdf file:
      
         manual-fermi-level -3.05 eV
      
      The program might still attempt to initialize the DM, and print messages
      mentioning DM input. These are cosmetic issues, but the user should be
      aware that this options are to be used with care.
      
      (+ Place timing call for Analysis in the correct place)
      
      modified:
        Src/Makefile
        Src/m_iodm.F
        Src/m_pexsi_dos.F90
        Src/save_density_matrix.F
        Src/siesta_analysis.F
        Src/siesta_forces.F
        Src/siesta_options.F90
        ------------------------------------------------------------
        revno: 432.7.2
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: pexsi-Hio
        timestamp: Mon 2013-10-14 15:05:44 +0200
        message:
          Optionally read the Hamiltonian for analysis
          
          With the option
          
             read-H-from-file T
          
          the program will attempt to read H from the file "H_IN". This is
          useful when performing analyses which only need H (and S), but not
          the DM. 
          
          For example, to compute bands, or (p)DOS:
          
          (... options for bands or (p)DOS...)
          max-scf-iterations 0
          read-H-from-file T
          
          Optionally, since the Fermi level is not computed in these cases, it
          can be set directly in the fdf file:
          
             manual-fermi-level -3.05 eV
          
          The program might still attempt to initialize the DM, and print messages
          mentioning DM input. These are cosmetic issues, but the user should be
          aware that this options are to be used with care.
          
          
          modified:
            Src/siesta_analysis.F
        ------------------------------------------------------------
        revno: 432.7.1
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: pexsi-Hio
        timestamp: Mon 2013-10-14 13:02:39 +0200
        message:
          Save Hamiltonian and/or DM with proper filenames
          
          New file names:
          
          DM_MIXED: Useful for checkpointing
          DM_OUT:   Last DM computed
          
          H_MIXED:  Useful for checkpointing
          H_DMGEN:  Last H from which the electronic structure was computed
          
          The "mixed" files are produced only in the appropriate runs (MixDM
          (default), or MixHamiltonian).
          
          Other options affecting which files are written:
          
          - Checkpointing options:
          
          WriteDM
          WriteH
          
          - Analysis options:
          
          WriteDM.end.of.cycle
          WriteH.end.of.cycle
          
          - Backwards compatibility:
          
          SCF.MixAfterConvergence
          
          modified:
            Src/Makefile
            Src/m_iodm.F
            Src/save_density_matrix.F
            Src/siesta_forces.F
            Src/siesta_options.F90
    ------------------------------------------------------------
    revno: 432.2.50 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Mon 2013-10-14 11:17:13 +0200
    message:
      Implement cumulative DOS calculation based on raw inertia counts. H flow.
      
      * A new routine (in m_pexsi_dos) can now compute the cumulative DOS
      in a certain enery range using the inertia-count interface.
      
      The routine is activated by
      
      PEXSI.DOS T
      
      and the energy range is specified by:
      
      PEXSI.DOS.emin Energy unit
      PEXSI.DOS.emax Energy unit
      
      If the option
      
         PEXSI.DOS.Ef.Reference   [ T | F ]
      
      is true, the above energies are referred to the Fermi level.
      
      The program produces a file called PEXSI_INTDOS, which contains a
      first line with the Fermi level and the number of electrons, and then
      a number of lines with an energy value (in eV) and the inertia count
      for that value.
      
      The number of energy values (shifts) used can be controlled by the option
      
          PEXSI.DOS.npoints    [ default 200 ]
      
      The actual number will be increased if it is not a multiple of
      nNodes/npPerPole.
      
      The cumulative DOS can be post-processed in a number of ways. One
      option is to generate a file with "approximate eigenvalues" located at
      the points at which there are jumps in the cumulative DOS. This is
      implemented in Util/PEXSI/intdos2eig, which produces a file suitable
      for treatment with Util/Eig2DOS.
      
      * Automated the compilation of the dummy PEXSI library, including
      an option to consider only the new raw-inertia-counts routine.
      See Src/dummy_pexsi.
      
      * final_H_f_stress does not update H (nor S) (even though it writes out
        updated versions to the .HS and .TSHS files...), unless the option
      
           	 UpdateHamiltonianAfterSCF  T
      
        is used (S is still not updated).
      
        The final H going through to the analysis section is then:
       
        -- If mixing the DM, the last H generated and used to compute the DM
      
        -- If mixing H, a mixed version if performing a final mix after convergence.
           If not mixing after convergence, the H used to compute the DM (i.e., Hold).
      
           (To avoid mixing after convergence, use "SCF.MixAfterConvergence F". This
            should be made the default soon).
      
        This should be made more explicit at the argument level.
        ------------------------------------------------------------
        revno: 432.6.6
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: pexsi-dos-bs
        timestamp: Mon 2013-10-14 10:26:23 +0200
        message:
          Option for backwards compatibility in final_H_f_stress
          
          With the option
          
               	 UpdateHamiltonianAfterSCF  T
          
          the program will indeed update H (but still not S) while computing
          the forces and stress. The default (in the PEXSI branch) is not to
          update H.
          
          modified:
            Src/final_H_f_stress.F
        ------------------------------------------------------------
        revno: 432.6.5
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: pexsi-dos-bs
        timestamp: Wed 2013-10-09 15:47:34 +0200
        message:
          Reduce memory use in m_pexsi_dos
          
          Removed "saved H and S" arrays, as they are 'intent(in)' for the
          raw-inertia-count routine.
          
          (There are still some issues with the routine itself)
          
          modified:
            Src/m_pexsi_dos.F90
        ------------------------------------------------------------
        revno: 432.6.4 [merge]
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: pexsi-dos-bs
        timestamp: Mon 2013-10-07 12:43:41 +0200
        message:
          Merge with trunk-pexsi
          
          [ Add option to write the DM at the end of the SCF loop ]
        ------------------------------------------------------------
        revno: 432.6.3
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: pexsi-dos-bs
        timestamp: Mon 2013-10-07 12:36:42 +0200
        message:
          Use new raw-inertia-counts interface for DOS calculation
          
          * Updated the new raw-inertia-counts interface specification and
          used it in the m_pexsi_dos module.
          
          * Automated the compilation of the dummy PEXSI library, including
          an option to consider only the new raw-inertia-counts routine.
          See Src/dummy_pexsi.
          
          added:
            Src/dummy_pexsi/inertiacount.c
            Src/dummy_pexsi/local_dos.c
            Src/dummy_pexsi/makefile
            Src/dummy_pexsi/raw_inertiacount.c
            Src/dummy_pexsi/solver.c
          modified:
            Src/Makefile
            Src/m_pexsi_dos.F90
            Src/m_pexsi_interface.f90
            Src/dummy_pexsi/README
        ------------------------------------------------------------
        revno: 432.6.2
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: pexsi-dos-bs
        timestamp: Fri 2013-10-04 16:17:36 +0200
        message:
          Refinements and bug fixes for DOS based on inertia-counts
          
          * Broadcast Ef...
          
          * Add the option to consider either an absolute energy range, or
          one referred to the fermi level (ef+emin,ef+emax).
          
          * Use a very low temperature in the calls to the inertia-count routine
            for DOS
          
          * Deallocate the auxiliary transfer matrices in the DOS routine.
          
          * Prepare new raw-inertia-counts interface specification
          
          * final_H_f_stress does not update H and S (even though it writes out
            updated versions to the .HS and .TSHS files...). The final H going
            through is then:
           
            -- If mixing the DM, the last H generated and used to compute the DM
            -- If mixing H, a mixed version if performing a final mix after convergence.
               If not mixing after convergence, the H used to compute the DM (i.e., Hold).
          
            This should be made explicit at the argument level.
          
          modified:
            Src/final_H_f_stress.F
            Src/m_pexsi_dos.F90
            Src/m_pexsi_interface.f90
            Src/siesta_analysis.F
        ------------------------------------------------------------
        revno: 432.6.1
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: pexsi-dos-bs
        timestamp: Mon 2013-09-30 16:28:11 +0200
        message:
          First implementation of DOS based on inertia-counts
          
          So far, only the IntDOS is printed out.
          
          added:
            Src/m_pexsi_dos.F90
          modified:
            Src/Makefile
            Src/siesta_analysis.F
    ------------------------------------------------------------
    revno: 432.2.49
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Wed 2013-10-09 12:13:37 +0200
    message:
      Re-organize some timing labels
      
      The timing label 'IterMD' now corresponds explicitly to 'siesta_forces',
      and there is a separate label 'SiestaMove' for the 'siesta_move' routine.
      
      These, together with "Setup", and "Analysis", complete the four main
      blocks of timing information.
      
      Additionally, timing calls for the "cellxc" routine(s) have been added.
      
      modified:
        Src/dhscf.F
        Src/siesta_forces.F
        Src/siesta_move.F
        Src/state_init.F
    ------------------------------------------------------------
    revno: 432.2.48
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Mon 2013-10-07 11:34:51 +0200
    message:
      Add option to write the DM at the end of the SCF loop
      
      For cases in which the DM checkpointing during the scf cycle is not
      desirable, the option
      
      WriteDM.End.Of.Cycle  T
      
      allows one final saving at the end of the cycle.
      By default, this option is turned on if the more general option
      
      WriteDM T
      
      is in effect. 
      
      The conditions upon which the DM (whether mixed or 'dm_out') are saved
      are now spelled out through an explicit argument to the saving
      routine. The end-of-cycle saving section in 'siesta_forces' has been
      moved to an internal routine.
      
      ( + Add timing call for 'siesta_analysis')
      
      modified:
        Src/save_density_matrix.F
        Src/siesta_analysis.F
        Src/siesta_forces.F
        Src/siesta_options.F90
    ------------------------------------------------------------
    revno: 432.2.47 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Mon 2013-09-30 12:58:27 +0200
    message:
      Sync to trunk-445
      
      "New mixing options and simplification of scf loop"
      
      See the CHANGES file for a complete description of the latest features
      merged:
      
      Fixes for TranSiesta continuation and scf loop logic.
      Normalize the DM in the routines that handle it.
      Optionally avoid mixing DM or H after scf-convergence.
      Implement Hamiltonian mixing
      More options for Pulay mixing
      
      (Note that the option to mix the Hamiltonian was already present in the PEXSI
      branch)
    ------------------------------------------------------------
    revno: 432.2.46 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Mon 2013-09-30 12:48:27 +0200
    message:
      Merge new mixing options
      
      The new mixing options were merged from a side branch first.
      An upcoming revision will sync with the trunk and pick up
      the CHANGES file.
        ------------------------------------------------------------
        revno: 432.5.6 [merge]
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: pexsi-mixing
        timestamp: Mon 2013-09-30 11:52:29 +0200
        message:
          Documentation for latest features
          
          Merged trunk-mixing--6. See Mixing.CHANGES.
        ------------------------------------------------------------
        revno: 432.5.5 [merge]
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: pexsi-mixing
        timestamp: Fri 2013-09-20 10:59:40 +0200
        message:
          Fixes for TranSiesta continuation and scf loop logic
          
          Merged trunk-mixing--5. See Mixing.CHANGES.
        ------------------------------------------------------------
        revno: 432.5.4 [merge]
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: pexsi-mixing
        timestamp: Mon 2013-09-16 12:03:40 +0200
        message:
          Normalize the DM in the routines that handle it
          
          Merged trunk-mixing--4. See Mixing.CHANGES.
        ------------------------------------------------------------
        revno: 432.5.3 [merge]
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: pexsi-mixing
        timestamp: Fri 2013-09-13 15:39:18 +0200
        message:
          Optionally avoid mixing DM or H after scf-convergence
          
          Merged trunk-mixing--3. See Mixing.CHANGES.
        ------------------------------------------------------------
        revno: 432.5.2 [merge]
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: pexsi-mixing
        timestamp: Fri 2013-09-13 15:11:37 +0200
        message:
          (Sync patchlogs for H mixing)
          
          Merged trunk-mixing--2. See Mixing.CHANGES.
          No changes to the code needed.
        ------------------------------------------------------------
        revno: 432.5.1 [merge]
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: pexsi-mixing
        timestamp: Fri 2013-09-13 14:51:36 +0200
        message:
          More options for Pulay mixing
          
          Merged trunk-mixing--1. See Mixing.CHANGES.
    ------------------------------------------------------------
    revno: 432.2.45 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Fri 2013-09-13 12:51:59 +0200
    message:
      Sync to trunk-444
      
      [merge] Bug fixes to the preconditioner in the OMM modules
    ------------------------------------------------------------
    revno: 432.2.44
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Fri 2013-09-06 12:56:20 +0200
    message:
      New PEXSI interface blocks based on ISO_C_BINDING
      
      This new mechanism, implemented by most compilers, guarantees datatype
      consistency and future-proofs the interface against a repeat of problems
      such as the passing of assumed-shape arrays.
      
      A set of dummy C routines have been created to test the interface in
      the absence of the library itself.
      
      removed:
        Src/pexsi_inertia.h
        Src/pexsi_interface.F90
        Src/pexsi_localdos.h
        Src/pexsi_solve.h
      added:
        Src/dummy_pexsi/
        Src/dummy_pexsi/README
        Src/dummy_pexsi/dummy_pexsi.c
        Src/m_pexsi_interface.f90
      modified:
        Src/Makefile
        Src/m_pexsi_local_dos.F90
        Src/m_pexsi_solver.F90
    ------------------------------------------------------------
    revno: 432.2.43
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Wed 2013-09-04 12:39:52 +0200
    message:
      Changes for compilation on Edison
      
      * The interface files were using the "assumed shape" array
        specification, instead of the "assumed size" one needed for
        interfacing to C. Apparently the PGI and gfortran compilers did not
        care about this, but the Intel compiler does. The array
        specifications have been changed from "(:)" to "(*)".
      
      * In m_redist_spmatrix, use "only" clauses for import of mpi symbols, to
        work around some name pollution.
      
      modified:
        Src/m_redist_spmatrix.F90
        Src/pexsi_inertia.h
        Src/pexsi_localdos.h
        Src/pexsi_solve.h
    ------------------------------------------------------------
    revno: 432.2.42
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Thu 2013-08-29 15:53:19 +0200
    message:
      Fix code for the case of H mixing.
      
      * Note that when mixing H the column dDmax no longer refers to DM_out -
      DM_in, but to "dHmax" (change of H with respect to the previous step).
      
      * Update Hold in compute_dm.
      
      * With the option
      
        MonitorForcesInSCF T
      
      the program prints the maximum absolute value of F_i - F_i(previous step)
      for the forces. When mixing the hamiltonian, extra code has to be inserted
      to preserve H.
      
      modified:
        Src/compute_dm.F
        Src/siesta_forces.F
        Docs/siesta.tex
    ------------------------------------------------------------
    revno: 432.2.41
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Wed 2013-08-28 17:00:12 +0200
    message:
      Implement Hamiltonian mixing
      
      Ported first basic patch from trunk-scf branch. Use the option
      
        MixHamiltonian T
      
      to enable mixing of H instead of the DM.
      
      Note that the convergence criterion is still based on the DM, i.e.,
      on || DM_out - DM_in || < tolerance.
      
      There is as yet no provision for input of H or re-use of H across
      geometries.
      
      modified:
        Docs/siesta.tex
        Src/Makefile
        Src/compute_dm.F
        Src/m_ts_global_vars.f90
        Src/m_ts_options.F90
        Src/mixer.F
        Src/setup_hamiltonian.F
        Src/siesta_forces.F
        Src/siesta_options.F90
        Src/sparse_matrices.F
        Src/state_init.F
    ------------------------------------------------------------
    revno: 432.2.40
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Wed 2013-08-28 16:26:14 +0200
    message:
      Compute explicitly the electronic entropy in PEXSI
      
      * Modified the computation of the electronic free energy
      to pass back the entropy to the caller routine.
      
      * For completeness, added a print statement for the entropy
      in diagonalization runs.
      
      modified:
        Src/compute_dm.F
        Src/m_pexsi_solver.F90
    ------------------------------------------------------------
    revno: 432.2.39
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Thu 2013-08-01 12:30:08 +0200
    message:
      Update interface to v0.4.6 (npSymbFact)
      
      * Updated PEXSI calls to take into account the new parameter to
      optionally set the number of processors used for the symbolic
      factorization. The relevant fdf symbol is
      
      PEXSI.np-SymbFact
      
      * Added timing calls to the PEXSI solver and inertia-count sections.
      
      modified:
        Src/m_pexsi_local_dos.F90
        Src/m_pexsi_solver.F90
        Src/pexsi_inertia.h
        Src/pexsi_localdos.h
        Src/pexsi_solve.h
    ------------------------------------------------------------
    revno: 432.2.38 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Wed 2013-07-31 16:14:54 +0200
    message:
      Sync to trunk-443
      
      New patches:
      
      * Update to gnubands program.
      * Cosmetic fixes to please Cray compiler. PRACE arch.make files.
      * Siesta as subroutine using MPI. Vydrov-VanVoorhis vdW functional.
        (Note: The MPI version of the "server/subroutine" option does not
         yet work with PEXSI)
      * Bug fixes in constraints routine.
      * New option for KB projector generation
      * Charge confinement and filteret basis sets.
      * Compilation fixes for tbtrans. Cosmetic changes.
    ------------------------------------------------------------
    revno: 432.2.37 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Thu 2013-07-04 16:43:23 +0200
    message:
      Use alloc module in pexsi. New 'matrix' mode. Fix index arrays
      
      (Georg Huhs, A. Garcia)
      
      * To facilitate the memory accounting, simple "allocate" statements
        have been replaced by calls to the alloc module in the PEXSI section.
      
      * A new "SolutionMethod", "matrix", has been implemented. This option
        makes the program stop after creating two ASCII files, H.matrix and
        S.matrix, containing H and S and the appropriate index arrays. For the
        format, see the routine write_hs_formatted in m_hsx.F
      
      * Some auxiliary index arrays intended only for O(N) calculations were
        allocated unconditionally. This has been fixed.
        
      modified:
        Docs/pexsi.CHANGES
        Src/Makefile
        Src/compute_dm.F
        Src/initparallel.F
        Src/m_hsx.F
        Src/m_pexsi_solver.F90
        Src/m_redist_spmatrix.F90
        Src/siesta_options.F90
        ------------------------------------------------------------
        revno: 432.4.9
        committer: Georg Huhs <ghuhs@bsc.es>
        branch nick: trunk-pexsi-richer
        timestamp: Thu 2013-07-04 14:44:12 +0200
        message:
          Added functionality for writing matrices to ASCII files 
          Activated in fdf file by 'SolutionMethod matrix'
          By now simple version, just writing H and S instead of calling a solver
        ------------------------------------------------------------
        revno: 432.4.8
        committer: Georg Huhs <ghuhs@bsc.es>
        branch nick: trunk-pexsi-richer
        timestamp: Wed 2013-07-03 15:25:48 +0200
        message:
          Changed several allocations in m_pexsi_solver and m_redist_spmatrix to re_alloc and de_alloc 
        ------------------------------------------------------------
        revno: 432.4.7 [merge]
        committer: Georg Huhs <ghuhs@bsc.es>
        branch nick: trunk-pexsi-richer
        timestamp: Tue 2013-06-18 17:28:50 +0200
        message:
          Merge with trunk rev 465
        ------------------------------------------------------------
        revno: 432.4.6
        committer: Georg Huhs <ghuhs@bsc.es>
        branch nick: trunk-pexsi-richer
        timestamp: Tue 2013-06-18 17:26:03 +0200
        message:
          Removed memory leak
        ------------------------------------------------------------
        revno: 432.4.5 [merge]
        committer: Georg Huhs <ghuhs@bsc.es>
        branch nick: trunk-pexsi-richer
        timestamp: Thu 2013-06-06 07:00:19 -0400
        message:
          Merged with Alberto's redistribution routines
    ------------------------------------------------------------
    revno: 432.2.36
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Fri 2013-06-07 14:59:06 +0200
    message:
      Command-line option to specify output file. More timings
      
      * Experimental support for command-line arguments has been added.
      Currently only one option is in effect:
      
          siesta -o OUTFILE
      
      will write output to "OUTFILE" instead of to standard output.
      This is done by closing and re-opening unit 6. 
      It is useful to avoid unwanted output to stdout by some libraries.
      
      * Add timer calls for the new re-distribution routines.
      
      * Use the tree timer by default.
      
      modified:
        Src/Makefile
        Src/m_pexsi_solver.F90
        Src/siesta_init.F
    ------------------------------------------------------------
    revno: 432.2.35
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Wed 2013-06-05 16:52:58 +0200
    message:
      Units in energy options. Better output. Rationalize debug output
      
      Full set of options and defaults for PEXSI (note energy units now):
      
      npPerPole  = fdf_get("PEXSI.np-per-pole",4)
      numPole    = fdf_get("PEXSI.num-poles",20)
      
      ! Hardly used?
      gap        = fdf_get("PEXSI.gap",0.0_dp,"Ry")
      deltaE     = fdf_get("PEXSI.delta-E",3.0_dp,"Ry")
      
      Tolerance heuristics:
      
      PEXSINumElectronToleranceMin = fdf_get("PEXSI.num-electron-tolerance-lower-bound",0.01_dp)
      PEXSINumElectronToleranceMax = fdf_get("PEXSI.num-electron-tolerance-upper-bound",0.5_dp)
      
      (Heuristics overriden by 
          PEXSINumElectronTolerance = fdf_get("PEXSI.num-electron-tolerance",...) )
      
      
      muMaxIter  = fdf_get("PEXSI.mu-max-iter",10)
      
      ! For feedback in case of wrong interval
      lateral_expansion_solver = fdf_get("PEXSI.lateral-expansion-solver",0.2_dp,"Ry")
      lateral_expansion_inertia = fdf_get("PEXSI.lateral-expansion-inertia",0.2_dp,"Ry")
      
      mu = fdf_get("PEXSI.mu",-0.60_dp,"Ry")
      muMin0           = fdf_get("PEXSI.mu-min",-1.0_dp,"Ry")
      muMax0           = fdf_get("PEXSI.mu-max", 0.0_dp,"Ry")
      
      isInertiaCount = fdf_get("PEXSI.inertia-count",1)
      numInertiaCounts = fdf_get("PEXSI.inertia-counts",3)
      inertiaMaxIter   = fdf_get("PEXSI.inertia-max-iter",5)
      inertiaNumElectronTolerance = fdf_get("PEXSI.inertia-num-electron-tolerance",10)
      numMinICountShifts = fdf_get("PEXSI.inertia-min-num-shifts", 10)
      
      ordering = fdf_get("PEXSI.ordering",1)
      
      modified:
        Src/m_pexsi_solver.F90
        Src/m_redist_spmatrix.F90
    ------------------------------------------------------------
    revno: 432.2.34 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Tue 2013-06-04 16:41:12 +0200
    message:
      New strategies for number of shifts and electron tolerance (G. Huhs)
      
         * the number of shifts for inertia count
         * adapting numElectronTolerance in PEXSI depending on dmax
        
        New fdf parameters: 
        PEXSI.inertia-min-num-shifts
        PEXSI.num-electron-tolerance-upper-bound 
        PEXSI.num-electron-tolerance-lower-bound  
      
      (With minor changes over Georg's version by Alberto Garcia)
      
      modified:
        Src/m_pexsi_solver.F90
        Src/siesta_forces.F
        ------------------------------------------------------------
        revno: 432.4.4
        committer: Georg Huhs <ghuhs@bsc.es>
        branch nick: trunk-pexsi-richer
        timestamp: Tue 2013-06-04 10:11:44 +0200
        message:
          New strategies for 
           * the number of shifts for inertia count
           * adapting numElectronTolerance in PEXSI depending on dmax
          
          New fdf parameters: 
          PEXSI.inertia-min-num-shifts
          PEXSI.num-electron-tolerance-upper-bound 
          PEXSI.num-electron-tolerance-lower-bound  
        ------------------------------------------------------------
        revno: 432.4.3 [merge]
        committer: Georg Huhs <ghuhs@bsc.es>
        branch nick: trunk-pexsi-richer
        timestamp: Wed 2013-05-22 10:21:45 +0200
        message:
          Merge with trunk-pexsi
        ------------------------------------------------------------
        revno: 432.4.2 [merge]
        committer: Georg Huhs <ghuhs@bsc.es>
        branch nick: trunk-pexsi-richer
        timestamp: Sat 2013-04-27 23:18:44 +0200
        message:
          Merge with trunk-pexsi and adopted to new interface
    ------------------------------------------------------------
    revno: 432.2.33
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: pexsi-newdist
    timestamp: Tue 2013-06-04 15:42:04 +0200
    message:
      Assorted fixes to redistribution routines. LDOS redistribution
      
      Fixed some subtle bugs in the routines.
      Enabled re-distribution for the PEXSI-LDOS calculation.
      
      modified:
        Src/Makefile
        Src/m_pexsi_local_dos.F90
        Src/m_pexsi_solver.F90
        Src/m_redist_spmatrix.F90
        Src/m_transfers.F90
        Src/parallel.F
        Src/siesta_init.F
    ------------------------------------------------------------
    revno: 432.2.32
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: pexsi-newdist
    timestamp: Mon 2013-06-03 11:35:27 +0200
    message:
      Implemented redistribution routines
      
      Siesta can now work with its own arbitrary number of processors
      (specified through the fdf variable MPI.Nprocs.SIESTA), which can
      be different from the number of processors per pole in PEXSI  (specified
      through PEXSI.np-per-pole).
      
      A few rough edges and debug statements might remain.
      Yet to be implemented: redistribution before and after the LDOS routine.
      
      added:
        Src/basic_type.inc
        Src/class_BlockCyclicDist.F90
        Src/class_Dist.F90
        Src/class_PEXSIDist.F90
        Src/m_comm.F90
        Src/m_object_debug.F90
        Src/m_redist_spmatrix.F90
        Src/m_transfers.F90
        Src/m_uuid.f90
      renamed:
        Src/m_pexsi_local_DOS.F90 => Src/m_pexsi_local_dos.F90
      modified:
        Src/Makefile
        Src/compute_dm.F
        Src/initparallel.F
        Src/m_pexsi_solver.F90
        Src/parallel.F
        Src/siesta.F
        Src/siesta_analysis.F
        Src/siesta_end.F
        Src/siesta_forces.F
        Src/siesta_init.F
        Src/m_pexsi_local_dos.F90
    ------------------------------------------------------------
    revno: 432.2.31
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Wed 2013-05-22 09:12:33 +0200
    message:
      Fix units in fdf input for LDOS-Selected-Inversion interface
      
      Relevant fdf variables:
      
      PEXSI.LocalDOS         (true or false, to enable LDOS-SI)
      PEXSI.LocalDOS.Energy  ENERGY unit          
      PEXSI.LocalDOS.Broadening  BROADENING unit    (i.e., must specify unit)
      
      modified:
        Src/m_pexsi_local_DOS.F90
    ------------------------------------------------------------
    revno: 432.2.30
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Wed 2013-05-15 16:14:54 +0200
    message:
      First implementation of LDOS-Selected-Inversion interface
      
      Relevant fdf variables:
      
      PEXSI.LocalDOS
      PEXSI.LocalDOS.Energy
      PEXSI.LocalDOS.Broadening
      
      added:
        Src/m_pexsi_local_DOS.F90
        Src/pexsi_localdos.h
      modified:
        Src/Makefile
        Src/pexsi_interface.F90
        Src/siesta.F
        Src/siesta_analysis.F
    ------------------------------------------------------------
    revno: 432.2.29
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Tue 2013-05-14 17:28:52 +0200
    message:
      Fix a bug in fallback loop for inertia count bracketting. scf prefix
      
      I was using "npPerPole" instead of "numPole" as the size of the
      inertiaList and shiftList arrays. 
      
      Replaced "siesta:" by "scf:" as the output prefix of the scf step
      information.
      
      modified:
        Src/m_pexsi_solver.F90
        Src/write_subs.F
    ------------------------------------------------------------
    revno: 432.2.28
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Fri 2013-05-10 14:22:35 +0200
    message:
      Implement fallback loops for inertia count and solver bracketting
      
      On error conditions, try to expand the bracketting interval and
      re-compute the inertia-counts. This is also done if the solver
      call returns with a non-correct number of electrons.
      
      By default, an scf step inherits the latest (muMin,muMax) interval
      from an inertia-count calculation.
      
      modified:
        Src/m_mpi_utils.F
        Src/m_pexsi_solver.F90
    ------------------------------------------------------------
    revno: 432.2.27
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Tue 2013-05-07 18:06:19 +0200
    message:
      Fix a bug, clarify the flow, and add placeholders
      
      The meaning of the "tolerance" parameter for inertia counts
      was misunderstood, and set to a very low value.
      
      The flow of control in siesta_forces has been clarified, with
      broadcast of iscf and better sectioning.
      
      A placeholder for the handling of the mu interval has been
      created.
      
      modified:
        Src/m_pexsi_solver.F90
        Src/siesta_forces.F
        Src/siesta_init.F
    ------------------------------------------------------------
    revno: 432.2.26
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Thu 2013-05-02 15:06:28 +0200
    message:
      Add 'info' parameter to PEXSI interface
      
      modified:
        Src/m_pexsi_solver.F90
        Src/pexsi_inertia.h
        Src/pexsi_interface.F90
        Src/pexsi_solve.h
    ------------------------------------------------------------
    revno: 432.2.25
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Fri 2013-04-26 12:37:54 +0200
    message:
      Remove poleTolerance from the interface. Finite T inertia count
      
      Lin made some changes to the PEXSI interface. The new update includes, 
      in his words:
      
      1) Inertia count.  The "finite temperature inertia count" strategy is
        now implemented (as given by a note I sent on 04/01).  With finite
        temperature taken into account, I expect that the code is going to
        be more accurate and more stable, especially for metallic systems or
        odd-number electron systems (such as SiH).  The number of
        mu-iterations should also be more reasonable.
      
      2) Pole expansion.  The parameter poleTolerance is now removed.  The
        reason is that I think there is really no way to realistically
        adjust this parameter from users' point of view.  On the other hand,
        we know about 1/3 of the poles in the pole expansion has very tiny
        weight, due to the nature of the Fermi-Dirac distribution.  I have
        implemented a strategy to dynamically adjust the number of poles
        given the numElectronTolerance as well as numPole.  As a result, all
        numPoles will have significant contributions to the computation.
        That means no poles will be skipped in the calculation.  This should
        also improve the load balancing.  This change also means that the
        number of poles used (numPole) parameter can be chosen to be less
        than before.
      
      3) Error estimate of the pole expansion.  I implemented a way to
        roughly estimate the error of the pole expansion in terms of the
        relative accuracy for computing the number of electrons.  You can
        search in logPEXSIxxx and find sentences like
      
      
      "Pole expansion indicates that the relative error of numElectron is
      bounded by 6.769894e-09 Required relative accuracy:
      numElectronTolerance / numElectronExact is 4.0950041e-06"
      
      It provides some rough idea how accurate the pole expansion is.
      
      modified:
        Src/m_pexsi_solver.F90
        Src/pexsi_solve.h
    ------------------------------------------------------------
    revno: 432.2.24 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Thu 2013-04-25 16:06:24 +0200
    message:
      First implementation of interface with smarter mu intervals
      
      This is basically the implementation by Georg Huhs of the new interface,
      with some modifications by A. Garcia (notably, the scf step number (iscf)
      is passed to the PEXSI solver directly).
      
      There are now two entry points to PEXSI:
      
      f_ppexsi_inertiacount_interface
      f_ppexsi_solve_interface
      
      together with new parameters to determine the behavior of the code.
      Full documentation will be produced at the time of final merging.
      
      removed:
        Src/pexsi.h
      added:
        Docs/pexsi-gh-richer.CHANGES
        Src/pexsi_inertia.h
        Src/pexsi_solve.h
      modified:
        Src/Makefile
        Src/compute_dm.F
        Src/m_pexsi_solver.F90
        Src/pexsi_interface.F90
        Src/siesta_init.F
        ------------------------------------------------------------
        revno: 432.4.1
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: pexsi-inertia-georg
        timestamp: Thu 2013-04-25 15:57:27 +0200
        message:
          Smarter interface with interval guessing by inertia counts
          
          This is the implementation by Georg Huhs of the new interface.
          
          There are now two entry points to PEXSI:
          
          f_ppexsi_inertiacount_interface
          f_ppexsi_solve_interface
          
          together with new parameters to determine the behavior of the code.
          Full documentation will be produced at the time of merging.
          
          (the dummy file pexsi_interface.F90, and the Makefile, was updated
          by A. Garcia)
          
          removed:
            Src/pexsi.h
          added:
            Docs/pexsi-gh-richer.CHANGES
            Src/pexsi_inertia.h
            Src/pexsi_solve.h
          modified:
            Src/Makefile
            Src/m_pexsi_solver.F90
            Src/pexsi_interface.F90
    ------------------------------------------------------------
    revno: 432.2.23
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Mon 2013-04-01 10:08:01 +0200
    message:
      New option to estimate chemical potential in PEXSI
      
      PEXSI.inertia-count 1
      
      (set by default) will tell the interface to estimate the initial
      chemical potential by the method of "inertia counts" (determination of
      the number of eigenvalues to the left of a given real number, by LDL^T
      factorization of the shifted Hamiltonian).
      
      modified:
        Src/m_pexsi_solver.F90
        Src/pexsi.h
        Src/pexsi_interface.F90
    ------------------------------------------------------------
    revno: 432.2.22
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Mon 2013-04-01 00:54:12 +0200
    message:
      New header file to consolidate interface
      
      Created file pexsi.h to hold the header information for the
      PEXSI interface routine. It is 'included' in m_pexsi_solver
      and in pexsi_interface.
      
      Moved files from previous stages to new directory OldPEXSI.
      
      added:
        Src/OldPEXSI/
        Src/pexsi.h
      renamed:
        Src/pexsi.F90 => Src/OldPEXSI/pexsi.F90
        Src/pexsi_dump.F90 => Src/OldPEXSI/pexsi_dump.F90
        Src/pexsi_exchange.F90 => Src/OldPEXSI/pexsi_exchange.F90
      modified:
        Src/Makefile
        Src/m_pexsi_solver.F90
        Src/pexsi_interface.F90
    ------------------------------------------------------------
    revno: 432.2.21 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Mon 2013-04-01 00:34:48 +0200
    message:
      Interface block for PEXSI. Mu history additions. Comments for distribution
      
      Added an interface block for the pexsi interface.  The routine is
      added to a library, which is linked if needed (specified in COMP_LIBS
      in the arch.make file).
      
      The dummy pexsi routine prints its arguments, and sets a few dummy
      output variables.  Currently the DM is not set, so the program crashes
      in the normalization test.
      
      New parameters implemented by Lin to monitor the history of mu
      convergence.
      
      removed:
        Src/pexsi_interface_true.inc
      added:
        Src/m_pexsi_solver.F90
        Src/pexsi_interface.F90
      modified:
        Src/Makefile
        Src/compute_dm.F
        ------------------------------------------------------------
        revno: 432.3.2
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: pexsi-newdist
        timestamp: Thu 2013-03-21 12:03:27 +0100
        message:
          Extended interface with mu history
          
          New parameters implemented by Lin to monitor the history
          of mu convergence. 
          The dummy pexsi routine now prints its arguments, and sets a few
          dummy output variables. 
          
          modified:
            Src/m_pexsi_solver.F90
            Src/pexsi_interface.F90
        ------------------------------------------------------------
        revno: 432.3.1
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: pexsi-newdist
        timestamp: Thu 2013-03-14 16:07:25 +0100
        message:
          Interface block for PEXSI. Some comments for new distribution
          
          Added an interface block for the pexsi interface.  The routine is
          added to a library, which is linked if needed (specified in COMP_LIBS
          in the arch.make file).
          
          Currently it does nothing, and the DM is not set, so the program crashes
          in the normalization test.
          
          removed:
            Src/pexsi_interface_true.inc
          added:
            Src/m_pexsi_solver.F90
            Src/pexsi_interface.F90
          modified:
            Src/Makefile
            Src/compute_dm.F
    ------------------------------------------------------------
    revno: 432.2.20 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Mon 2013-04-01 00:22:35 +0200
    message:
      Sync to trunk-434
      
      - OMM method
      - Tree timer
    ------------------------------------------------------------
    revno: 432.2.19
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Thu 2013-03-07 15:16:56 +0100
    message:
      Added rank translation. Abstracted modules.
      
      In case the groups involve ranks not starting at zero and
      monotonic, added rank translation to the transfer routine.
      
      This routine is now part of a new module, which defines the
      'comm' type and provides transfer functions for arrays.
      
      Abstracted also the 'redist' routine.
      
      added:
        Util/MPI_test/m_matrix.F90
        Util/MPI_test/m_redist.F90
        Util/MPI_test/m_transfers.F90
      modified:
        Util/MPI_test/Makefile
        Util/MPI_test/dist.F90
    ------------------------------------------------------------
    revno: 432.2.18
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Wed 2013-03-06 16:33:59 +0100
    message:
      Fix a bug in node_handling_element for pexsi dists.
      
      Sometimes the last node handles *a lot* of elements,
      and in those cases the naive algorithm was wrong.
      
      Fixed it in the prototype, and also in the current code.
      
      modified:
        Src/parallelsubs.F
        Util/MPI_test/class_PEXSIDist.F90
    ------------------------------------------------------------
    revno: 432.2.17
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Sun 2013-03-03 01:48:54 +0100
    message:
      Abstracted the distribution kind
      
      New class_Dist encompasses both block-cyclic and PEXSI-type
      distributions.
      
      added:
        Util/MPI_test/class_Dist.F90
      modified:
        Util/MPI_test/Makefile
        Util/MPI_test/dist.F90
    ------------------------------------------------------------
    revno: 432.2.16
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Fri 2013-03-01 15:29:29 +0100
    message:
      Abstracted routine for distribution changes
      
      Clarified the logic of group memberships.
      Still, only groups starting at 0 in group_world are
      supported (no rank translation yet).
      
      modified:
        Util/MPI_test/dist.F90
    ------------------------------------------------------------
    revno: 432.2.15
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Thu 2013-02-28 16:43:53 +0100
    message:
      Advanced prototype for distribution changes
      
      It can now transfer an actual example of sparse matrix.
      Two subsets are symmetric (except for distribution type).
      
      modified:
        Util/MPI_test/dist.F90
        Util/MPI_test/class_BlockCyclicDist.F90
    ------------------------------------------------------------
    revno: 432.2.14
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Thu 2013-02-28 12:55:15 +0100
    message:
      Fifth prototype for distribution changes
      
      Used 'comm' derived type to hold communication information.
      Isolated the transfers in a subroutine.
      
      modified:
        Util/MPI_test/dist.F90
    ------------------------------------------------------------
    revno: 432.2.13
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Thu 2013-02-28 12:33:47 +0100
    message:
      Fourth prototype for distribution changes
      
      Cleaner logic for local storage of requests.
      Smaller output for large cases.
      
      modified:
        Util/MPI_test/dist.F90
    ------------------------------------------------------------
    revno: 432.2.12
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Thu 2013-02-28 11:27:20 +0100
    message:
      Third prototype for distribution changes
      
      Grouped consecutive orbitals into larger communications.
      Used mpi_waitall instead of explicit loops.
      
      modified:
        Util/MPI_test/dist.F90
    ------------------------------------------------------------
    revno: 432.2.11
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Wed 2013-02-27 16:01:50 +0100
    message:
      Second prototype for distribution changes
      
      Second group is a proper subgroup of the first.
      Implemented non-blocking communications.
      
      modified:
        Util/MPI_test/class_BlockCyclicDist.F90
        Util/MPI_test/class_PEXSIDist.F90
        Util/MPI_test/dist.F90
    ------------------------------------------------------------
    revno: 432.2.10
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Wed 2013-02-27 14:57:04 +0100
    message:
      First prototype for distribution changes
      
      Added program 'dist' to Util/MPI_test, to explore strategies for
      changes in the matrix distributions. Work in progress.
      
      added:
        Util/MPI_test/basic_type.inc
        Util/MPI_test/class_BlockCyclicDist.F90
        Util/MPI_test/class_PEXSIDist.F90
        Util/MPI_test/dielocal.F90
        Util/MPI_test/dist.F90
        Util/MPI_test/m_uuid.f90
        Util/MPI_test/object_debug.F90
      modified:
        Util/MPI_test/Makefile
    ------------------------------------------------------------
    revno: 432.2.9
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Thu 2013-02-21 12:01:46 +0100
    message:
      Proper estimation of free energy. Monitor Ebs in two ways
      
      There was an extra term of mu*N_e in the definition of the free energy
      in PEXSI. This is now taken into account. Added the PEXSI case in the
      copying of entropy in "setup_hamiltonian" (strange place...).
      
      The band-structure energy is computed in two ways: Tr(H*DM) and Tr(S*DM)
      to monitor slight differences.
      
      modified:
        Src/pexsi.F90
        Src/setup_hamiltonian.F
    ------------------------------------------------------------
    revno: 432.2.8
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Mon 2013-02-18 10:33:58 +0100
    message:
      Add computation of Free Energy. Pass Ef and electronic temp
      
      The electronic temperature is now passed to PEXSI by Siesta.
      The fermi level is passed back, as is an estimate of the difference
      between F and E, from which the 'entropy' can be calculated.
      
      'write_siesta_energies' now supports PEXSI.
      
      (+ bug and typos fixes)
      
      modified:
        Src/MPI/mpi_siesta.F90
        Src/Makefile
        Src/compute_dm.F
        Src/pexsi.F90
        Src/siesta_end.F
        Src/siesta_init.F
        Src/write_subs.F
    ------------------------------------------------------------
    revno: 432.2.7
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Fri 2013-02-15 15:54:31 +0100
    message:
      Simplification of MPI interface
      
      In the interest of expediency, the MPI interface has been
      stripped down to the bare minimum:
      
      -- The "grid" types
      -- The "overloaded" mpi_comm_world
      
      No routines are now included. The "use" statements have been modified
      accordingly.
      
      renamed:
        Src/MPI/mpi_siesta.f90 => Src/MPI/mpi_siesta.F90
      modified:
        Src/SiestaXC/mesh3d.F90
        Src/alloc.F90
        Src/cdiag.F
        Src/diagon.F
        Src/ioxv.F
        Src/m_mpi_utils.F
        Src/m_timer.F90
        Src/m_ts_electrode.F90
        Src/m_ts_gf.F90
        Src/m_ts_in_siesta.F
        Src/m_ts_kpoints.F90
        Src/m_ts_scattering.F
        Src/moreParallelSubs.F90
        Src/optical.F
        Src/setup_ordern_indexes.F90
        Src/MPI/mpi_siesta.F90
    ------------------------------------------------------------
    revno: 432.2.6
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Fri 2013-02-15 14:43:53 +0100
    message:
      Third stage of PEXSI interface. Subset communicator for Siesta
      
      Based on the value of PEXSI.np-per-pole, Siesta now uses a subset
      communicator for most of the work. When PEXSI is entered, all
      the processors participate.
      
      This is implemented by:
      
       -- Creating a new communicator and storing its value in the
          (now variable) mpi_comm_world.
      
       -- Setting a boolean flag "worker" to .true. in those processes
          that are supposed to participate in Siesta work.
      
       -- Broadcasting on true_mpi_comm_world any flow-determining variables
          (such as 'last'), so that all processors call the relevant sections.
      
       -- Making most of the code conditional to "worker" being .true., except
          those sections that are meant to be executed by every processor.
      
      added:
        Src/pexsi_interface_true.inc
        Util/MPI_test/newcomm.F
      modified:
        Src/MPI/mpi_siesta.f90
        Src/cdiag.F
        Src/compute_dm.F
        Src/parallel.F
        Src/pexsi.F90
        Src/rdiag.F
        Src/siesta.F
        Src/siesta_end.F
        Src/siesta_forces.F
        Src/siesta_init.F
        Src/timer_tree.f90
        Util/MPI_test/Makefile
    ------------------------------------------------------------
    revno: 432.2.5
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Thu 2013-02-07 15:28:13 +0100
    message:
      Second stage of interface. PEXSI-specific distribution
      
      Implemented the interface by replacing the distribution
      routines in Siesta (in parallelsubs) to use Lin's distribution.
      This is conceptually simpler for now.
      
      added:
        Src/pexsi_exchange.F90
      modified:
        Src/Makefile
        Src/compute_dm.F
        Src/initparallel.F
        Src/parallelsubs.F
        Src/pexsi.F90
        Src/siesta_init.F
    ------------------------------------------------------------
    revno: 432.2.4
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Wed 2013-02-06 16:29:18 +0100
    message:
      Second stage of interface. Block-cyclic plus 0<->LastNode exchange
      
      Lin's distribution is very similar to block-cyclic, except that the
      last node instead of the first one keeps the slack orbitals.
      
      Implemented the interface by setting the Siesta blocksize to Norbs/NNodes
      and by exchanging information between the first and last nodes. This has
      the advantage (theoretical) of being able to call scalapack if needed...
      
      added:
        Src/pexsi_dump.F90
      modified:
        Src/Makefile
        Src/compute_dm.F
        Src/initparallel.F
        Src/pexsi.F90
    ------------------------------------------------------------
    revno: 432.2.3
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Tue 2013-02-05 19:05:36 +0100
    message:
      Fix extra item in first line of .matrix files
      
      Remove the spin multiplicity, as Lin did not take it
      into account.
      
      modified:
        Src/pexsi.F90
    ------------------------------------------------------------
    revno: 432.2.2
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Mon 2013-02-04 14:56:31 +0100
    message:
      Second prototype of PEXSI interface
      
      Called the interface.
      
      renamed:
        Src/pexsi.f90 => Src/pexsi.F90
      modified:
        Src/Makefile
        Src/compute_dm.F
        Src/pexsi.F90
    ------------------------------------------------------------
    revno: 432.2.1
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-pexsi
    timestamp: Mon 2013-02-04 12:06:15 +0100
    message:
      First prototype of PEXSI interface
      
      Created a routine to write H and S in formatted (!) form to 
      file.
      
      Added new solution method "pexsi".
      
      added:
        Src/pexsi.f90
      modified:
        Src/Makefile
        Src/compute_dm.F
        Src/m_hsx.F
        Src/siesta_options.F90
        Src/sys.F
------------------------------------------------------------
revno: 537
committer: Nick Papior <nickpapior@gmail.com>
branch nick: trunk
timestamp: Fri 2016-07-29 15:30:24 +0200
message:
  Fixed utility build and exact library names
  
  Changing the libvardict is now complete. There
  where several problems in utilities.
  
  Fixed all references for fdf_global_get.
------------------------------------------------------------
revno: 536
committer: Nick Papior <nickpapior@gmail.com>
branch nick: trunk
timestamp: Fri 2016-07-29 14:34:18 +0200
message:
  Removed fdf_global module
  
  - The fdf library inherently handles parallel access.
    Thus the fdf_global module was unnecessary.
    It has been removed and all calls changed.
------------------------------------------------------------
revno: 535
committer: Nick Papior <nickpapior@gmail.com>
branch nick: trunk
timestamp: Fri 2016-07-29 13:41:50 +0200
message:
  Fixes compilation of Nick libraries
  
  - libvardict.a has changed name to libfdict.a
    to make it easier to grasp.
  
  - In both NCDF and fdict libs the PP processor
    command has changed name to CPP (PP is non-standard).
  
    Further the default CPP command is now $(FC) -E -P -x c
    which may be overwritten using CPP in arch.make
------------------------------------------------------------
revno: 534
fixes bug: https://launchpad.net/bugs/1605689
committer: Nick Papior <nickpapior@gmail.com>
branch nick: trunk
timestamp: Wed 2016-07-27 21:53:42 +0200
message:
  Fixes lp:1605689, bands for NC
  
  - Interface call for diag2k in bands was erroneous
------------------------------------------------------------
revno: 533 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: trunk
timestamp: Mon 2016-07-25 15:12:49 +0200
message:
  Merged elpa+MRRR
  
  - The ELPA library is now enabled through:
      Diag.ELPA T
    it relies on intrinicly added ELPA library.
  
    Later it may be externally linked.
  
    In addition to the elpa+MRR branch we have:
    defaulted the kernels.
    This is necessary in case the user does not pre-define
    the kernels.
  
  - The MRRR library is now enabled through:
      Diag.MRRR T
    it requires the ScaLAPACK library to have the MRRR routines.
  
    Currently there is no handling if the ScaLAPACK library does
    not have these routines.
    ------------------------------------------------------------
    revno: 453.1.8 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-elpa-mrrr
    timestamp: Mon 2016-07-25 11:11:27 +0200
    message:
      Sync to trunk-531
    ------------------------------------------------------------
    revno: 453.1.7
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-elpa-mrrr
    timestamp: Thu 2016-07-21 10:13:24 +0200
    message:
      Updated manual
      
      Note that ELPA code is embedded in the Siesta distribution for now.
      Eventually, Siesta should link to an external pre-compiled ELPA library.
    ------------------------------------------------------------
    revno: 453.1.6 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-elpa-mrrr
    timestamp: Thu 2016-07-21 10:01:20 +0200
    message:
      Sync to trunk-525
    ------------------------------------------------------------
    revno: 453.1.5 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-elpa-mrrr
    timestamp: Fri 2016-05-27 17:20:03 +0200
    message:
      Sync with trunk-503
      
      Update NOTICE.txt to include a mention of ELPA.
    ------------------------------------------------------------
    revno: 453.1.4 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-elpa
    timestamp: Fri 2015-10-09 12:02:56 +0200
    message:
      Sync to trunk-479
    ------------------------------------------------------------
    revno: 453.1.3 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-elpa
    timestamp: Thu 2015-10-01 11:09:25 +0200
    message:
      Sync to trunk-478. Added MRRR example
      
      * Added Tests/sih-mrrr
    ------------------------------------------------------------
    revno: 453.1.2
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-elpa
    timestamp: Sun 2014-01-19 14:20:43 +0100
    message:
      Added real solver based on the MRRR method in Scalapack.
      
      This method allows to compute only a subset of eigenpairs.
      
      First version with query for sizing of work arrays.
      It could probably be optimized for memory in Z, since
      only a subset of eigenvectors is dealt with.
      
      Set the option with
      
       Diag.MRRR T
      
      and specify number of eigenstates to compute by
      
      NumberOfEigenstates N
      
      (A. Garcia)
      
      added:
        Src/rdiag_mrrr.F
      modified:
        Src/Makefile
        Src/diagg.F
    ------------------------------------------------------------
    revno: 453.1.1 [merge]
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: trunk-elpa
    timestamp: Fri 2014-01-17 14:52:11 +0100
    message:
      Ported ELPA interface to trunk
      
      The version interfaced is that nicknamed 'ELPA_2011.12'.
      So far there is only functionality for real matrices.
      
      added:
        Docs/ELPA.CHANGES
        Src/Sys/macosx-gfortran-openmpi.make
        Src/elpa1.f90
        Src/elpa2.f90
        Src/elpa2_kernels.f90
        Src/rdiag_elpa.F
      modified:
        Src/Makefile
        Src/diagg.F
        ------------------------------------------------------------
        revno: 300.12.2
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 3.0-elpa
        timestamp: Fri 2012-02-10 16:44:25 +0100
        message:
          ELPA solver now works for real matrices
          
          It works with the intel compiler and openmpi-1.4.
          
          modified:
            Src/rdiag_elpa.F
        ------------------------------------------------------------
        revno: 300.12.1
        committer: Alberto Garcia <albertog@icmab.es>
        branch nick: 3.0-elpa
        timestamp: Fri 2012-02-10 12:04:40 +0100
        message:
          First step for ELPA interface
          
          Wrote a new routine rdiag_elpa to interface with the library.
          There are some residual MPI problems.
          
          added:
            Src/Sys/macosx-gfortran-openmpi.make
            Src/elpa1.f90
            Src/elpa2.f90
            Src/elpa2_kernels.f90
            Src/rdiag_elpa.F
          modified:
            Src/Makefile
            Src/diagg.F
------------------------------------------------------------
revno: 532
committer: Nick Papior <nickpapior@gmail.com>
branch nick: trunk
timestamp: Mon 2016-07-25 07:26:03 +0200
message:
  Added -o to gnubands, made new.gnubands -> gnubands
  
  - Updated gnubands utility
  
  - Added -o option for gnubands.
  
    It now allows direct writing to a file without
    piping.
  
  - Re-formatted eigfat2plot (no code change)
------------------------------------------------------------
revno: 531
fixes bug: https://launchpad.net/bugs/1605304
committer: Nick Papior <nickpapior@gmail.com>
branch nick: trunk
timestamp: Thu 2016-07-21 20:10:36 +0200
message:
  Fixed geometry constrainst and wrap-arounds fixes lp:1605304
  
  - Allow negative ranges of atoms without specifying the step
    number
------------------------------------------------------------
revno: 530
committer: Nick Papior <nickpapior@gmail.com>
branch nick: trunk
timestamp: Wed 2016-07-13 11:20:56 +0200
message:
  Removed all references to "contiguous" attribute
  
  - Further the atom_graph and m_supercell now have
    restricted their module use to be privatized.
  
  - All source files have their contiguous attribute
    removed.
  
    We should add this as a preprocessor flag in case
    the compiler supports it.
  
    Several older compilers does not support this :(
------------------------------------------------------------
revno: 529
committer: Nick Papior <nickpapior@gmail.com>
branch nick: trunk
timestamp: Tue 2016-07-05 12:44:45 +0200
message:
  Added si111-spinpol reference test
  
  - The spin polarized Si111 test had never been 
    added to the reference.
------------------------------------------------------------
revno: 528 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: trunk
timestamp: Tue 2016-07-05 11:04:07 +0200
message:
  Merged spin type
  
  - The spin data-type has been added.
    This encompass a simple derived data type
    to contain all relevant information regarding
    the dimensionality of different parts of the
    physical quantities.
  
    I.e. it knows how big the Hamiltonian, Density matrix,
    Energy density matrix, Grids, etc. are dependent on the
    system setup.
  
    All future use of the spin variables should pass the
      type(tSpin) :: spin
    and use its components.
  
  - To see an example (correct use), see vmat.F90
    ------------------------------------------------------------
    revno: 523.1.1
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: spin
    timestamp: Wed 2016-06-22 10:57:57 +0200
    message:
      Streamlining the spin flags used
      
      - Future changes regarding the spin will introduce
        the spin components using a derived type containing
        all relevant information regarding the spin
        configuration of the calculation.
      
      
      - Now m_spin.F90 also contains a module t_spin
        containing the derived type.
      
        This derived type is as an initial attempt
        implemented in the vmat routine.
      
        Indeed the clarity of the interface is easier
        to recognize.
------------------------------------------------------------
revno: 527
committer: Nick Papior <nickpapior@gmail.com>
branch nick: trunk
timestamp: Tue 2016-06-28 14:42:55 +0200
message:
  Fixes dH read in tbtrans
  
  - The dH read is now consistent with sisl.
  
    In a future commit we will delete the Util/TS/TB
    folder as that has been fully superseeded with sisl.
  
  - Updated option print-out of dH options
  
  - Fixed reading the netcdf data with not all levels
    existing
  
  - Fixed reading from dH with multiple spin indices
------------------------------------------------------------
revno: 526 [merge]
committer: Nick Papior <nickpapior@gmail.com>
branch nick: trunk
timestamp: Tue 2016-06-28 07:57:03 +0200
message:
  Fixes LDA+U implementation by also allowing non-GGA-PBE XC
  
  - Also explicitly adds several broadcast calls of the
    LDA+U internals. Some are redundant, but for clarity
    they are added
    ------------------------------------------------------------
    revno: 524.1.2
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: ldau-non-ggapbe
    timestamp: Wed 2016-06-22 22:27:24 +0200
    message:
      Added bcast to ensure all LDA+U variables are global
        
    ------------------------------------------------------------
    revno: 524.1.1
    committer: Nick Papior <nickpapior@gmail.com>
    branch nick: ldau-non-ggapbe
    timestamp: Wed 2016-06-22 21:57:38 +0200
    message:
      Fixed LDA+U and non GGA-PBE calculations
      
      - The LDA+U implementation explicitly calculated
        the pseudopotentials using GGA-PBE.
      
        This was hard-coded and now removed
      
        
------------------------------------------------------------
revno: 525 [merge]
committer: Alberto Garcia <albertog@icmab.es>
branch nick: trunk
timestamp: Thu 2016-06-23 14:27:35 +0200
message:
  Merged 4.0-500
  
  * Update list of contributors.
  * Electric-field/slab-dipole-correction fix.
  * Fix to avoid ps reparametrization in bessel case
  * Remove Util/pseudo-xml
  * Other minor changes in README files
    ------------------------------------------------------------
    revno: 483.3.14
    tags: 4.0-release, v4.0
    committer: Alberto Garcia <albertog@icmab.es>
    branch nick: 4.0
    timestamp: Thu 2016-06-23 12:02:59 +0200
    message:
      Release of siesta-4.0
      
      * Update Docs/release_notes.4.0
      
      * Update list of contributors.
      
      * Add some more documentation and comments, and clarify notes in
        output for the recet electric-field/slab-dipole-correction fix.
      
      * Remove Util/pseudo-xml
      
      * Other minor changes in README files
      
      
        
      		
      
      	
